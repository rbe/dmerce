import mainlib

sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]


isbox = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 
         0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 
         0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 
         0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 
         0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 
         0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 
         0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 
         0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 
         0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 
         0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 
         0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 
         0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 
         0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 
         0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 
         0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 
         0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]



tbox = [0xC66363A5L, 0xF87C7C84L, 0xEE777799L, 0xF67B7B8DL, 0xFFF2F20DL, 0xD66B6BBDL, 0xDE6F6FB1L, 0x91C5C554L, 
        0x60303050L, 0x02010103L, 0xCE6767A9L, 0x562B2B7DL, 0xE7FEFE19L, 0xB5D7D762L, 0x4DABABE6L, 0xEC76769AL, 
        0x8FCACA45L, 0x1F82829DL, 0x89C9C940L, 0xFA7D7D87L, 0xEFFAFA15L, 0xB25959EBL, 0x8E4747C9L, 0xFBF0F00BL, 
        0x41ADADECL, 0xB3D4D467L, 0x5FA2A2FDL, 0x45AFAFEAL, 0x239C9CBFL, 0x53A4A4F7L, 0xE4727296L, 0x9BC0C05BL, 
        0x75B7B7C2L, 0xE1FDFD1CL, 0x3D9393AEL, 0x4C26266AL, 0x6C36365AL, 0x7E3F3F41L, 0xF5F7F702L, 0x83CCCC4FL, 
        0x6834345CL, 0x51A5A5F4L, 0xD1E5E534L, 0xF9F1F108L, 0xE2717193L, 0xABD8D873L, 0x62313153L, 0x2A15153FL, 
        0x0804040CL, 0x95C7C752L, 0x46232365L, 0x9DC3C35EL, 0x30181828L, 0x379696A1L, 0x0A05050FL, 0x2F9A9AB5L, 
        0x0E070709L, 0x24121236L, 0x1B80809BL, 0xDFE2E23DL, 0xCDEBEB26L, 0x4E272769L, 0x7FB2B2CDL, 0xEA75759FL, 
        0x1209091BL, 0x1D83839EL, 0x582C2C74L, 0x341A1A2EL, 0x361B1B2DL, 0xDC6E6EB2L, 0xB45A5AEEL, 0x5BA0A0FBL, 
        0xA45252F6L, 0x763B3B4DL, 0xB7D6D661L, 0x7DB3B3CEL, 0x5229297BL, 0xDDE3E33EL, 0x5E2F2F71L, 0x13848497L, 
        0xA65353F5L, 0xB9D1D168L, 0x00000000L, 0xC1EDED2CL, 0x40202060L, 0xE3FCFC1FL, 0x79B1B1C8L, 0xB65B5BEDL, 
        0xD46A6ABEL, 0x8DCBCB46L, 0x67BEBED9L, 0x7239394BL, 0x944A4ADEL, 0x984C4CD4L, 0xB05858E8L, 0x85CFCF4AL, 
        0xBBD0D06BL, 0xC5EFEF2AL, 0x4FAAAAE5L, 0xEDFBFB16L, 0x864343C5L, 0x9A4D4DD7L, 0x66333355L, 0x11858594L, 
        0x8A4545CFL, 0xE9F9F910L, 0x04020206L, 0xFE7F7F81L, 0xA05050F0L, 0x783C3C44L, 0x259F9FBAL, 0x4BA8A8E3L, 
        0xA25151F3L, 0x5DA3A3FEL, 0x804040C0L, 0x058F8F8AL, 0x3F9292ADL, 0x219D9DBCL, 0x70383848L, 0xF1F5F504L, 
        0x63BCBCDFL, 0x77B6B6C1L, 0xAFDADA75L, 0x42212163L, 0x20101030L, 0xE5FFFF1AL, 0xFDF3F30EL, 0xBFD2D26DL, 
        0x81CDCD4CL, 0x180C0C14L, 0x26131335L, 0xC3ECEC2FL, 0xBE5F5FE1L, 0x359797A2L, 0x884444CCL, 0x2E171739L, 
        0x93C4C457L, 0x55A7A7F2L, 0xFC7E7E82L, 0x7A3D3D47L, 0xC86464ACL, 0xBA5D5DE7L, 0x3219192BL, 0xE6737395L, 
        0xC06060A0L, 0x19818198L, 0x9E4F4FD1L, 0xA3DCDC7FL, 0x44222266L, 0x542A2A7EL, 0x3B9090ABL, 0x0B888883L, 
        0x8C4646CAL, 0xC7EEEE29L, 0x6BB8B8D3L, 0x2814143CL, 0xA7DEDE79L, 0xBC5E5EE2L, 0x160B0B1DL, 0xADDBDB76L, 
        0xDBE0E03BL, 0x64323256L, 0x743A3A4EL, 0x140A0A1EL, 0x924949DBL, 0x0C06060AL, 0x4824246CL, 0xB85C5CE4L, 
        0x9FC2C25DL, 0xBDD3D36EL, 0x43ACACEFL, 0xC46262A6L, 0x399191A8L, 0x319595A4L, 0xD3E4E437L, 0xF279798BL, 
        0xD5E7E732L, 0x8BC8C843L, 0x6E373759L, 0xDA6D6DB7L, 0x018D8D8CL, 0xB1D5D564L, 0x9C4E4ED2L, 0x49A9A9E0L, 
        0xD86C6CB4L, 0xAC5656FAL, 0xF3F4F407L, 0xCFEAEA25L, 0xCA6565AFL, 0xF47A7A8EL, 0x47AEAEE9L, 0x10080818L, 
        0x6FBABAD5L, 0xF0787888L, 0x4A25256FL, 0x5C2E2E72L, 0x381C1C24L, 0x57A6A6F1L, 0x73B4B4C7L, 0x97C6C651L, 
        0xCBE8E823L, 0xA1DDDD7CL, 0xE874749CL, 0x3E1F1F21L, 0x964B4BDDL, 0x61BDBDDCL, 0x0D8B8B86L, 0x0F8A8A85L, 
        0xE0707090L, 0x7C3E3E42L, 0x71B5B5C4L, 0xCC6666AAL, 0x904848D8L, 0x06030305L, 0xF7F6F601L, 0x1C0E0E12L, 
        0xC26161A3L, 0x6A35355FL, 0xAE5757F9L, 0x69B9B9D0L, 0x17868691L, 0x99C1C158L, 0x3A1D1D27L, 0x279E9EB9L, 
        0xD9E1E138L, 0xEBF8F813L, 0x2B9898B3L, 0x22111133L, 0xD26969BBL, 0xA9D9D970L, 0x078E8E89L, 0x339494A7L, 
        0x2D9B9BB6L, 0x3C1E1E22L, 0x15878792L, 0xC9E9E920L, 0x87CECE49L, 0xAA5555FFL, 0x50282878L, 0xA5DFDF7AL, 
        0x038C8C8FL, 0x59A1A1F8L, 0x09898980L, 0x1A0D0D17L, 0x65BFBFDAL, 0xD7E6E631L, 0x844242C6L, 0xD06868B8L, 
        0x824141C3L, 0x299999B0L, 0x5A2D2D77L, 0x1E0F0F11L, 0x7BB0B0CBL, 0xA85454FCL, 0x6DBBBBD6L, 0x2C16163AL]

itbox = [0x51F4A750L, 0x7E416553L, 0x1A17A4C3L, 0x3A275E96L, 0x3BAB6BCBL, 0x1F9D45F1L, 0xACFA58ABL, 0x4BE30393L, 
         0x2030FA55L, 0xAD766DF6L, 0x88CC7691L, 0xF5024C25L, 0x4FE5D7FCL, 0xC52ACBD7L, 0x26354480L, 0xB562A38FL, 
         0xDEB15A49L, 0x25BA1B67L, 0x45EA0E98L, 0x5DFEC0E1L, 0xC32F7502L, 0x814CF012L, 0x8D4697A3L, 0x6BD3F9C6L, 
         0x038F5FE7L, 0x15929C95L, 0xBF6D7AEBL, 0x955259DAL, 0xD4BE832DL, 0x587421D3L, 0x49E06929L, 0x8EC9C844L, 
         0x75C2896AL, 0xF48E7978L, 0x99583E6BL, 0x27B971DDL, 0xBEE14FB6L, 0xF088AD17L, 0xC920AC66L, 0x7DCE3AB4L, 
         0x63DF4A18L, 0xE51A3182L, 0x97513360L, 0x62537F45L, 0xB16477E0L, 0xBB6BAE84L, 0xFE81A01CL, 0xF9082B94L, 
         0x70486858L, 0x8F45FD19L, 0x94DE6C87L, 0x527BF8B7L, 0xAB73D323L, 0x724B02E2L, 0xE31F8F57L, 0x6655AB2AL, 
         0xB2EB2807L, 0x2FB5C203L, 0x86C57B9AL, 0xD33708A5L, 0x302887F2L, 0x23BFA5B2L, 0x02036ABAL, 0xED16825CL, 
         0x8ACF1C2BL, 0xA779B492L, 0xF307F2F0L, 0x4E69E2A1L, 0x65DAF4CDL, 0x0605BED5L, 0xD134621FL, 0xC4A6FE8AL, 
         0x342E539DL, 0xA2F355A0L, 0x058AE132L, 0xA4F6EB75L, 0x0B83EC39L, 0x4060EFAAL, 0x5E719F06L, 0xBD6E1051L, 
         0x3E218AF9L, 0x96DD063DL, 0xDD3E05AEL, 0x4DE6BD46L, 0x91548DB5L, 0x71C45D05L, 0x0406D46FL, 0x605015FFL, 
         0x1998FB24L, 0xD6BDE997L, 0x894043CCL, 0x67D99E77L, 0xB0E842BDL, 0x07898B88L, 0xE7195B38L, 0x79C8EEDBL, 
         0xA17C0A47L, 0x7C420FE9L, 0xF8841EC9L, 0x00000000L, 0x09808683L, 0x322BED48L, 0x1E1170ACL, 0x6C5A724EL,
         0xFD0EFFFBL, 0x0F853856L, 0x3DAED51EL, 0x362D3927L, 0x0A0FD964L, 0x685CA621L, 0x9B5B54D1L, 0x24362E3AL, 
         0x0C0A67B1L, 0x9357E70FL, 0xB4EE96D2L, 0x1B9B919EL, 0x80C0C54FL, 0x61DC20A2L, 0x5A774B69L, 0x1C121A16L, 
         0xE293BA0AL, 0xC0A02AE5L, 0x3C22E043L, 0x121B171DL, 0x0E090D0BL, 0xF28BC7ADL, 0x2DB6A8B9L, 0x141EA9C8L, 
         0x57F11985L, 0xAF75074CL, 0xEE99DDBBL, 0xA37F60FDL, 0xF701269FL, 0x5C72F5BCL, 0x44663BC5L, 0x5BFB7E34L, 
         0x8B432976L, 0xCB23C6DCL, 0xB6EDFC68L, 0xB8E4F163L, 0xD731DCCAL, 0x42638510L, 0x13972240L, 0x84C61120L, 
         0x854A247DL, 0xD2BB3DF8L, 0xAEF93211L, 0xC729A16DL, 0x1D9E2F4BL, 0xDCB230F3L, 0x0D8652ECL, 0x77C1E3D0L, 
         0x2BB3166CL, 0xA970B999L, 0x119448FAL, 0x47E96422L, 0xA8FC8CC4L, 0xA0F03F1AL, 0x567D2CD8L, 0x223390EFL, 
         0x87494EC7L, 0xD938D1C1L, 0x8CCAA2FEL, 0x98D40B36L, 0xA6F581CFL, 0xA57ADE28L, 0xDAB78E26L, 0x3FADBFA4L, 
         0x2C3A9DE4L, 0x5078920DL, 0x6A5FCC9BL, 0x547E4662L, 0xF68D13C2L, 0x90D8B8E8L, 0x2E39F75EL, 0x82C3AFF5L, 
         0x9F5D80BEL, 0x69D0937CL, 0x6FD52DA9L, 0xCF2512B3L, 0xC8AC993BL, 0x10187DA7L, 0xE89C636EL, 0xDB3BBB7BL, 
         0xCD267809L, 0x6E5918F4L, 0xEC9AB701L, 0x834F9AA8L, 0xE6956E65L, 0xAAFFE67EL, 0x21BCCF08L, 0xEF15E8E6L, 
         0xBAE79BD9L, 0x4A6F36CEL, 0xEA9F09D4L, 0x29B07CD6L, 0x31A4B2AFL, 0x2A3F2331L, 0xC6A59430L, 0x35A266C0L, 
         0x744EBC37L, 0xFC82CAA6L, 0xE090D0B0L, 0x33A7D815L, 0xF104984AL, 0x41ECDAF7L, 0x7FCD500EL, 0x1791F62FL, 
         0x764DD68DL, 0x43EFB04DL, 0xCCAA4D54L, 0xE49604DFL, 0x9ED1B5E3L, 0x4C6A881BL, 0xC12C1FB8L, 0x4665517FL, 
         0x9D5EEA04L, 0x018C355DL, 0xFA877473L, 0xFB0B412EL, 0xB3671D5AL, 0x92DBD252L, 0xE9105633L, 0x6DD64713L, 
         0x9AD7618CL, 0x37A10C7AL, 0x59F8148EL, 0xEB133C89L, 0xCEA927EEL, 0xB761C935L, 0xE11CE5EDL, 0x7A47B13CL, 
         0x9CD2DF59L, 0x55F2733FL, 0x1814CE79L, 0x73C737BFL, 0x53F7CDEAL, 0x5FFDAA5BL, 0xDF3D6F14L, 0x7844DB86L, 
         0xCAAFF381L, 0xB968C43EL, 0x3824342CL, 0xC2A3405FL, 0x161DC372L, 0xBCE2250CL, 0x283C498BL, 0xFF0D9541L, 
         0x39A80171L, 0x080CB3DEL, 0xD8B4E49CL, 0x6456C190L, 0x7BCB8461L, 0xD532B670L, 0x486C5C74L, 0xD0B85742L]


def T0(x):
    return tbox[x]
    
def IT0(x):
    return itbox[x]

def T1(x):
    return main_lib.Bit_Rotr(T0(x), 32, 8)

def IT1(x):
    return main_lib.Bit_Rotr(IT0(x), 32, 8)

def T2(x):
    return main_lib.Bit_Rotr(T0(x), 32, 16)

def IT2(x):
    return main_lib.Bit_Rotr(IT0(x), 32, 16)

def T3(x):
    return main_lib.Bit_Rotr(T0(x), 32, 24)

def IT3(x):
    return main_lib.Bit_Rotr(IT0(x), 32, 24)

def C(x):
    if x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6:
        return [0, 1, 2, 3]
    elif x == 7:
        return [0, 1, 2, 4]
    elif x == 8:
        return [0, 1, 3, 4]
    
def SubWord(x):
    y = main_lib.Number_2_Bytes(x, 4)
    for i in range(0,len(y)):
        y[i] = sbox[int(y[i])]
    z = main_lib.Bytes_2_Number(y)
    return z

def ISubWord(x):
    y = main_lib.Number_2_Bytes(x, 4)
    for i in range(0,len(y)):
        y[i] = isbox[int(y[i])]
    z = main_lib.Bytes_2_Number(y)
    return z

def SubBytes(x):
    y = []
    for i in x:
        y.append(sbox[i])
    return y

def ISubBytes(x):
    y = []
    for i in x:
        y.append(isbox[i])
    return y

def Rcon(i):
    return main_lib.GF_Pot(2L, (i-1)) << 24

def ShiftRows(s, nb):
    for i in range(0, len(s)):
        s[i] = main_lib.Number_2_Bytes(s[i], 4)
        s[i].reverse()
    c = C(nb)
    l = []
    for i in range(0, nb):
        l.append([])
        for j in range(0, 4):
            l[i].append(s[(i+c[j]) % nb][j])
    for i in range(0, len(l)):
        l[i].reverse()
        l[i] = main_lib.Bytes_2_Number(l[i])
    return l

def IShiftRows(s, nb):
    for i in range(0, len(s)):
        s[i] = main_lib.Number_2_Bytes(s[i], 4)
        s[i].reverse()
    c = C(nb)
    l = []
    for i in range(0, nb):
        l.append([])
        for j in range(0, 4):
            l[i].append(s[(i+(nb-c[j])) % nb][j])
    for i in range(0, len(l)):
        l[i].reverse()
        l[i] = main_lib.Bytes_2_Number(l[i])
    return l

def IMixColumn(x):
    p = [[0x0e, 0x0b, 0x0d, 0x09], [0x09, 0x0e, 0x0b, 0x0d], [0x0d, 0x09, 0x0e, 0x0b], [0x0b, 0x0d, 0x09, 0x0e]] 
    y = []
    for i in range(0, len(x)):
        yy = main_lib.Number_2_Bytes(x[i], 4)
        yy.reverse()
        y.append(yy)
    z = []
    for i in range(0, len(y)):
        zz = []
        for j in range(0,4):
            l = 0
            for k in range(0, 4):
                l = l ^ (main_lib.GF_Mult(y[i][k], p[j][k]))
            zz.append(l)
        zz.reverse()
        z.append(zz)
    for i in range(0, len(z)):
        z[i] = main_lib.Bytes_2_Number(z[i])
    return z

