#!/usr/bin/env python
#
import sys
import os
import os.path
import string
import time

def ti():
    """ return local iso time string """
    return time.strftime('%a %b %d %X %Z %Y:', time.localtime(time.time()))
    
class NS:
    """ Class to handle  """
    def __init__(self, ns, path, basedir):
        """ Constructor """
        self.__path = self.CheckPath(str(path))
        self.__basedir = basedir
        self.__ns = ns
        self.__zones = ''
        self.__reload = '#!/bin/sh\n\n'

    def CheckPath(self, path):
        if path[-1] == '/':
            return path
        else:
            return path + '/'
        
    def CheckDirectory(self):
        """ Check if directory still exists, else create directory """
        if not os.path.exists(self.__path + self.__agentIdent):
            os.mkdir(self.__path + self.__agentIdent)
        if not os.path.exists(self.__path + self.__agentIdent + '/' + self.__ns):
            os.mkdir(self.__path + self.__agentIdent + '/' + self.__ns)
        if not os.path.exists(self.__path + self.__agentIdent + '/' + self.__ns + '/' + 'pri'):
            os.mkdir(self.__path + self.__agentIdent + '/' + self.__ns + '/' + 'pri')
        if not os.path.exists(self.__path + self.__agentIdent + '/' + self.__ns + '/' + 'sec'):
            os.mkdir(self.__path + self.__agentIdent + '/' + self.__ns + '/' + 'sec')

    def SetIdent(self, value1, value2):
        """ Make an agent identity """
        self.__value1 = value1
        self.__value2 = value2
        agent = value1 + '-' + value2
        self.__agentIdent = 'agent-' + string.lower(string.replace(agent, ' ', '-'))
        if self.__agentIdent[-1] == '-':
            self.__agentIdent = self.__agentIdent[:-1]

    def GetIdent(self):
        if self.__agentIdent:
            return self.__agentIdent
        else:
            return None
    
    def DeleteZoneFile(self, zone):
        """ delete zone file from directory"""
        if os.path.isfile(self.__path + '/%s/%s/pri/%s' % (self.__agentIdent, self.__ns, zone)):
            os.system('rm %s/%s/%s/pri/%s' % (self.__path, self.__agentIdent, self.__ns, zone))
        
    def CreateNamedConf(self, listenon=[], forwarders=[]):
        """ Crate default header for named.conf """
        self.__listenon = listenon
        self.__forwarders = forwarders
        self.CheckDirectory()
        self.__header = ';\n;%s : Generated by dmerce\n;\n' % ti() + \
                        'options {\n' + \
                        '\t\tdirectory "%s%s/%s";\n' % (self.__basedir, self.__agentIdent, self.__ns) + \
                        '\t\tpid-file "named.pid";\n'  + \
                        '\t\tlisten-on {\n\t\t\t'
        for j in range(len(listenon)):         
            """ Put all listenon ip's into file """
            self.__header = self.__header + listenon[j] +';\n'
            if j < len(listenon)-1:
                self.__header = self.__header + '\t\t\t'
        self.__header =  self.__header + '\t\t};\n'
        if len(forwarders) > 0:
            self.__header = self.__header + '\t\tforwarders {\n\t\t\t'
            for i in range(len(forwarders)):
                """ Put all forward ip's into file """
                self.__header = self.__header + forwarders[i]['Forwarder'] + ';\n'
                if i < len(forwarders)-1:
                    self.__header = self.__header + '\t\t\t'
            self.__header = self.__header + '\t\t};\n'
            
        self.__header = self.__header + '\t\t//query-source port 53;\n' + \
                        '\t\t//recursion yes;\n' + \
                        '};\n\n' + \
                        'controls {\n' + \
                        '\t\tunix "/var/run/ndc.%s"\n' % self.__ns + \
                        '\t\tperm 0600\n' + \
                        '\t\towner 0\n' + \
                        '\t\tgroup 0;\n' + \
                        '};\n' + \
                        'logging { \n' +\
                        '\tchannel my_syslog {\n' + \
                        '\t\tsyslog daemon;\n' + \
                        '\t\tseverity info;\n' + \
                        '\t};\n' + \
                        '\tchannel my_file {\n' + \
                        '\t\tfile "%s.log";\n' % self.__ns + \
                        '\t\tseverity dynamic;\n' + \
                        '\t};\n' + \
                        '\tcategory default { my_syslog; };\n' + \
                        '\tcategory statistics { my_syslog; my_file; };\n' + \
                        '\tcategory queries { my_file; };\n' + \
                        '\tcategory default { my_syslog; };\n' + \
                        '\tcategory panic { my_syslog; };\n' + \
                        '\tcategory packet { my_file; };\n' + \
                        '\tcategory eventlib { my_file; };\n' + \
                        '\tcategory lame-servers { null; };\n' + \
                        '};\n\n'
        self.__header = self.__header + 'zone "." {\n' + \
                        '\t\ttype hint;\n' + \
                        '\t\tfile "%snamed.root";\n' % self.__basedir + \
                        '};\n\n' + \
                        'zone "%slocalhost" {\n'  % self.__basedir + \
                        '\t\ttype master;\n' + \
                        '\t\tfile "%slocalhost";\n' % self.__basedir + \
                        '};\n\n' + \
                        'zone "%s127.in-addr.arpa" {\n' % self.__basedir + \
                        '\t\ttype master;\n' + \
                        '\t\tfile "%s127.in-addr.arpa";\n'  % self.__basedir + \
                        '};\n\n'
    def AddMasterConf(self):
        self.__header = self.__header + 'include "%s%s/%s/named.conf.master";\n' %(self.__basedir,
                                                                                   self.__agentIdent,
                                                                                   self.__ns)
    def AddSlaveConf(self):
        self.__header = self.__header + 'include "%s%s/%s/named.conf.slave";\n' %(self.__basedir,
                                                                                   self.__agentIdent,
                                                                                   self.__ns)
    def WriteNamedConf(self):
        if string.strip(self.__header) != '':
            f = open(self.__path + '/%s/%s/named.conf' % (self.__agentIdent, self.__ns), 'w')
            f.write(self.__header)

    def AddZone(self, zone='', type = None, masters = ''):
        """ Add zone """
        if type == 'master':
            self.__zones = self.__zones + 'zone "%s" {\n' %zone + \
                          '\ttype %s;\n' % type + \
                          '\tfile "%s%s/%s/pri/%s";\n' %(self.__basedir, self.__agentIdent,self.__ns, zone) + \
                          '};\n\n'
        if type == 'slave':
            self.__zones = self.__zones + 'zone "%s" {\n' %zone + \
                          '\ttype %s;\n' % type + \
                          '\tfile "%s%s/%s/sec/%s";\n' %(self.__basedir, self.__agentIdent, self.__ns, zone) + \
                          '\tmasters {%s; };\n' % masters + \
                          '};\n\n'

    def AddZoneToReloadScript(self, zone):
        self.__reload = self.__reload + '/usr/local/sbin/ndc -c /var/run/ndc.%s reload %s\n' % (self.__ns, zone)

    def ReturnZone(self):
        return self.__zones

    def CreateConfigFile(self, type = None):
        """ Create config file with recent value """
        self.CheckDirectory()
        if type == 'pri' and self.__zones != '':
            f = open(self.__path + '%s/%s/named.conf.master' % (self.__agentIdent, self.__ns), 'w')
            f.write(self.__zones)
        if type == 'sec' and self.__zones != '':
            f = open(self.__path + '%s/%s/named.conf.slave' % (self.__agentIdent, self.__ns), 'w')
            f.write(self.__zones)

    def Write(self, zone, value):
        """ Write zone file """
        self.__value = value
        self.CheckDirectory()
        if value and value != '':
            f = open(self.__path + '/%s/%s/pri/%s' %(self.__agentIdent, self.__ns, zone), 'w')
            f.write(value)
            f.close()
            
    def WriteReloadScript(self):
        """ Write ndc reload script """
        f = open(self.__path + '/%s/%s/pri/ncc-ndc-reload.sh' %(self.__agentIdent, self.__ns), 'w')
        f.write(self.__reload)
        f.close()
