<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- $Id: doc.xml,v 1.81 2004/04/15 11:57:45 rb Exp $ -->
<document>
	
	<section>
		<title>Copyrights</title>
		<content>
			<h3>1[wan]Ci</h3> - <a target="_new" href="http://www.1ci.com">http://www.1ci.com</a>
			<p>
			1[wan]Ci als Bildmarke und <dmerce/> als Wort- und Bildmarke sind eingetragene Warenzeichen der
			1[wan]Ci Gesellschaft für interaktive Kommunikations- und Informationsmedien mbH, Münster - Germany.
			</p>
			<h3>IBM</h3> - <a target="_new" href="http://www.ibm.com">http://www.ibm.com</a>
			<p>
			<br/>
			Siehe <a target="_new" href="http://www.ibm.com/legal/de">http://www.ibm.com/legal/de</a>
			und <a target="_new" href="http://www.ibm.com/legal/copytrade.shtml">http://www.ibm.com/legal/copytrade.shtml</a>
			</p>
			<h3>Microsoft</h3> - <a target="_new" href="http://www.microsoft.com">http://www.microsoft.com</a>
			<p>
			Microsoft, Windows, Windows 2000, MSN, The Microsoft Network und andere Namen von MSP- und/oder
			Microsoft-Produkten, auf die hier Bezug genommen wird, sind Marken oder eingetragene Marken von MSP
			und/oder Microsoft.
			<br/>
			Siehe <a target="_new" href="http://www.microsoft.com/germany/siteservices/impressum/copyright.htm">http://www.microsoft.com/germany/siteservices/impressum/copyright.htm</a>
			</p>
			<h3>Oracle</h3> - <a target="_new" href="http://www.oracle.com">http://www.oracle.com</a>
			<p>
			</p>
			<h3>Sun Microsystems</h3> - <a target="_new" href="http://www.sun.com">http://www.sun.com</a>
			<p>
			Sun, Sun Microsystems, das Sun Logo, iForce, Java, Netra, Solaris, Sun Fire, Sun Ray, SunSpectrum,
			Sun StorEdge, SunTone, The Network is the Computer, alle Marken und Logos, die Sun, Solaris oder
			Java enthalten, und bestimmte andere Marken und Logos auf dieser Website sind Marken oder eingetragene
			Marken von Sun Microsystems, Inc. in den USA und anderen Ländern.
			</p>
			<p>
			Alle SPARC-Marken werden unter Lizenz verwendet und sind Marken bzw. eingetragene Marken von SPARC
			International, Inc. in den USA und anderen Ländern. Produkte, die SPARC-Marken tragen, basieren
			auf einer von Sun Microsystems, Inc. entwickelten Architektur.
			</p>
			<h3>XAMPP</h3> - <a target="_new" href="http://www.apachefriends.de">http://www.apachefriends.de</a>
			<p>
			Vielen Dank an dieser Stelle für die hervorragende Arbeit an Kai Seidler und Kay Vogelgesang von
			Apache Friends.
			</p>
			<h3>X/Open</h3>
			<p>
			UNIX ist in den USA und anderen Ländern eine eingetragene Marke für die X/Open Company, Ltd.
			die ausschließliche Lizenz erteilt. 
			</p>
			<br/>
			<p>Alle anderen hier erwähnten Produkt- und Firmennamen sind Marken der jeweiligen Eigentümer.
			</p>
 		</content>
	</section>
	
	<section>
		<title>Installation und Inbetriebnahme</title>
		<content>
			<p>
			Die <dmerce/>-Entwicklungsumgebung wird als ZIP-Datei ausgeliefert und beinhaltet neben den 
			benötigten <dmerce/>-Client-Komponenten auch ein eigenes JDK (
			<a target="_new" href="http://java.sun.com">http://java.sun.com</a>), einen Java Application Server
			(Jboss, <a target="_new" href="http://www.jboss.org">http://www.jboss.org</a>) und das
			Java-Make-Tool Ant (<a target="_new" href="http://ant.apache.org">http://ant.apache.org</a>).
			Da in diesem Archiv alle benötigten Ressourcen enthalten sind, besteht die Installation lediglich darin
			die ZIP-Datei in einem beliebigen Verzeichnis zu entpacken. Durch diese Architektur treten keinerlei
			Konflikte mit bereits installierten Komponenten auf.
			</p>
			<p>
			Standardmäßig wird <dmerce/> ohne ein Datenbanksystem ausgeliefert.
			</p>
		</content>
		<section>
			<title>Schnellinstallation</title>
			<content>
				<h3>Kurze und schnelle Installationsanleitung</h3>
				<p>
				Vorhaben:
				<ul>
					<li>Gundlegende Installation von <dmerce/></li>
					<li>Konfiguration des SQL Webservices</li>
					<li>Anlegen einer <dmerce/>-Applikation <c>meintest</c></li>
				</ul>
				</p>
				<p>
				<h2>UNIX</h2>
				</p>
				<p>
				Annahmen:
				<ul>
					<li>Das Verzeichnis für <dmerce/> ist <c>/dmerce</c> und hat genügend freien Speicherplatz</li>
					<li><c>unzip</c> steht zur Verfügung</li>
					<li>Optional: Sie haben root-Rechte, um einen Benutzer anzulegen. Ansonsten können Sie die
						ersten sechs Schritte als root überspringen</li>
				</ul>
				</p>
				<p>
				<code annotation="Beispiel unter Sun Solaris">
					
root # groupadd dmerce
root # useradd -g dmerce -d /dmerce -s /usr/bin/ksh dmerce
root # mkdir /dmerce
root # chown dmerce:dmerce /dmerce
root # chmod 0770 /dmerce
root # su - dmerce

dmerce:/dmerce $ unzip dmerce-solsparc64.zip
dmerce:/dmerce $ export DMERCE_BASE=$PWD
dmerce:/dmerce $ . etc/dmercerc
dmerce:/dmerce $ chmod ug+x bin/*
dmerce:/dmerce $ setup
dmerce:/dmerce $ startdmerce

dmerce:/dmerce $ vi etc/applications.xml

				</code>
				<p>
				Prüfen Sie die Einstellungen für die Applikation "meintest" in der <c>etc/applications.xml</c>:<br/>
				<br/>
				<span style="font-family: courier;">
				&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br/>
				&lt;project basedir="." name="dmerce Application Properties"&gt;<br/>
				<br/>
					...<br/>
					<br/>
					&lt;!--<br/>
						<br/>
						Meine Testapplikation<br/>
						<br/>
					--&gt;<br/>
					<br/>
					&lt;!-- Webservice endpoint --&gt;<br/>
					&lt;property name="<b>meintest</b>.endpointaddress"<br/>
						value="http://localhost:8080/<b>meintestws</b>/sqlservice"/&gt;<br/>
					
					&lt;!-- Directory for file uploads --&gt;<br/>
					&lt;property name="<b>meintest</b>.fileupload.path" value="/dmerce/files/<b>meintest</b>"/&gt;<br/>
					&lt;property name="<b>meintest</b>.fileupload.columnsuffix.originalfile"<br/>
						value="_original"/&gt;<br/>
					&lt;property name="<b>meintest</b>.fileupload.columnsuffix.serverfile"<br/>
						value="_server"/&gt;<br/>
					<br/>
					&lt;!-- Database connection for webservice: Oracle --&gt;<br/>
					&lt;property name="<b>meintest</b>.jdbc.driver" value="oracle.jdbc.OracleDriver"/&gt;<br/>
					&lt;property name="<b>meintest</b>.jdbc.url"<br/>
						value="jdbc:oracle:thin:dmerce/dmerce@localhost:1521:dmerce"/&gt;<br/>
					&lt;property name="<b>meintest</b>.jdbc.username" value="dmerce"/&gt;<br/>
					&lt;property name="<b>meintest</b>.jdbc.password" value="dmerce"/&gt;<br/>
					<br/>
					&lt;!--<br/>
						<br/>
						Default settings<br/>
						<br/>
					--&gt;<br/>
					<br/>
					...<br/>
					<br/>
				&lt;/project&gt;<br/>
				</span>
				</p>
				<code annotation="Beispiel unter Sun Solaris">

dmerce:/dmerce $ create meintest

				</code>
				</p>
				<p>
				<h2>Windows</h2>
				</p>
				<p>
				Annahmen:
				<ul>
					<li>Das Verzeichnis für <dmerce/> ist <c>c:\dmerce</c> und hat genügend freien Speicherplatz</li>
					<li><c>unzip</c> steht zur Verfügung</li>
				</ul>
				</p>
				<p>
				<code annotation="Microsoft Windows">
C:\>mkdir dmerce
C:\>cd dmerce
C:\dmerce>unzip dmerce-winia32.zip
C:\dmerce>set DMERCE_BASE=c:\dmerce
C:\dmerce>setup
C:\dmerce>startdmerce
C:\dmerce>create meintest
				</code>
				</p>
			</content>
		</section>
		<section>
			<title>Verzeichnisstruktur von dmerce</title>
			<content>
				<p>
				Nach dem Entpacken der Datei liegt eine Verzeichnisstruktur wie in der
				nachfolgenden Abbildung vor:<br/>
				<ul>
					<li>applications: Ihre Applikationen</li>
					<li>bin: Ausführbare Kommandos</li>
					<li>etc: Konfigurationsdateien und Vorlagen</li>
					<li>product: Software, auch 3rd-Party</li>
					<li>sql: SQL Skripte</li>
				</ul>
				</p>
				<h3>applications</h3>
				<p>
				Hier liegen alle <dmerce/>-Projekte. Nach der Installation sind einige Projektverzeichnisse
				bereits enthalten. Z.B. die Anwendungen simple, multiple usw.
				</p>
				<h3>Struktur der Projekt-Vezeichnisse unter applications</h3>
				<p>
				Jedes Projektverzeichnis unterhalb des Verzeichnisses <c>applications</c> hat die folgende Struktur:
				<ul>
					<li>etc: Konfiguration, forms.xml und workflows.xml</li>
					<li>lib: Eigens von den Java-Sourcen unter <c>src</c> benötigte Libraries</li>
					<li>src: Java-Sourcen</li>
					<li>sql: Eigene SQL Skripte</li>
					<li>web: HTML-, JSP-Dateien sowie Grafiken</li>
				</ul>
				</p>
				<p>
				Im Verzeichnis <c>lib</c> können JAR-Archive abgelegt werden die von den JSPs
				oder von den eigenen Klassen benötigt werden und nicht bereits in <dmerce/>
				enthalten sind. (Ob eine JAR in <dmerce/> enthalten ist oder nicht, kann leicht
				im Verzeichnis <c>product/dmerce/sys/lib</c> nachgeschaut werden.
				</p>
				<p>
				<hint><strong>Achtung</strong>: In das Verzeichnis <c>lib</c> bitte keine <dmerce/>-relevanten
				JARs ablegen, da diese schon im Systemverzeichnis enthalten sind. Es ist bei einem einfachen
				Web-Projekt nichts ungewöhnliches, dass das lib-Verzeichnis leer bleibt</hint>.
				</p>
				<p>
				Im Verzeichnis <c>src</c> können eigene Java-Klassen als Quelltext abgelegt werden. 
				Sie werden beim Build-Prozess automatisch mitkompiliert und in das WAR-Archiv 
				eingebunden. Es dürfen dabei auch Packages angelegt werden. Eine Klasse <c>TestClass</c>
				aus dem Package <c>com.wanci.beispiel.</c> müsste entsprechend im Verzeichnis 
				<c>src/com/wanci/dmerce/beispiel</c> abgelegt werden.
				</p>
				<p>
				Ein zentraler Aspekt bei der Entwicklung von <dmerce/>-Anwendungen ist die
				Definition von Formularen und Geschäftsbläufen. Diese werden zentral durch
				XML-Konfigurationsdateien im Verzeichnis <c>etc</c> definiert.
				Diese Konfigurationsdateien werden in den nachfolgenden Kapiteln noch näher beschrieben.
				</p>
				<p>
				Das Verzeichnis <c>web</c> enthält später Ihre HTML- und JSP-Dateien sowie Grafiken.
				<hint>Die einzige Ausnahme stellen die Dateien error.jsp und errorstyle.css, die zur Anzeigen 
				von Fehlern dienen, sowie die Datei <c>init.jsp</c>, die Initialisierungsparameter für jede JSP
				enthält.</hint>
				In diesem Verzeichnis soll später die JSP-basierte Anwendung vom Entwickler angelegt und bearbeitet
				werden, so dass hier die gesamte Verzeichnisstruktur des Web-Projektes verfügbar ist.
				</p>
				<h3>backup</h3>
				<p>
				Enthält Backups, die von <dmerce/> automatisch erstellt werden (z.B. beim Deployment von Applikationen)
				oder die Sie selbst erzeugt haben. Bei jedem Backup wird hier ein Verzeichnis in der Form
				JJJJMMDD-HHMM angelegt. Hintergrund ist, dass Backups einer Applikation die einen bestimmten
				Namen trägt, nicht überschrieben werden und eine Art "Versioning" Ihrer Arbeit erreicht wird.
				Sie haben so die Möglichkeit auf einen Entwicklungsstand zuzugreifen, der Beispielsweise
				eine halbe Stunden zurückliegt. Da dieses Verzeichnis belieibg viele Backups enthalten kann
				empfiehlt es sich, hier von Zeit zu Zeit aufzuräumen.
				</p>
				<h3>bin</h3>
				<p>
				Im Verzeichnis <c>bin</c> liegen diverse Skripte zur Steuerung von <dmerce/>. Dies sind Skripte
				die verschiedene Aktionen in der Entwicklungsumgebung anstoßen und sollten nicht
				editiert werden. Ausnahme: set.bat. Die Funktion der einzelnen Skripte werden im nächsten Kapitel
				näher beschrieben.<br/>
				</p>
				<h3>etc</h3>
				<p>
				Enthält Konfigurationsdateien und Vorlagen, die vom Entwickler benötigt werden:<br/>
				<br/>
				<ul>
					<li>applicationproperties.xml: Konfiguration Ihrer Applikationen</li>
					<li>systemproperties.xml: Einstellungen für <dmerce/></li>
				</ul>
				</p>
				<h3>install</h3>
				<p>
				Hier werden Dateien abgelegt die zur Installation oder Update benötigt werden. Die Dokumentation
				weist Sie darauf hin, wenn die Nutzung dieses Verzeichnisses notwendig ist.
				</p>
				<h3>product</h3>
				<p>
				In diesem Verzeichnis befinden sich die meisten 3rd-Party-Komponenten, die von <dmerce/> 
				verwendet werden. Nach der Installation fehlt hier lediglich die Datenbank, falls Sie sich nicht
				bereits das Software-Paket von <c>xampp</c> heruntergeladen und in dieses Verzeichnis enpackt
				haben.
				</p>
				<p>
				Nach der Installation sind folgende Unterverzeichnisse darin enthalten:
				<ul>
					<li>ant: Apache Ant, Java Make Tool</li>
					<li>dmerce: <dmerce/> Systemkomponenten und JAR-Dateien</li>
					<li>j2sdk: Sun Java 2 SDK</li>
					<li>jboss: Jboss, Java Application Server</li>
					<li>xampp: XAMPP, optional</li>
				</ul>
				</p>
				<h3>Systemverzeichnis product/dmerce/sys</h3>
				<p>
				Im Systemverzeichnis befinden sich alle <dmerce/>-relevanten Komponenten. Der Benutzer von
				<dmerce/> muss dieses Verzeichnis ignorieren. Veränderungen können zu Fehlfunktionen führen.
				</p>
				<h3>product/dmerce/sys/etc</h3>
				<p>
				Enthält Buildfiles für Ant und Vorlagen für <dmerce/>.
				</p>
				<h3>product/dmerce/sys/images</h3>
				<p>
				Hier liegen Bilder die von <dmerce/> verwendet werden.
				</p>
				<h3>product/dmerce/sys/sql</h3>
				<p>
				In diesem Verzeichnis befinden sich Skripte für Datenbanken.
				</p>
			</content>
		</section>
		<section>
			<title>Grundlagen</title>
			<content>
				<h3>Grundlagen</h3>
				<p>
				DMERCE_BASE ist der Bezeichner für das Verzeichnis indem Sie <dmerce/> installiert haben. Beispiel:
				C:\dmerce. Im Folgenden wird überall dieser Bezeichner verwendet, wo das Installationsverzeichnis
				von <dmerce/> gemeint ist. Bitte verwenden Sie dort den entsprechenden Pfad auf Ihrem System.
				</p>
				<p>
				Die Distribution von <dmerce/> ist ca. 100 MB gross. Für den laufenden Betrieb empfehlen wird ein 
				Kontingent von ca. 500 MB bis 1 GB an Plattenplatz.
				</p>
				<p>
				<h2>Windows</h2>
				<dmerce/> ist auf Windows 2000 oder höher ausgelegt.
				</p>
				<p>
				<h2>UNIX</h2>
				<dmerce/> läuft auf allen UNIX-Systemen die Java ab Version 1.4 unterstützen:<br/>
				<ul>
					<li>Sun Solaris ab Version 7</li>
					<li>Linux ab Kernel 2.2</li>
					<li>FreeBSD ab Version 4, noch nicht zertifiziert</li>
					<li>NetBSD ab Version 1.5, noch nicht zertifiziert</li>
					<li>OpenBSD ab Version 3.0, noch nicht zertifiziert</li>
					<li>IBM AIX ab Version 5, noch nicht zertifiziert</li>
					<li>HP/UX, noch nicht zertifiziert</li>
					<li>SCO OpenServer und UnixWare, noch nicht zertifiziert</li>
				</ul>
				</p>
				<p>
				Wir empfehlen den Einsatz der Korn Shell "ksh" oder Bourne Again Shell "bash".
				</p>
				<p>
				Empfehlungen:
				<br/>
				<ul>
					<li>Sun Microsystems: ab UltraSPARC-II mit 450 MHz, 1024 MB RAM</li>
					<li>Intel: ab Pentium III 700 MHz, 512 MB RAM</li>
				</ul>
				</p>
			</content>
		</section>
		<section>
			<title>Setup unter UNIX</title>
			<content>
				<p>
				Legen Sie einen Benutzer, eine Gruppe, ein Homeverzeichnis für <dmerce/> an und setzen
				Sie Passwort und die Rechte entsprechend:
				</p>
				<p>
				<code annotation="Anlegen eines Benutzers auf der Shell">
root # groupadd dmerce
root # useradd -d /dmerce -g dmerce -s /bin/ksh dmerce
root # passwd dmerce
root # mkdir /dmerce
root # chown dmerce:dmerce /dmerce
root # chmod 0770 /dmerce
				</code>
				</p>
				<p>
				Loggen Sie sich als Benutzer <dmerce/> ein, indem Sie entweder eine neue Session (per
				Telnet, SSH oder X11) aufmachen oder als root die Identität von <dmerce/> annehmen:
				</p>
				<p>
				<code annotation="Einloggen als dmerce">
root # su - dmerce
dmerce:/dmerce $
				</code>
				</p>
				<p>
				Entpacken Sie <dmerce/>:
				</p>
				<p>
				<code annotation="Beispiel: Entpacken der Distribution">
dmerce:/dmerce $ unzip dmerce-distrib.zip
Archive:  dmerce-distrib.zip
   creating: bin/
  inflating: bin/clean
  inflating: bin/create
  inflating: bin/createdistrib
  inflating: bin/deploy
  inflating: bin/reconfigure
  inflating: bin/set
  inflating: bin/setup
  inflating: bin/startapache
  inflating: bin/startdmerce
  inflating: bin/starteclipse

	...

				</code>
				</p>
				<p>
				Nachdem Sie <dmerce/> entpackt haben müssen Sie die erste Konfiguration von <dmerce/> vornehmen.
				Sie können mittels der Properties "start." können Sie beeinflussen, welche Komponenten gestartet
				werden:
				<ul>
					<li><c>start.apache</c> startet den Webserver Apache</li>
					<li><c>start.filezilla</c> startet den FTP Server FileZilla (Windows)</li>
					<li><c>start.mysql</c> startet den OpenSource Datenbankserver MySQL</li>
					<li><c>start.postgresql</c> startet den OpenSource Datenbankserver PostgreSQL</li>
					<li><c>start.oracle</c> startet den Datenbankserver Oracle</li>
					<li><c>start.eclipse</c> startet die Entwicklungsumgebung Eclipse</li>
				</ul>
				</p>
				<p>
				<code annotation="Prüfen Sie die Einstellungen in etc/system.xml">
&lt;project basedir="." name="dmerce System Properties"&gt;
	
	&lt;!--
		
		 dmerce(R)
		 
	--&gt;

	&lt;!-- License key --&gt;
	&lt;property name="license.key" value="0123456789ABCDEFGH"/&gt;

	&lt;!--

		Start/stop of system components
		Used in Ant target "reconfigure-settings"

	--&gt;

	&lt;property name="start.apache" value="NO"/&gt;
	&lt;property name="start.filezilla" value="NO"/&gt;
	&lt;property name="start.mysql" value="NO"/&gt;
	&lt;property name="start.postgresql" value="NO"/&gt;
	&lt;property name="start.oracle" value="NO"/&gt;
	&lt;property name="start.eclipse" value="NO"/&gt;
	&lt;property name="start.browser.phpmyadmin" value="NO"/&gt;
	&lt;property name="start.browser.dmercedoc" value="NO"/&gt;

	&lt;!-- Internal settings --&gt;
	&lt;property name="dmerce.base" value="${env.DMERCE_BASE}"/&gt;
	&lt;property name="jboss.wait.seconds" value="1"/&gt;

	&lt;!-- Oracle specific settings --&gt;
	&lt;property name="oracle.sid" value="dmerce"/&gt;
	&lt;property name="oracle.base" value="/oracle"/&gt;
	&lt;property name="oracle.home" value="9.2"/&gt;

&lt;/project&gt;
				</code>
				</p>
				<p>
				Führen Sie nun das Skript setup aus:
				</p>
				<p>
				<code annotation="Durchführen des Setup">
dmerce:/dmerce $ export DMERCE_BASE=/dmerce
dmerce:/dmerce $ . etc/dmercerc
dmerce:/dmerce $ setup
				</code>
				</p>
			</content>
		</section>
		<section>
			<title>Setup unter Windows</title>
			<content>
				<p>
				Je nach Anforderung legen Sie sich einen Benutzer für <dmerce/> an. Für die Installation auf
				einer Workstation empfehlen wir die Installation unter Ihrem aktuellen Benutzer durchzuführen.
				</p>
				<p>
				Entpacken Sie <dmerce/> in dem Verzeichnis das Sie für <dmerce/> vorgesehen haben. Empfohlen
				wird \dmerce in einem Laufwerk Ihrer Wahl. Hierfür können Sie den Explorer oder die Kommandozeile
				verwenden:
				</p>
				<p>
				<code annotation="Entpacken der Distribution unter Windows">
C:\>mkdir dmerce
C:\>cd dmerce
C:\dmerce>unzip ..\dmerce-distrib.zip
Archive:  dmerce-distrib.zip
   creating: bin/
  inflating: bin/clean.bat    
  inflating: bin/create.bat   
  inflating: bin/createdistrib.bat  
  inflating: bin/createoracle.bat  
  inflating: bin/deploy.bat   
  inflating: bin/loadexampleapp.bat  
  inflating: bin/reconfigure.bat  
  inflating: bin/set.bat      
  inflating: bin/setup.bat    
  inflating: bin/startapache.bat  
  inflating: bin/startdmerce.bat  
  inflating: bin/starteclipse.bat  
  inflating: bin/startfilezilla.bat  
  inflating: bin/startjboss.bat  
  inflating: bin/startmysql.bat  
  inflating: bin/startoracle.bat  
  inflating: bin/stopdmerce.bat  
  inflating: bin/stopfilezilla.bat  
  inflating: bin/stopmysql.bat  
  inflating: bin/stoporacle.bat  
  inflating: bin/undeploy.bat  
  inflating: bin/whois.bat    

	...

				</code>
				</p>
				<p>
				Nachdem Sie <dmerce/> entpackt haben müssen Sie die erste Konfiguration von <dmerce/> vornehmen.
				Editieren Sie die Datei <c>etc/system.xml</c> und stellen Sie sicher, dass der Pfad in der
				Property dmerce.base (unter "Internal settings") der Pfad ist, wo Sie dmerce installiert haben.
				</p>
				<p>
				<code annotation="Prüfen Sie die Einstellungen in system.xml">
&lt;project basedir="." name="dmerce System Properties"&gt;
	
	&lt;!--
		
		 dmerce(R)
		 
	--&gt;

	&lt;!-- License key --&gt;
	&lt;property name="license.key" value="0123456789ABCDEFGH"/&gt;

	&lt;!--

		Start/stop of system components
		Used in Ant target "reconfigure-settings"

	--&gt;

	&lt;property name="start.apache" value="NO"/&gt;
	&lt;property name="start.filezilla" value="NO"/&gt;
	&lt;property name="start.mysql" value="NO"/&gt;
	&lt;property name="start.postgresql" value="NO"/&gt;
	&lt;property name="start.oracle" value="NO"/&gt;
	&lt;property name="start.eclipse" value="NO"/&gt;
	&lt;property name="start.browser.phpmyadmin" value="NO"/&gt;
	&lt;property name="start.browser.dmercedoc" value="NO"/&gt;

	&lt;!-- Internal settings --&gt;
	&lt;property name="dmerce.base" value="${env.DMERCE_BASE}"/&gt;
	&lt;property name="jboss.wait.seconds" value="1"/&gt;

	&lt;!-- Oracle specific settings --&gt;
	&lt;property name="oracle.sid" value="dmerce"/&gt;
	&lt;property name="oracle.base" value="c:/oracle"/&gt;
	&lt;property name="oracle.home" value="9.2"/&gt;

&lt;/project&gt;
				</code>
				</p>
				<p>
				Führen Sie nun aus dem Verzeichnis <c>bin</c> das Skript setup aus.
				</p>
				<p>
				<code annotation="Durchführen des Setup">
C:\dmerce>cd bin
C:\dmerce>set DMERCE_BASE=c:\dmerce
C:\dmerce\bin>setup
				</code>
				</p>
			</content>
		</section>
		<section>
			<title>XAMPP</title>
			<content>
				<p>
				Für einen besonders leichten Einstieg in <dmerce/> empfehlen wir Ihnen das Software-Paket XAMPP 
				herunterzuladen (<a target="_new" href="http://www.apachefriends.de">http://www.apachefriends.de</a>),
				dass von <dmerce/> unterstützt wird. Sie finden unter der URL
				<a target="_new" href="http://www.apachefriends.org/xampp.html">http://www.apachefriends.org/xampp.html</a>
				alle Versionen von XAMPP in einer Übersicht.
				</p>
				<p>
				Direkte Links:
				<ul>
					<li>Solaris: <a target="_new" href="http://www.apachefriends.org/xampp-solaris.html">http://www.apachefriends.org/xampp-solaris.html</a></li>
					<li>Linux: <a target="_new" href="http://www.apachefriends.org/xampp-linux.html">http://www.apachefriends.org/xampp-linux.html</a></li>
					<li>Windows: <a target="_new" href="http://www.apachefriends.org/xampp-windows.html">http://www.apachefriends.org/xampp-windows.html</a></li>
				</ul>
				</p>
				<h3>Integration in dmerce</h3>
				<p>
				Mittels des Skriptes <c>installxampp.bat</c> wird XAMPP automatisch installiert und das
				Setup wird gestartet:
				<code annotation="Installation von XAMPP unter UNIX">
dmerce:/dmerce $ installxampp
				</code>
				<code annotation="Installation von XAMPP unter Windows">
C:\dmerce\bin>installxampp
				</code>
				</p>
				<h3>Standalone Installation</h3>
				<p>
				Für eine eigenständige Installation von XAMPP gehen Sie bitte nach der Dokumentation auf der
				Webseite von XAMPP vor (siehe Links oben). Bitte beachten Sie das <dmerce/> nur dann in der
				Lage ist die Komponenten von XAMPP automatisch für Sie zu starten, wenn XAMPP in dem Verzeichnis
				<c>product/xampp</c> installiert wurde.
				</p>
			</content>
		</section>
		<section>
			<title>Die Befehlszeile</title>
			<content>
				<p>
				Dieser Abschnitt beschreibt alle <dmerce/>-Kommandos die auf der Befehlszeile ausgeführt werden
				können.
				</p>
			</content>
			<section>
				<title>Auf allen Plattformen zur Verfügung stehende Befehle</title>
				<content>
					<p>
					Inhalte des <c>bin</c>-Verzeichnis in der <dmerce/>-Distribution:
					</p>
					<table>
					<tr>
						<th class="deco"><b>Name</b></th>
						<th class="deco"><b>Beschreibung</b></th>
						<th class="deco"><b>Parameter</b></th>
					</tr>
					<tr>
						<td class="deco">clean</td>
						<td class="deco">Säubert das Dateisystem von temporären Dateien wie z.B. Resourcen, die
							für die Erzeugung von Applikationen	verwendet werden. Bitte nur ausführen wenn
								<dmerce/> nicht läuft.</td>
						<td class="deco"><ul><li>dmerce: Es werden <dmerce/>-spezifische temporäre Dateien
							gelöscht</li><li>jboss: Es werden
							JBoss-spezifische temporäre Dateien gelöscht</li></ul></td>
					</tr>
					<tr>
						<td class="deco">create <appname/></td>
						<td class="deco">Erzeugt eine neue Applikation im Ordner applications</td>
						<td class="deco"><ul><li><appname/>: Name der Applikation die erzeugt werden
							soll</li></ul></td>
					</tr>
					<tr>
						<td class="deco">createdistrib</td>
						<td class="deco">Es wird eine Distribution  auf Basis der vorhanden Installation
							erzeugt.</td>
						<td class="deco"><ul><li>clean: Die Applikationen werden nicht
							berücksichtigt</li></ul></td>
					</tr>
					<tr>
						<td class="deco">createoracle</td>
						<td class="deco">Legt eine Oracle Datenbank und Instanz names "dmerce" an.</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">deploy <appname/></td>
						<td class="deco">Stößt den Deployment-Prozess an. An Stelle von <appname/> muss der Name
							des Projektverzeichnisses unterhalb des Verzeichnisses <c>applications</c> angegeben
							werden.<br/>Beispiel: <c>deploy simple</c></td>
						<td class="deco"><ul><li><appname/>: Name der Beispiel-Applikation, die deployed werden
							soll</li></ul></td>
					</tr>
					<tr>
						<td class="deco">loadexampleapps</td>
						<td class="deco">Lädt eine Beispielapplikation: nebem dem Deployment werden notwendige SQL
							 Skripte ausgeführt</td>
						<td class="deco"><ul><li><appname/>: Name der Beispiel-Applikation, die geladen werden
							soll.</li></ul></td>
					</tr>
					<tr>
						<td class="deco">reconfigure</td>
						<td class="deco">Übernimmt die Konfiguration von Applikationen, der Webservices und
							<dmerce/> selbst. Die in der applicationproperties.xml
							getätigten Einstellungen werden dem einer Applikation </td>
						<td class="deco"><ul><li>keine: Konfiguriert die <dmerce/>-Installation</li>
							<li><appname/>: Konfiguriert eine Applikation</li></ul></td>
					</tr>
					<tr>
						<td class="deco">setup</td>
						<td class="deco">Führt das Setup von <dmerce/> aus: es werden Pfade in der set.bat
							gesetzt</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">startapache</td>
						<td class="deco">Startet die XAMPP-Komponente Apache (Web-Server, siehe 
							<a target="_new" href="http://www.apache.org">http://www.apache.org</a>),
							sofern diese installiert wurde</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">startdmerce</td>
						<td class="deco">Diese Batch-Datei dient dazu den integrierten JBoss-Server
						zu starten. Bei Aufruf dieses Skriptes öffnet sich ein Konsolenfenster, in dem die
						Ausgaben des Servers angezeigt werden. Der Start des Jboss-Servers kann je nach
						Rechnerausstattung durchaus mehrere Minuten dauern. Man erkennt den Abschluss des
						Bootvorganges daran, dass in der Konsole eine Meldung <c>"JBoss [...] started in
							XXXs:XXXms"</c> erscheint.</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">starteclipse</td>
						<td class="deco">Diese Batch-Datei startet die Java-Entwicklungsumgebung <c>eclipse</c>.
							Voraussetzung ist, dass sie innerhalb des Pfades product/eclipse installiert wurde.
							Siehe <a target="_new" href="http://www.eclipse.org">http://www.eclipse.org</a></td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">startjboss</td>
						<td class="deco">Startet die <dmerce/>-Komponente Jboss (Java Application Server, siehe 
							<a target="_new" href="http://www.jboss.org">http://www.jboss.org</a>)</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">startmysql</td>
						<td class="deco">Startet die XAMPP-Komponente MySQL (SQL-Server, siehe 
							<a target="_new" href="http://www.mysql.com">http://www.mysql.com</a>),
							sofern diese installiert wurde</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">startoracle</td>
						<td class="deco">Startet die <dmerce/>-Komponente <Oracle/> (SQL-Server, siehe 
							<a target="_new" href="http://www.oracle.com">http://www.oracle.com</a>)</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">stopdmerce</td>
						<td class="deco">Stoppt alle <dmerce/>-Komponenten, die automatisch beendet werden
							können</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">stopmysql</td>
						<td class="deco">Stoppt die XAMPP-Komponente MySQL (SQL-Server, siehe 
							<a target="_new" href="http://www.mysql.com">http://www.mysql.com</a>)</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">stoporacle</td>
						<td class="deco">Stoppt die <dmerce/>-Komponente <Oracle/> (SQL-Server, siehe 
							<a target="_new" href="http://www.oracle.com">http://www.oracle.com</a>)</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">undeploy</td>
						<td class="deco">Entfernt eine Applikation aus dem Application Server. Das Webarchive
							wird unter dem Pfad backup/JJJJMMDD-HHMM gespeichert.</td>
						<td class="deco"><ul><li><appname/>: Name der Beispiel-Applikation</li></ul></td>
					</tr>
					<tr>
						<td class="deco">whois</td>
						<td class="deco">Ruft den <dmerce/>-eigenen Whois-Client auf</td>
						<td class="deco"><ul><li>domain.tld: Name der Domain, die im Whois nachgeschaut werden
							soll</li></ul></td>
					</tr>
					</table>
				</content>
			</section>
			<section>
				<title>UNIX&amp;reg;</title>
				<content>
					<p>
					Inhalte des <c>bin</c>-Verzeichnis in der Windows-Distribution:
					</p>
					<table>
					<tr>
						<th class="deco"><b>Name</b></th>
						<th class="deco"><b>Beschreibung</b></th>
						<th class="deco"><b>Parameter</b></th>
					</tr>
					</table>
				</content>
			</section>
			<section>
				<title>Microsoft&amp;reg; Windows&amp;reg;</title>
				<content>
					<p>
					Inhalte des <c>bin</c>-Verzeichnis in der Windows-Distribution:
					</p>
					<table>
					<tr>
						<th class="deco"><b>Name</b></th>
						<th class="deco"><b>Beschreibung</b></th>
						<th class="deco"><b>Parameter</b></th>
					</tr>
					<tr>
					<td class="deco">startfilezilla</td>
						<td class="deco">Startet die XAMPP-Komponente FileZilla (FTP-Server, siehe 
							<a target="_new" href="http://filezilla.sf.net">http://filezilla.sf.net</a>)</td>
						<td class="deco">keine</td>
					</tr>
					<tr>
						<td class="deco">stopfilezilla</td>
						<td class="deco">Stoppt die XAMPP-Komponente FileZilla (FTP-Server, siehe 
							<a target="_new" href="http://filezilla.sf.net">http://filezilla.sf.net</a>)</td>
						<td class="deco">keine</td>
					</tr>
					</table>
				</content>
			</section>
		</section>
	</section>

	<section>
		<title>Konfiguration</title>
		<content>
		Dieses Kapitel beschreibt die Konfiguration <dmerce/>.
		</content>
		<section>
			<title>Konfigurationsdateien</title>
			<content>
			<p>
			Die folgenden Dateien sind für die Konfiguration von <dmerce/> verantwortlich:
			<ul>
				<li>etc/system.xml beinhaltet Systemeinstellungen</li>
				<li>etc/applications.xml beinhaltet Einstellungen für die Applikationen</li>
			</ul>
			</p>
			</content>
		</section>
		<section>
			<title>Wie konfiguriere ich eine Applikation?</title>
			<content>
				<p>
				Sie konfigurieren eine Applikation indem Sie Einträge in der Datei <c>etc/applications.xml</c>
				erzeugen. Kopieren Sie hierzu den Block unter "Default settings" und ändern Sie den Bezeichner
				"dmerce" in den Namen Ihrer Applikation ab. Legen Sie die URL für den Webservice Ihrer Applikation
				fest, wählen Sie einen Pfad und die Suffixe für die Feldnamen für den Upload von Dateien und
				geben Sie eine gültige Datenbankverbindung an (JDBC-Treiber, -URL, -Username, -Password).
				</p>				
				<p>
				Damit die Einstellungen übernommen werden, muss nach der Konfiguration die Applikation mittels
				<deploy/> neu deployed werden und der entsprechende Webservice per <reconfigure/> mit den neuen
				Informationen versorgt werden.
				</p>
				<code annotation="Konfiguration der Applikation meintest">

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project basedir=".." name="dmerce Application Properties"&gt;

	...	
	
	&lt;!--
		
		Meine Testapplikation
		
	--&gt;
	
	&lt;!-- Webservice endpoint --&gt;
	&lt;property name="meintest.endpointaddress"
		value="http://localhost:8080/meintestws/sqlservice"/&gt;
	
	&lt;!-- Directory for file uploads --&gt;
	&lt;property name="meintest.fileupload.path" value="/dmerce/files"/&gt;
	&lt;property name="meintest.fileupload.columnsuffix.originalfile"
		value="_original"/&gt;
	&lt;property name="meintest.fileupload.columnsuffix.serverfile"
		value="_server"/&gt;

	&lt;!-- Database connection for webservice: Oracle --&gt;
	&lt;property name="meintest.jdbc.driver" value="oracle.jdbc.OracleDriver"/&gt;
	&lt;property name="meintest.jdbc.url"
		value="jdbc:oracle:thin:dmerce/dmerce@localhost:1521:dmerce"/&gt;
	&lt;property name="meintest.jdbc.username" value="dmerce"/&gt;
	&lt;property name="meintest.jdbc.password" value="dmerce"/&gt;
	
	&lt;!--
		
		Default settings
		
	--&gt;
	
	...
	
&lt;/project&gt;

				</code>
			</content>
		</section>
		<section>
			<title>Wie lege ich eine Applikation an?</title>
			<content>
				<p>
				Eine Applikation wird mittels des Befehls <c>create</c> angelegt. Sofern die
				Applikation bereits in <c>etc/applications.xml</c> eine eigene Konfiguration erhalten hat,
				wird neben den entsprechenden Verzeichnissen unter <c>applications/</c> auch ein eigener
				Webservice angelegt.
				</p>
				<p>
				<code annotation="Anlegen einer neuen Applikation unter Windows">
C:\dmerce\bin>create meintest
				</code>
				</p>
			</content>
		</section>
	</section>


	<section>
		<title>Backup/Restore</title>
		<content>
		</content>
		<section>
			<title>Wie erstelle ich ein Backup?</title>
			<content>
			</content>
		</section>
		<section>
			<title>Restore: Wie lese ich ein Backup zurück?</title>
			<content>
			</content>
		</section>
	</section>


	<section>
		<title>Einführung in die zentralen Konzepte von dmerce</title>
		<content>
			<p> Webanwendungen haben in den letzten Jahren zunehmend den Platz klassischer Anwendungen eingenommen. 
				Dies hat sicherlich auch seine Berechtigung. Denn Webanwendungen sind global verfügbar und stellen 
				niedrige Anforderungen an die Ausstattung des Clients. Hinzu kommt, dass Webanwendungen in der Regel im 
				Hinblick auf verteilte Strukturen, Verfügbarkeit schneller entwickelt werden können als klassische 
				Anwendungen. Die Popularität von Webanwendungen hat dazu geführt, dass sich eine Reihe von Technologien 
				etabliert hat, die die Entwicklung von dynamischen Webseiten unterstützen. Zu den beliebtesten 
				Repräsentanten dieser Technologien zählen sicherlich PHP (Homepage PreProcessor), Java Server Pages 
				(JSP) und Active Server Pages (ASP). </p>
			<p>Mit der Technologie alleine ist es jedoch nicht getan. Denn mit der neuen Generation von Anwendungen 
				sind auch neue Probleme entstanden, die nun von den Entwicklern berücksichtigt werden müssen. Zu den 
				wohl schwierigsten Problemen bei der Entwicklung von Webanwendungen gehört wohl der Umgang mit der 
				Steuerung von Seitenabfolgen. Anwendungslogik kann nun nicht mehr wie bisher ereignisorientiert (z.B. 
				bei Klick auf ein Button) ausgeführt werden, sondern wird an den Fluss der Webseiten gebunden und 
				findet in Interaktion mit einem Webserver statt. Als Konsequenz dieser Umstellung enthalten dynamische 
				Webseiten heute oftmals in großem Umfang Code, der z.B. Datenbankabfragen ausführt, Formulare auswertet 
				oder den Kontrollfluss zu anderen Seiten steuert. Seitengestaltung und Anwendungslogik werden hier bunt 
				vermischt und erinnern an das Spaghetti-Code-Zeitalter mit der GOTO-Mentalität. Gerade bei Termindruck 
				wirkt sich eine solche Vorgehensweise negativ in der Wartbarkeit aus und erhöht die Fehleranfälligkeit 
				der Software. Die Entwicklung von Webanwendungen erfordert also vom Entwickler wesentlich mehr, als 
				nur die entsprechende Technologie einzusetzen. Mit dmerce wird dem Entwickler ein Hilfsmittel an die 
				Hand gegeben, das ihn bei der komfortablen Entwicklung sauberer Software-Architekturen unterstützt. </p>
			<p> dmerce richtet sich an Entwicklungsteams, die komplexe Webanwendungen in kürzester Zeit entwickeln 
				wollen, ohne dabei Qualitätseinbußen des Produktes in Kauf nehmen zu müssen. Einen Großteil der 
				üblichen Implementierungsarbeit wird von dmerce abgenommen, indem einfach handhabbare, vorgefertigte 
				Mechanismen genutzt werden. Es werden daher nur wenige bzw. kaum Programmierkenntnisse benötigt, um 
				eine typische Webanwendung zu entwickeln. </p>
			<p> Dieses Einführungskapitel beschreibt die Hauptfunktionen von dmerce, ohne zu sehr ins Details zu gehen. 
				Sie erhalten einen ersten Eindruck davon, wie <dmerce/> Ihnen eine Menge Arbeit bei der Entwicklung von 
				Webanwendungen abnehmen kann. </p>
		</content>
		
		<section>
			<title>Aufbau von dmerce</title>
			<content>
				<p> dmerce besteht aus dem dmerce-Server, der die Kernfunktionalitäten des Systems über Webservices 
					zur Verfügung stellt und dem dmerce-Client, der in Webanwendungen eingebettet wird und die 
					Kommunikation mit dem dmerce-Server übernimmt. <dmerce/> macht sowohl auf der Server- als auch auf 
					der Client-Seite intensiven Gebrauch von ausgreiften J2EE-Technologien. </p>
				<p>
					<img src="dmerce-architektur.jpg" name="dmerce_architektur">Die dmerce-Architektur</img>
				</p>
				<h2>dmerce-Server</h2>
				<p> Der dmerce-Server besteht aus dem dmerce-Kern und einer Webservice-Schnittstelle als Andockpunkt 
					für den dmerce-Client. Der Kern übernimmt transparent für den dmerce-Client sämtliche 
					Datenbankzugriffe, das Transaktionshandling und andere systemnahe Dienste und stellt sie über die 
					Webservice-Schnittstelle zur Verfügung. So existiert beispielsweise ein Webservice, über den 
					Datenbank-Zugriffe durchgeführt werden können ohne nähere Kenntnis über die eingesetzte Datenbank 
					oder den Umgang mit JDBC-Treibern besitzen zu müssen. Für die Kommunikation zwischen dem 
					dmerce-Server und dem dmerce-Client wird das für Webservices gängige Protokoll SOAP eingesetzt, so 
					dass sich auch externe Clients mit dem dmerce-Server verbinden könnten. Zur nahtlosen Integration 
					der Webservices in die Java-Umgebung werden JAX-RPC und JAXB eingesetzt. </p>
				<h2>dmerce-Client</h2>
				<p> Der dmerce-Client greift über Webservice-Schnittstellen auf die Dienste des dmerce-Kerns zu und 
					fungiert für die Webanwendung als Proxy, so dass sich für den Entwickler der Zugriff auf die 
					Webservices nicht von der Nutzung eines lokalen Dienstes unterscheidet. Der dmerce-Client stellt 
					außerdem die Entwicklungsumgebung für Webanwendungen zur Verfügung. Dazu wird er mit umfangreichen 
					Taglibs ausgeliefert, die bei typischen Web-Projekten den direkten Kontakt mit Java-Code 
					weitestgehend reduzieren. Diese Taglibs arbeiten direkt auf den Webservice-Proxys im dmerce-Client 
					oder bieten lokale Dienste (z.B. finanzmathematische Berechnungen) an. </p>
			</content>
		</section>
		
		<section>
			<title>Das Workflow-Konzept</title>
			<content>
				<p> Workflows bilden in dmerce 3 ein zentrales Konzept und stellen einen ganzheitlichen Ansatz zur 
					Abbildung von Geschäftsabläufen dar. Bei der Entwicklung von dmerce 3 wurde insbesondere ein 
					Augenmerk darauf gelegt, dass Webanwendungen häufig aus einer komplexen Abfolge von Seiten 
					bestehen. Oftmals muss die Seitenabfolge in Abhängigkeit von bestimmten Benutzereingaben verzweigen 
					oder es müssen zwischen der Anzeige zweier Seiten umfangreiche Aktionen (z.B. Datenbankzugriffe) im 
					Hintergrund ausgeführt werden. Anstatt die Seitenabfolge wie bisher in den dynamischen Webseiten 
					selbst zu steuern, kann sie in dmerce 3 schlichtweg durch eine formale Beschreibung in einer 
					XML-Datei abgebildet werden. </p>
				<p> Ein Workflow in einer Webanwendung besteht in der Regel aus einer Menge von dynamisch generierten 
					Seiten, zwischen denen in Abhängigkeit von Benutzereingaben gewechselt wird. Es kann flexibel 
					festgelegt werden, bei welchen Bedingungen zu welcher Seite gewechselt werden soll. Optional kann 
					auch eine beliebige Aktion (z.B. das Schreiben von Formulardaten in die Datenbank) während eines 
					Seitenübergangs ausgeführt werden. Durch das Workflow-Konzept kann auf diese Weise jede gängige 
					Webanwendung durch eine einfache Beschreibung im XML-Format abgebildet werden. </p>
				
				<h2>Die Workflow-Engine</h2>
				<p>Die Workflow-Engine von <dmerce/> besteht aus den nachfolgenden beschriebenen Komponenten: 
					(com.wanci.dmerce.workflow im src/core)</p>
				<p> Der <b><c>WorkflowBuilder</c></b> übernimmt das Einlesen der <c>workflows.xml</c> und die darauf 
					beruhende Struktur der Workflow-Definitionen. Aus der workflows.xml wird ein Workflow mit allen 
					darin enthaltenen Elementen erzeugt.</p>
				<p> Ein Workflow setzt sich aus mehreren <b><c>States</c></b> (Zuständen) zusammen, die in Webanwendung 
					schlichtweg die angezeigten Templates darstellen. Von einem Zustand in den anderen gelangt man über 
					<b><c>Transitions</c></b> (Zustandsübergänge). Jeder Zustand hält dazu Transitionen zu anderen 
					Zuständen.</p>
				<p> Eine Transition besitzt genau eine <b><c>Condition</c></b> (Bedingung) und genau eine 
					<b><c>Action</c></b> (Aktion). Wird ein Zustandübergang angefordert (z.B. weil ein Link angeklickt 
					worden ist), durchläuft der aktuelle Zustand die Liste seiner Transitionen und prüft nacheinander, 
					ob die Bedingung einer Transition erfüllt ist. Sobald die Bedingung einer Transition erfüllt ist, 
					wird sie gefeuert. "Feuern" bedeutet soviel wie das Betreten dieses Übergangs zum nächsten Zustand. 
					Jede Transition besitzt weiterhin genau eine Action. In der Action kann beliebiger Code ausgeführt 
					werden, bevor zum Zielzustand gewechselt wird. Die Transition führt stets zu einem Zielzustand, 
					d.h. es gibt keine Transition, die ins Nichts führt. Sowohl Conditions als auch Actions können 
					selbst definiert werden, indem man Subklassen von den allgemeinen Klassen ableitet und die 
					abstrakten Methoden implementiert.</p>
				<p> Ein sehr typischer Zustandsübergang ist wohl der einfache Übergang von einer Seite zur nächsten, 
					ohne dass besondere Aktionen ausgeführt werden. Dazu kann eine Transition verwendet werden, die 
					eine Bedingung enthält, die stets erfüllt ist (com.wanci.dmerce.workflow.AlwaysTrueCondition), eine 
					Aktion besitzt, die nichts ausführt (com.wanci.dmerce.workflow.DoNothingAction), und als 
					Zielzustand auf die nächste Seite verweist.</p>
				<p> Soll am Ende einer Folge von Formularseiten ein Eintrag in der Datenbank erfolgen, kann in der 
					Transition zwischen dem vorletzten und letzten Zustand eine entsprechende Aktion ausgeführt 
					werden.</p>
				<p> Der Zugriff auf Daten aus den Formularen erfolgt über einen sogenannten 
					<b><c>WorkflowContext</c></b>, der - in Anlehnung an die Session-Variablen im Servlet-Container - 
					Key/Value-Paare zu einem Workflow speichern kann. Über diesen Kontext können sowohl Conditions als 
					auch Actions auf Daten zugreifen, Berechnungen durchführen, aber auch Daten zurückschreiben, damit 
					sie in folgenden Arbeitsschritten zur Verfügung stehen.</p>
				<p> Endpoints sind Endzustände in einem Workflow. Daraus ergibt sich, dass ein Endpoint automatisch 
					dadurch charakterisiert ist, dass ein Zustand keine Transitionen zu anderen Zuständen besitzt. 
					Endpoints werden in Zukunft daher nicht mehr besonders gekennzeichnet.</p>
			</content>
		</section>	
		
	</section>




	<section>
		<title>Erste Schritte</title>
		<content>
			<p> In diesem Kapitel werden Sie anwendungsorientiert an die Verwendung von <dmerce/> herangeführt. Dazu 
				werden nach und nach typische Anwendungsszenarien vorgestellt, die zunehmend komplexer werden. Die 
				Beispielanwendungen werden mit der Distribution mitgeliefert und sind bereits auf dem JBoss-Server 
				installiert. (Für Interessierte: Die deployten <c>.war</c>-Dateien liegen in der Distribution im 
				Verzeichnis <c>product/jboss/server/default/deploy</c>). Den Quellcode zu den Beispielen finden Sie im 
				Verzeichnis <c>applications</c>.</p>
			<p> Folgende Beispielanwendungen werden mitgeliefert: </p>
			<table>
				<tr>
					<td class="deco">Simple</td>
					<td class="deco">Eine sehr einfache Anwendung mit einem Formular und einer Datenbank-Abfrage.</td>
				</tr>
<!--
				<tr>
					<td class="deco">Multiple</td>
					<td class="deco">Eine einfache Anwendung mit einem mehrseitigen Formular und einer 
						Datenbank-Abfrage. Verschiedene Darstellungsformen von Abfrageergebnissen.</td>
				</tr>
				<tr>
					<td class="deco">Date</td>
					<td class="deco">Arbeit mit Datumsfeldern in der Datenbank</td>
				</tr>
				<tr>
					<td class="deco">Callproc</td>
					<td class="deco">Aufruf von Stored Procedures</td>
				</tr>
-->
			</table>
		</content>
		
		<section>
			<title>Beispielanwendung "Simple"</title>
			<content>
				<p> Diese Beispielanwendung dient als erster Einstieg in die Möglichkeiten von <dmerce/>. Hier werden 
					Sie einige wichtige Grundkonzepte von <dmerce/> kennenlernen und für ein sehr einfaches, aber für 
					Webanwendungen typisches Anwendungszenario einsetzen.</p>
				<h2>Das Szenario</h2>
				<p> Es existiert eine Datenbanktabelle die Informationen zu Kunden enthält. Die Datenbanktabelle hat 
					folgende Struktur (MySql):</p>
				<code annotation="SQL-Code zur Erzeugung der Tabellenstruktur">CREATE TABLE vkunde (
  kundennr int(11) unsigned NOT NULL auto_increment,
  name varchar(255) NOT NULL default '0',
  vorname varchar(255) NOT NULL default '0',
  email varchar(255) NOT NULL default '0',
  ort varchar(50) default '0',
  strasse varchar(255) default '0',
  plz varchar(5) default '0',
  telefon varchar(50) default '0',
  PRIMARY KEY  (kundennr)
)</code>
				<p> Eine Webseite soll den Inhalt dieser Datenbanktabelle in Form einer HTML-Tabelle ausgeben. Jeder 
					Kunden-Datensatz wird durch eine Zeile in der HTML-Tabelle dargestellt und kann durch Betätigung 
					eines "Bearbeiten"-Links auf einem Formular verändert werden. Über das gleiche Formular - wenn auch 
					über einen anderen Link - können neue Datensätze eingefügt werden. Ebenso in jeder Zeile ein Link 
					zum Löschen eines Datensatzes.</p>
				<h2>Schritt für Schritt...</h2>
				<p> Wir werden die Anwendung nun schrittweise in folgenden Etappen aufbauen: <ul> <li>Vorbereitung der 
					Datenbank</li> <li>Erstellung der Webseite zur Darstellung des Tabelleninhaltes</li> <li>Erstellung 
					des Formulars zum Einfügen von neuen Datensätzen</li> <li>Erweiterung des Formulars zum Bearbeiten 
					von vorhandenen Datensätzen</li> <li>Erstellung des Links zum Löschen von Datensätzen</li> </ul> 
				</p>
				<h3>Vorbereitungen</h3>
				<p> Damit Sie das Beispiel am Quellcode nachvollziehen können, sollten Sie sich am Besten den Inhalt 
					des Verzeichnisses <c>applications/simple</c> anschauen. Dort liegt der Quelltext des Projektes mit dem Namen
					"simple". Um dieses Projekt auf dem JBoss-Server aufzuspielen (deployen), müssen Sie zunächst noch
					einige vorbereitende Schritte durchführen.</p>

				<p> Falls Sie jedoch vorhaben sollten, das Beispiel auf einer anderen Datenbank als einer 
					MySQL-Datenbank laufen zu lassen, müssen Sie die oben im Szenario aufgeführte Datenbankstruktur auf 
					die von Ihnen eingesetzte Datenbank anpassen.</p>
				<h3>Darstellung des Tabelleninhaltes</h3>
				<p> Um den Inhalt der Tabelle vkunde anzuzeigen, muss nach wie vor eine SQL-Abfrage durchgeführt 
					werden. Diese resultiert in einer Ergebnismenge die auf einer dynamisch generierten HTML-Seite in 
					Form einer Tabelle dargestellt werden soll.</p>
				<p> Dazu betrachten wir zunächst die Datei <c>list.jsp</c>. Der Quelltext dieser Datei sieht so aus:</p>
				<code annotation="list.jsp">&lt;%@ include file="init.jsp" %&gt;
&lt;%@ include file="header.jsp" %&gt;

&lt;h1&gt;Einfache SQL-Abfrage&lt;/h1&gt;

&lt;qsql:prepare id="query1"&gt;
   SELECT * FROM vkunde ORDER BY kundennr
&lt;/qsql:prepare&gt;

&lt;table cellpadding=2 cellspacing=3 border=1&gt;
&lt;qsql:execute id="query1"&gt;
    &lt;tr&gt;&lt;td colspan="10"&gt;&lt;qsql:rowcount/&gt; Einträge gefunden&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
    	&lt;th&gt;&amp;nbsp;&lt;/th&gt;
        &lt;th&gt;Kunden-Nr.&lt;/th&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;th&gt;Vorname&lt;/th&gt;
        &lt;th&gt;Email&lt;/th&gt;
        &lt;th&gt;Straße&lt;/th&gt;
        &lt;th&gt;PLZ&lt;/th&gt;
        &lt;th&gt;Ort&lt;/th&gt;
        &lt;th&gt;&amp;nbsp;&lt;/th&gt;
        &lt;th&gt;&amp;nbsp;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;qsql:row&gt;
	    &lt;tr&gt;
	    	&lt;td&gt;&lt;qsql:number/&gt;&lt;/td&gt;
			&lt;td&gt;&lt;qsql:field name="kundennr"/&gt;&lt;/td&gt;
	    	&lt;td&gt;&lt;qsql:field name="name"/&gt;&lt;/td&gt;
			&lt;td&gt;&lt;qsql:field name="vorname"/&gt;&lt;/td&gt;
			&lt;td&gt;&lt;qsql:field name="email"/&gt;&lt;/td&gt;
			&lt;td&gt;&lt;qsql:field name="strasse"/&gt;&lt;/td&gt;
			&lt;td&gt;&lt;qsql:field name="plz"/&gt;&lt;/td&gt;
			&lt;td&gt;&lt;qsql:field name="ort"/&gt;&lt;/td&gt;
			&lt;td&gt;&lt;qsql:delete table="vkunde" key="kundennr" template="list.jsp"&gt;
				[ del ]
			&lt;/qsql:delete&gt;&lt;/td&gt;
			&lt;td&gt;&lt;qsql:edit workflow="register" key="kundennr"&gt;
				[ edit ]
			&lt;/qsql:edit&gt;&lt;/td&gt; 
	    &lt;/tr&gt;
    &lt;/qsql:row&gt;
&lt;/qsql:execute&gt;
&lt;/table&gt;
&lt;br&gt;&lt;br&gt;
&lt;a href="workflow.do?qWorkflow=register"&gt;[ Neuer Eintrag ]&lt;/a&gt;

&lt;%@ include file="footer.jsp" %&gt;</code>
				<p> Vielleicht haben Sie bereits erkannt, dass die Datei <c>list.jsp</c> wie eine JSP (Java Server 
					Page) aussieht. <dmerce/> baut in der Tat vollständig auf der JSP-Technologie auf, so dass Sie - 
					falls Sie mit dieser Technologie vetraut sind - theoretisch sämtliche Features von JSPs einsetzen 
					können. In der Praxis werden Sie aber viel seltener selber Hand anlegen müssen um JSP-Code zu 
					schreiben, da <dmerce/> Ihnen bereits eine ganze Menge Arbeit abnimmt.</p>
				<p> Die <c>list.jsp</c> beginnt mit einer JSP-include-Direktive "<c>&lt;%@ include ... &gt;</c>". Diese 
					dient lediglich dazu eine andere JSP-Datei einzubinden. In der eingebundenen JSP-Datei 
					<c>init.jsp</c> befinden sich einige Zeilen, die dazu notwendig sind die <dmerce/>-spezifischen 
					Biliotheken zu laden. Es ist daher ratsam die dortigen Zeilen zusammen mit der Datei 
					<c>init.jsp</c> in Ihren eigenen Projekten ebenfalls einzubinden. Die <c>header.jsp</c> enthält 
					lediglich HTML-Code der auf jeder Seite unserer kleinen Anwendung wiederholt wird und daher einmal 
					ausgelagert worden ist. </p>
				<p> Im <c>&lt;prepare&gt;</c>-Tag wird die SQL-Anweisung festgelegt. In unserem Fall sollen einfach 
					alle Datensätze aus der Tabelle <c>vkunde</c> ausgelesen werden. Die SQL-Anweisung wird jedoch noch 
					nicht an dieser Stelle ausgeführt, sondern lediglich unter der ID "query1" abgelegt. Erst wenn 
					<dmerce/> auf das <c>&lt;execute&gt;</c>-Tag stößt, wird die SQL-Abfrage "query1" tatsächlich 
					ausgeführt. Der Inhalt des <c>&lt;execute&gt;</c>-Tags wird ausgegeben.</p>
				<p> Alles was innerhalb des <c>&lt;row&gt;</c>-Tags steht wird so oft ausgegeben, wie Datensätze in 
					der Ergebnismenge vorhanden sind. Es ist in unserem Beispiel daher sinnvoll im 
					<c>&lt;row&gt;</c>-Tag HTML-Tabellenzeilen (<c>&lt;tr&gt;</c>) zu verwenden. In der ersten Spalte 
					werden mit dem <c>number</c>-Tag die Tabellenzeilen von der Zahl 1 aufsteigend durchnummeriert. 
					Danach folgen Spalten für die einzelnen Datenbankfelder <c>name</c>, <c>vorname</c>, etc.</p>
				<p> Am Ende jeder HTML-Tabellenzeile werden durch die <c>edit</c>-und <c>delete</c>-Tags Links zum 
					Editieren bzw. Löschen eines Datensatzes erzeugt. Das <c>delete</c>-Tag benötigt Informationen über 
					die Tabelle aus der der Datensatz gelöscht werden soll, den Namen des Primärschlüssels und der 
					Seite die nach dem Löschvorgang angezeigt werden soll. Das <c>edit</c>-Tag hingegen erzeugt einen 
					Link, der einen Workflow mit dem Namen "register" anstößt bei dem der Wert der Spalte "kundennr" 
					als Schlüssel an den Workflow übergeben wird. (Für nähere Informationen, bitte im Kapitel "Tags zur 
					Datenabfrage" nachschlagen.) </p>
				<p> Wundern Sie sich nicht über den merkwürdigen Link <c>&lt;a 
					href="workflow.do?qWorkflow=register"&gt;</c>. Dieser Link führt auf ein Formular zur Erzeugung 
					neuer Datensätze. Dies wird weiter unten näher beschrieben.</p>
					
				<h3>Erstes Deployment</h3>
				<p> Wenn alle oben genannten Arbeitsschritte getätigt sind, kann die gesamte Anwendung kompiliert und 
					als Paket auf den Server geschoben werden. Diesen Vorgang nennt man "Deployment". Rufen Sie auf der 
					Kommandozeile die Batch-Datei <c>deploy.bat</c> mit dem Namen der Anwendung auf. (Also 
					<c>deploy.bat simple</c>) Es öffnet sich ein Fenster in dem der Fortschritt der Kompilierung 
					angezeigt wird. Nach erfolgreichem Kompilieren schließt sich ein Fenster und auch das JBoss-Fenster 
					fängt an aktiv Log-Ausgaben zu erzeugen. Wenn schließlich eine Meldung "... deployed" erscheint, 
					ist die Anwendung fertig deployed und kann aufgerufen werden.</p>
				<p> Die oben beschriebene Datei <c>list.jsp</c> können Sie direkt im Browser aufrufen, indem Sie die 
					Adresse <c>http://localhost:8080/simple/list.jsp</c> aufrufen.</p>
				
				<h3>Ein Formular für einen neuen Datensatz</h3>
				<p> Um einen neuen Datensatz einzufügen benötigen Sie in Webanwendungen für gewöhnlich Formulare. Bei 
					dynamischen Webanwendungen müssen Sie die Rückgabewerte solcher Formulare prüfen und einzeln in die 
					Datenbank schreiben. Bei <dmerce/> wird dieses Vorgehen erheblich vereinfacht indem man das 
					Formular und SQL-INSERT in dafür vorgesehenen Konfigurationsdateien beschreibt anstatt sie zu 
					progammieren. Ein solches Vorgehen nennt man "deklarative" Programmierung.</p>
				<p>
					Zunächst wird in der Datei <c>etc/forms.xml</c> aus dem Projektverzeichnis das Formular für den neuen
					Datensatz abstrakt beschrieben.
				</p>
				<code annotation="Formulardefinition in der forms.xml">
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;forms xmlns="http://www.1ci.de"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.1ci.de ../../../etc/FORMS.xsd"&gt;

	&lt;form id="form1"&gt;
		&lt;name&gt;registerform&lt;/name&gt;
		&lt;description&gt;Formular zum registrieren&lt;/description&gt;
		&lt;formversion&gt;0.1&lt;/formversion&gt;
		&lt;field name="name" required="true"&gt;
			&lt;description&gt;Name&lt;/description&gt;
			&lt;type&gt;string&lt;/type&gt;
		&lt;/field&gt;
		&lt;field name="vorname" required="true"&gt;
			&lt;description&gt;Vorname&lt;/description&gt;
			&lt;type&gt;string&lt;/type&gt;
		&lt;/field&gt;
		&lt;field name="email" required="true"&gt;
			&lt;description&gt;Email&lt;/description&gt;
			&lt;type&gt;string&lt;/type&gt;
			&lt;constraints&gt;
				&lt;constraint type="format"&gt;.+@.+\..+&lt;/constraint&gt;
			&lt;/constraints&gt;
		&lt;/field&gt;
		&lt;field name="strasse"&gt;
			&lt;description&gt;Strasse&lt;/description&gt;
			&lt;type&gt;string&lt;/type&gt;
		&lt;/field&gt;
		&lt;field name="plz"&gt;
			&lt;description&gt;PLZ&lt;/description&gt;
			&lt;type&gt;string&lt;/type&gt;
			&lt;constraints&gt;
				&lt;constraint type="format" description="xxxxx"&gt;\d{5}&lt;/constraint&gt;
			&lt;/constraints&gt;
		&lt;/field&gt;
		&lt;field name="ort"&gt;
			&lt;description&gt;Ort&lt;/description&gt;
			&lt;type&gt;string&lt;/type&gt;
		&lt;/field&gt;
	&lt;/form&gt;
	
&lt;/forms&gt;
				</code>
				<p> In der <c>forms.xml</c> wird in XML-Format definiert, aus welchen Feldern ein Formular besteht und 
					welche Inhalte eingetragen werden dürfen. Das Feld <c>email</c> erfordert beispielsweise unbedingt 
					eine Eingabe vom Benutzer und muss das unter <c>&lt;constraint type="format"&gt;</c> spezifizierte 
					Format einhalten. Wenn Sie die einzelnen Einträge genauer verstehen möchten oder gar Änderungen daran
					vornehmen möchten, schauen Sie bitte in das Kapitel "forms.xml Referenz".</p>
				<p> Das so definierte Formular ist unabhängig vom Aussehen auf einer Webseite beschrieben worden. Es 
					kann nun in Ihren JSPs eingebunden werden, wo auch das letztendliche Aussehen des Formulars mit 
					Hilfe von HTML und CSS festgelegt wird. Schauen wir uns dies einmal in der Datei 
					<c>web/form_register.jsp</c> näher an:</p>
				<code annotation="Nutzung des abstrakten Formulars in einer JSP">
&lt;%@ include file="init.jsp" %&gt;
&lt;%@ include file="header.jsp" %&gt;

&lt;h1&gt;Seite1&lt;/h1&gt;

&lt;q:message/&gt;

&lt;qform:form id="form1"&gt;
	&lt;table&gt;
		&lt;tr&gt;
			&lt;td valign="top"&gt;Name&lt;/td&gt;
			&lt;td&gt;&lt;qform:text name="name"/&gt;&lt;qform:errormessage name="name"/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td valign="top"&gt;Vorname&lt;/td&gt;
			&lt;td&gt;&lt;qform:text name="vorname"/&gt;&lt;qform:errormessage name="vorname"/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td valign="top"&gt;Email&lt;/td&gt;
			&lt;td&gt;&lt;qform:text name="email"/&gt;&lt;qform:errormessage name="email"/&gt;&lt;/td&gt;
		&lt;/tr&gt;
		&lt;tr&gt;&lt;td valign="top"&gt;Strasse&lt;/td&gt;&lt;td&gt;&lt;qform:text name="strasse"/&gt;&lt;/td&gt;&lt;/tr&gt;
		&lt;tr&gt;&lt;td valign="top"&gt;PLZ&lt;/td&gt;&lt;td&gt;&lt;qform:text name="plz"/&gt;&lt;/td&gt;&lt;/tr&gt;
		&lt;tr&gt;&lt;td valign="top"&gt;Ort&lt;/td&gt;&lt;td&gt;&lt;qform:text name="ort"/&gt;&lt;/td&gt;&lt;/tr&gt;
	&lt;/table&gt;
&lt;qform:button type="submit" text="Ok"/&gt;  &lt;qform:button type="submit" text="Cancel"/&gt;
&lt;/qform:form&gt;

&lt;%@ include file="footer.jsp" %&gt;
				</code>
				<p> Mit <c>&lt;qform:form id="form1"&gt;</c> wird ein HTML-Formular erzeugt das die abstrakte 
					Formulardefinition mit dem Namen "form1" aus der <c>forms.xml</c> verwendet. Mit <c>&lt;qform:text 
					name="..."&gt;</c> werden HTML-Textfelder erzeugt die mit dem entsprechenden Feld aus der 
					abstrakten Formulardefinition verbunden sind. Das Eingabefeld für die Email-Adresse wird daher beim 
					Abschicken des Formulars automatisch darauf geprüft werden, ob das in <c>forms.xml</c> 
					spezifizierte Format eingehalten worden ist.</p>
				<p> An Stelle der <c>&lt;qform:errormessage ...&gt;</c>-Tags werden bei fehlerhaften Eingaben die von 
					<dmerce/> erzeugten Fehlermeldungen angezeigt. Die <c>&lt;qform:button type="submit"&gt;</c>-Tags 
					erzeugen Formular-Buttons zum Abschicken des Formulars.</p>
				<p> Bitte beachten Sie, dass Sie eine so gestaltete Formularseite niemals direkt aufrufen können. Warum 
					dies so ist, erfahren Sie, wenn Sie nun weiterlesen.</p>
					
				<h3>Der passende Workflow</h3>
				<p> Das Eingabeformular dient dazu, einen neuen Datensatz in eine Datenbanktabelle einzufügen. D.h. 
					nachdem der Benutzer Eingaben auf diesem Formular gemacht hat, werden noch verschiedene Aktionen im 
					Hintergrund durchgeführt - in diesem Fall ein SQL-INSERT - und eine vorher festgelegte nächste 
					Seite wird angezeigt. In <dmerce/> müssen Sie diesen Ablauf nicht mehr in die einzelnen Webseiten 
					hineincodieren, sondern können wie bei den abstrakten Formularen die Abläufe der Anwendung in der 
					XML-Konfigurationsdatei <c>etc/workflows.xml</c> festlegen.</p>
				<code annotation="Ablaufdefinition in der workflows.xml">
&lt;workflows xmlns='http://www.1ci.de'
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:schemaLocation='http://www.1ci.de ../../../etc/WORKFLOWS.xsd'
  version="2.0"
&gt;

    &lt;workflow id="register"&gt;
    
        &lt;page
        	id="registerpage"
			template="form_register.jsp"
			formid="form1"
			editable="true"&gt;
			
            &lt;formmap table="vkunde" primarykey="kundennr"&gt;
                &lt;fieldmap formfield="name" dbfield="name"/&gt;
                &lt;fieldmap formfield="vorname" dbfield="vorname"/&gt;
                &lt;fieldmap formfield="email" dbfield="email"/&gt;
                &lt;fieldmap formfield="plz" dbfield="plz"/&gt;
                &lt;fieldmap formfield="strasse" dbfield="strasse"/&gt;
                &lt;fieldmap formfield="ort" dbfield="ort"/&gt;
            &lt;/formmap&gt;
            
            &lt;transition name="save_to_db" target="list"&gt;
            	&lt;condition type="buttonpressed" value="Ok"/&gt;
            	&lt;action type="maintain"&gt;
                    &lt;formfield formid="form1" name="name"/&gt;
                    &lt;formfield formid="form1" name="vorname"/&gt;
                    &lt;formfield formid="form1" name="email"/&gt;
                    &lt;formfield formid="form1" name="plz"/&gt;
                    &lt;formfield formid="form1" name="strasse"/&gt;
                    &lt;formfield formid="form1" name="ort"/&gt;
				&lt;/action&gt;
            &lt;/transition&gt;
            
            &lt;transition name="abort" target="list" validation="false"&gt;
            	&lt;condition type="buttonpressed" value="Cancel"/&gt;
            &lt;/transition&gt;
            
        &lt;/page&gt;
        
        &lt;page id="list" template="list.jsp"/&gt;
        
    &lt;/workflow&gt;

&lt;/workflows&gt;
				</code>
				<p> In dieser XML-Datei wurde ein Workflow mit dem Namen <c>register</c> definiert, der aus zwei Seiten 
					(<c>page</c>s) besteht, nämlich dem oben erzeugten Eingabeformular <c>form_register.jsp</c> und der 
					<c>list.jsp</c>. In der <c>page</c> "registerpage" wird angegeben, dass das altbekannte Formular 
					mit der ID "form1" auf dieser Seite verwendet wird. Der Ablauf der Anwendung wird dadurch 
					beschrieben, dass festgelegt wird, wie man von einer Seite auf eine andere gelangt. Diese 
					Seitenübergänge werden in den <c>transition</c>-Tags näher spezifziert. In unserem Beispiel besitzt 
					die Seite <c>registerpage</c> zwei Seitenübergänge zu der Seite <c>list</c>, die die 
					<c>list.jsp</c> anzeigen wird. Bei der ersten Transition <c>save_to_db</c> wird gewählt, wenn der 
					Benutzer auf den Knopf "Ok" gedrückt hat, die andere falls er auf "Cancel" gedrückt haben sollte. 
					Die <c>action</c> mit dem <c>type</c>-Attribut "maintain" sorgt dafür, dass die dort angegebenen 
					Formularfelder in der Datenbank gespeichert werden sollen. Wenn Sie die einzelnen Tags im Detail 
					verstehen möchten oder den Ablauf sogar verändern wollen, schauen Sie bitte im Kapitel 
					"workflows.xml Referenz" nach.</p>
				<p> Um den so definierten Workflow ablaufen zu lassen genügt es, den folgenden Link aufzurufen: 
					<c>http://localhost:8080/simple/workflow.do?qWorkflow=register</c>. Durch diesen Link wird der 
					Benutzer automatisch zum Workflow mit der ID "register" geführt. Falls Formulardaten beim Request 
					übermittelt wurden, werden sie automatisch korrekt verarbeitet.</p>
				<p> Mit Hilfe der deklarativen Ablaufsteuerung in der workflows.xml haben Sie ein mächtiges Werkzeug an 
					der Hand, mit dem Sie schnell Anwendungen entwickeln können.</p>
			</content>
		</section>
		
	</section>
	
	
	
	
	<section>
		<title>Wichtige Anwendungsfälle</title>
		<content>
			<p> Dieses Kapitel zeigt Ihnen die grundlegenden Konzepte auf, mit deren Hilfe Sie leistungsfähige 
				Webanwendungen erstellen. In den einzelnen Unterkapiteln erfahren Sie mehr über die Features, die in 
				<dmerce/> integriert wurden. <dmerce/> übernimmt dabei SQL-Abfragen, Formular und Workflowmanagement sowie 
				den modularen Aufbau Ihrer Website in Bausteinen (Bricks). </p>
		</content>
		<section>
			<title>SQL-Abfragen durchführen</title>
			<content>
				<p>In <dmerce/> wird die Datenbank über eigene Befehle angesteuert. Dabei müssen Sie sich nicht um 
					Verbindungsaufbau und -abbau kümmern, das ist bereits im <dmerce/>-Kern eingebaut. Sie benutzen 
					lediglich HTML-ähnliche Tags (Befehle), die Sie ausführlich erklärt im Anhang finden 
					(<dmerce/>-Referenz). Dieses Kapitel beschreibt die Abfrage anhand einiger konkreter Beispiele.</p>
	        </content>
	        <section>
	        	<title>Abfragen vorbereiten</title>
				<content>
					<p> Alle SQL-Abfragen müssen in <dmerce/> vorbereitet (engl: prepare) werden, um sie anschließend in 
						Ausführungs-Tags (<c>execute</c>) zu verwenden. Durch diesen Mechanismus wird datenbankseitiges 
						Caching möglich und damit eine schnellere Ausgabe erreicht. Sie können direkt im 
						<c>&lt;prepare&gt;</c>-Tag SQL-Ausdrücke für die Abfrage angeben.</p>
					<p> Das einfachste Beispiel: Sie möchten auf einer Seite eine Tabellenausgabe darstellen. Die Daten 
						sollen dabei aus einer Datenbanktabelle ausgelesen werden und dynamisch in HTML präsentiert 
						werden.</p>
					<code annotation="Einfaches Abfragebeispiel">
&lt;qsql:prepare id="query1"&gt;
   SELECT * FROM vkunde_view ORDER BY kundennr
&lt;/qsql:prepare&gt;
					</code>
					<p>Das Beispiel stellt eine einfache zur Abfrage einer Datenbank-View dar (selbstverständlich 
						können auf die gleiche Art und Weise Tabellen abgefragt werden). Die Abfrage wird durch das 
						qsql:prepare-Tag eingeleitet. Beachten Sie bitte, dass jede Abfrage mit einer <c>id</c> 
						versehen werden muss, damit später diese Abfragen auch tatsächlich verwendet werden können.</p>
					<!--					
					<p>Diese Abfragen lassen durch dynamische Elemente erweitern. Mit <dmerce/> können Angaben aus dem Request-String in die Abfrage übernommen werden. Nehmen wir an, Sie möchten den GET-Parameter id aus der URL für Ihre Abfrage weiterverwenden.
						Eine Beispiel URL lautet: http://www.1ci.de/dmerce/test.jsp?id=2. Im Code der dnercetest,jsp steht nun:</p>
					
					<code annotation="Durch Parameter erweitertes Beispiel">
&lt;qsql:prepare id="query1"&gt;
	select * from addresses_view 
	  where id=&lt;q:var name="id"/&gt; 
&lt;/qsql:prepare&gt;
		</code>
					<p>q:var liest den mit "name" angegebenen Parameter aus dem Request aus und gibt ihn an der gleichen Stelle aus.</p>
					
					<p>Die SQL-Abfragen lassen sich auch mit Prepared Statements beschreiben.</p>
					<code annotation="Prepared Statements">
&lt;qsql:prepare id="query1" 
	query="select * from addresses where id=? and hello=?"&gt; 
  &lt;parameter varname="id"&gt;&lt;/parameter&gt; 
  &lt;parameter type="string"&gt;&lt;q:var name="id"/&gt;&lt;/parameter&gt; 
&lt;/qsql:prepare&gt;
					</code>			
		
					<p>Auch hier werden die Parameter, die im SQL-Text durch Fragezeichen angegeben werden, durch eingebettete Parameter-Tags angegeben.</p>
		
					<p>Die empfohlene Lösung bei der Ausführung von SQL-Abfragen liegt in an anderer Stelle definierten SQL-Abfragen. Die gespeicherte Abfrage wird dann lediglich aufgerufen.
					Auch hier müssen die Parameter übergegeben werden</p>
		
				<code annotation="Beispiel mit an anderer Stelle definierten Abfragen">
&lt;qsql:prepare id="query1" sql-query-id="query1"&gt;
	  &lt;parameter varname="id"/&gt; 
	  &lt;parameter type="name"/&gt; 
&lt;/qsql:prepare&gt; 
					</code>
					<p>Die Abfragen aufzustellen und zu definieren, ist dann Aufgabe des Datenbankdesigners und nicht des <dmerce/>-Anwenders. Er bekommt lediglich die Parameterliste der zu übergebenen Parameter.</p>
					-->
			</content>	
			</section>
			<section>
				<title>Abfragen ausführen</title>
				<content>
					<p> Die Abfragen wurden mittels prepare-Tag vorbereitet und unter einer <c>id</c> abgepeichert. Nun 
						können Sie verwendet werden. Abfragen führen Sie mit dem execute-Tag aus. </p>
				<code annotation="Eecute Query Aufbau">
&lt;qsql:execute id="query1"&gt;
...
&lt;/qsql:execute&gt;
				</code>
					<p> Im Beispiel wird die Abfrage "query1" verwendet. Ein Abfrageergebnis besteht oft aus mehreren 
						Zeilen, die in einer Schleife iteriert werden. Diese Schleife müssen Sie nicht programmieren, 
						Sie müssen lediglich angeben, dass <dmerce/> dieses übernehmen soll. Das dazugehörige Tag 
						<c>row-Tag</c> wiederholt für jede Zeile die Ausgabe. </p>
<code annotation="Beispiel für das execute-Tag mit zeilenweiser Ausgabe">
&lt;qsql:execute id="query1"&gt;
    &lt;qsql:row&gt; 
        &lt;qsql:field name="name"/&gt;&lt;br/&gt;
    &lt;/qsql:row&gt;  
&lt;/qsql:execute&gt;
</code>
					<p>Die dazugehörige HTML-Ausgabe gibt also alle Werte der Ergebnisspalte "dk_name" zeilenweise 
						aus.</p>
					<p>Diese Ausgabe lässt sich durch weitere HTML Formatierung ausschmücken. Der Funktionsumfang von 
						<dmerce/> erlaubt weiterhin eine Ausgabe der Abfrageergebnis-Zeilen (rowcount), eine Ausgabe 
						von Bearbeiten- und Löschen- Knöpfen (Edit-Tag, Delete-Tag) sowie das Alternate-Tag, das im 
						Wechsel eine "1" bzw. eine "2" ausgibt. Dieses Tag kann zur Stylesheet-Formatierung eingesetzt 
						werden, wie im folgendem <a href="beispiele/sqltag/list.jsp" target="_new">Beispiel</a> gezeigt 
						ist. </p>
<code annotation="Beispiel für eine formatierte Abfrageausgabe">
&lt;qsql:execute id="query1"&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td colspan="5"&gt;
        &lt;qsql:rowcount/&gt; Einträge gefunden
      &lt;/td&gt;
    &lt;/tr&gt; 
    &lt;qsql:row&gt; 
      &lt;tr class="tr&lt;qsql:alternate/&gt;"&gt; 
        &lt;td&gt;&lt;qsql:field name="name"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;qsql:field name="vorname"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;qsql:field name="email"/&gt;&lt;/td&gt;
        &lt;td&gt;
          &lt;qsql:edit workflow="register" key="dk_kundennr"&gt;
            edit
          &lt;/qsql:edit&gt;
        &lt;/td&gt;
        &lt;td&gt;
          &lt;qsql:delete table="dmerce_kunde" key="dk_kundennr"/&gt;
            löschen
          &lt;/qsql:delete&gt;
        &lt;/td&gt; 
      &lt;/tr&gt; 
    &lt;/qsql:row&gt;  
  &lt;/table&gt;
&lt;/qsql:execute&gt;
</code>
					<p> <c>Edit-Tag</c> und <c>Delete-Tag</c> erzeugen automatisch Links, um den aktuellen Datensatz zu 
						bearbeiten bzw. zu löschen. Dazu muss jeweils der Primärschlüssel der Tabelle festgelegt 
						werden, anhand dessen der entsprechende Datensatz von <dmerce/> bearbeitet bzw. gelöscht werden 
						kann. <br/>Während das Delete-Tag in einer Standalone-JSP außerhalb eines Workflows eingesetzt 
						werden kann, benötigt das Edit-Tag einen Workflow, der vorab zum Editieren von Datensätzen 
						angelegt werden muss. </p>
					<p> Das rowcount-Tag gibt die Anzahl der Einträge aus, wobei in <dmerce/> keine variable Ausgabe von 
						"Eintrag" oder "Einträge" usw. erfolgt. Dieses gewünschte Verhalten wird durch die JSTL 
						ermöglicht. Durch folgendes Code-Schnipsel erreichen Sie das Ziel: ??? Code </p>
					<code annotation="Codebeispiel zur sprachlich korrekten Ausgabe von der Anzahl der Datenbankzeilen mittels der JSTL">
??? JSTL...if then else
					</code>
				</content>
			</section>
			<section>
				<title>Was Sie beachten müssen...</title>
				<content>
					<p> Bei der Verwendung von Datenbanken muss die Konvention eingehalten werden, dass die Spalte die 
						den Primärschlüssel darstellt, ein Integer-Feld sein muss. </p>
		        </content>
		    </section>
		</section>
		<section>
			<title>Einseitige Formulare</title>
			<content>
				<p>
				Eine Hauptaufgabe von <dmerce/> ist die Unterstützung des Anwenders bei der Realisierung von Web-Formularen.
				Durch die Verwendung von <dmerce/> definieren Sie lediglich Formularfelder und legen Eigenschaften wie erlaubtes Format, Typ (ganzzahliger Wert, Zeichenkette) fest.
				Weiterhin legen Sie den Speicherort für diese Formularfelder fest. Den Rest erledigt <dmerce/>. <dmerce/> übernimmt das Laden, Speichern, Validieren der eingegebenen Daten.
				Sie legen fest, zu welcher Seite Sie nach erfolgreicher Eingabe aller Daten wechseln möchten.
				Bei Auftreten eines Fehlers stellt <dmerce/> dem Benutzer eine Markierungen neben den Formularfeldern dar und weist den Benutzer auf die Art des Fehlers hin.
				Das sind Funktionen, für die ein Webanwendungsentwickler normalerweise einen großen Teil der Zeit aufwenden muss. Diese wird durch <dmerce/> stark vereinfacht.
				</p>
				<p>Für die konkrete Realisierung eines Formulars müssen Sie:</p>
				<ul>
					<li>das Formular mit Eigenschaften definieren</li>
					<li>das erstellte Formular in einen Workflow integrieren</li>
					<li>im Projekt Links auf den Workflow anpassen</li>
					<li>die Sicht auf den Workflow mittels einiger JSP-Seiten und die Darstellung des Formulars erzeugen</li>
				</ul>
				<p>Durch diesen Prozess führt Sie dieser Abschnitt</p>
				
				<h3>Definition des Formulars</h3>
				<p>Die forms.xml (im Verzeichnis <c>etc</c>) ist die Hauptdatei für die Formulardefinition. In ihr sind alle Formulare des Projektes gespeichert. 
				Dabei werden sie unabhängig vom späteren Aussehen definiert.
				Auf diese Formulare kann über den qform:form-Tag bzw. aus dem Workflow heraus referenziert werden.</p>
				<p>In der <c>forms.xml</c> werden alle Formularfelder mit Ihren Eigenschaften definiert.</p>
				<p>Betrachten wir als Beispiel ein einfaches Registrierungs Formular, das Name, Vorname und Email des Benutzers enthält, sowie eine Anredeauswahl und die Information, ob der Benutzer einen Newsletter erhalten möchte.
				 Wir wählen eine Formular-Id, auf die später referenziert werden soll, hier "register".
				 In der <c>forms.xml</c> werden lediglich die Formularfeldeigenschaften beschrieben, nicht jedoch das tatsächliche 
				 Aussehen im Browser. Sie beschreiben hier Regeln, die für bestimmte Felder gelten sollen. Bitte betrachten Sie das untenstehende 
				 Beispiel. 
				</p>
				<code annotation="Beispiel für ein Registrierungs-Formular">
&lt;form id="register"&gt;
  &lt;field name="anrede"&gt;
      &lt;description&gt;Anrede&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
      &lt;options&gt;
        &lt;option key="m"&gt;Herr&lt;/option&gt;
        &lt;option key="w"&gt;Frau&lt;/option&gt;
      &lt;/options&gt;
  &lt;/field&gt;
  &lt;field name="name" required="true"&gt;
      &lt;description&gt;Name&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="vorname"&gt;
      &lt;description&gt;Vorname&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="email" required="true"&gt;
      &lt;description&gt;eMail&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
      &lt;constraints&gt;
        &lt;constraint type="format"&gt;.+@.+\..+&lt;/constraint&gt;
      &lt;/constraints&gt;
  &lt;/field&gt;
  &lt;field name="newsletter"&gt;
      &lt;description&gt;
        Ja, ich möchte den Newsletter erhalten
      &lt;/description&gt;
      &lt;type&gt;boolean&lt;/type&gt;
  &lt;/field&gt;
&lt;/form&gt;</code>
				<p>Zu den einzelnen Feldern:</p>
				<ul>
					<li>Anrede: der ausgewählte Wert repräsentiert eine Zeichenkette (string). Sie können aus vordefinierten Werten wählen, die mittels <c>option-Tag</c> in einer options-Gruppe vorhanden sein müssen.
						Der Aufbau des <c>option-Tag</c> ist dem HTML-option-Tag ähnlich. Der interne Wert wird durch das key-Attribut definiert.</li>
					<li>Name: das Feld wird intern benannt mit "name", es wird als Pflichtfeld festgelegt (required), und ist eine Zeichenkette</li>
					<li>Vorname: dieses Feld ist dem "name" Feld ähnlich, ist jedoch kein Pflichtfeld</li>
					<li>eMail: dieses Feld besitzt eine zusätzliche Regel, die in einem Constraint verankert ist. Von diesen Regeln gibt es mehrere, hier wurde
						eine Format-Regel eingesetzt. Die Format Regel wird Mithilfe von sogenannten <c>Regular Expressions</c> ausgedrückt. Bitte bemühen Sie 
						hierzu die einschlägige Literatur. Das Format für eine gültige eMail wird hier beschrieben durch mindestens ein Zeichen, gefolgt von einem "@"-Symbol, erneut mindestens ein Zeichen, danach ein Punkt, abschließend mindestens ein Zeichen.
						Die Vorschrift für gültige eMails ist weitaus komplizierter, es dient hier nur einem Beispiel für eine Formatbeschränkung. Beachten Sie auch bitte, das im Beispiel
						nur das Format der eMail-Adresse geprüft wird, nicht jedoch das tatsächliche Vorhandensein dieser eMailadresse auf einem Mailserver.
						Dazu bedarf es aufwändige Prüfroutinen, die nicht implementiert sind und die nicht bei allen Mailservern funktionieren.</li>
					<li>Newsletter: der Newsletter ist keine Zeichenkette, sondern ein Boolscher Wert (wahr oder falsch bzw. englisch true/false).
						Es handelt sich um einen Wahrheitswert, der zum Beispiel durch eine Checkbox repräsentiert werden kann.</li>
				</ul>
				
				<p>Mit den Feldern sind noch weitere Möglichkeiten offen. Bitte lesen Sie hierzu den Abschnitt "Formular-Referenz".</p>

				<h3>Definition des Workflows</h3>
				<p>Für die Arbeit mit Formularen muss festgelegt werden woher die Daten in den Formularen stammen sollen (z.B. Laden aus einer Datenbank) sowie bei Abschicken eines Formulars muss festgeleft werden, wo die Daten abgespeichert werden sollen.
					Das Zentrale Dokument für die Workflowdefinition ist die workflows.xml, die im <c>etc</c>-Verzeichnis zu finden ist.
					Das untenstehende Beispiel zeigt eine einfache Workflow-Datei, deren Bestandteile im Folgenden erklärt werden.</p>
					<code annotation="einfaches Beispiel für einen Workflow aus der Datei workflows.xml">
&lt;workflow id="register"&gt;
  &lt;page id="register_page1" 
       template="seite1.jsp" formid="form1" editable="true"&gt;
    &lt;formmap table="vkunde" primarykey="kundennr"&gt;
      &lt;fieldmap formfield="name" dbfield="name"/&gt;
      &lt;fieldmap formfield="vorname" dbfield="vorname"/&gt;
      &lt;fieldmap formfield="strasse" dbfield="strasse"/&gt;
      &lt;fieldmap formfield="plzort" dbfield="plzort"/&gt;
      &lt;fieldmap formfield="email" dbfield="email"/&gt;
    &lt;/formmap&gt;
    &lt;transition name="save_to_db" target="list"&gt;
      &lt;condition type="buttonpressed" value="Ok"/&gt;
      &lt;action type="maintain"&gt;
        &lt;formfield pageid="register_page1" 
              formid="form1" name="name"/&gt;
        &lt;formfield pageid="register_page1" 
              formid="form1" name="vorname"/&gt;
        &lt;formfield pageid="register_page1" 
              formid="form1" name="strasse"/&gt;
        &lt;formfield pageid="register_page1" 
              formid="form1" name="plzort"/&gt;
        &lt;formfield pageid="register_page1" 
              formid="form1" name="email"/&gt;
        &lt;formfield formid="form1" 
               name="login"/&gt;
        &lt;formfield formid="form1" 
               name="passwort"/&gt;
      &lt;/action&gt;
    &lt;/transition&gt;
    &lt;transition name="abort" target="list" validation="false"&gt;
      &lt;condition type="buttonpressed" value="Cancel"/&gt;
    &lt;/transition&gt;
  &lt;/page&gt;
  &lt;page id="list" template="seite3.jsp"/&gt;
&lt;/workflow&gt;</code>
Sie können im gezeigten Workflow vier verschiedene Bereiche erkennen:
				<p>
				<ul>
				<li>Die Formmap steuert die Datenbankverbindung und mappt Datenbanktabellenspalten 
					auf Formularfelder und definiert den Primärschlüssel sowie die Datenbanktabelle.</li>
				<li>Transitionen steuern den Übergang auf andere Seiten des Workflows.</li>
				<li>Conditions prüfen die Vorbedingungen für einen Übergang. Schauen Sie bitte im gezeigten Beispiel auf
					die Transition "abort". Diese wird dann ausgeführt falls der Knopf mit der Beschriftung "Cancel" gedrückt wurde.
				</li>
				<li>Actions führen Aktionen aus, die gezeigte Action "maintain" trägt die eingegebenen Formulardaten in die Datenbank ein. Die Formulardaten werden dabei zurück auf Datenbankfelder gemappt. Eine Action pro Transition ist zulässig.</li>
				</ul>		
				</p>
				<p>Beispiele für workflow-Dateien bzw. ganze Projekte die erklärt werden, finden Sie im vorherigen Kapitel ("Erste Schritte").</p>
				<p>Der einfachste Workflow kennt zwei Seiten, betrachten Sie dazu die Beispielanwendung "Simple".</p>

				<h3>Links auf den Workflow</h3>
				<p>Da Sie nun keine konkrete Seite mehr ansteuern, falls Sie in einen Workflow einsteigen möchten, müssen Sie zur Verwendung die Links anpassen. 
				Die Links werden in dieser Form dargestellt:</p>
				<code annotation="Aufruf eines Workflows">
&lt;q:workflowlink id="register"&gt;Registrieren&lt;/q:workflowlink&gt;
				</code>
				<p>Es gibt Fälle, bei denen Sie einen Workflow neustarten möchten, etwa um einen Vorgang zu wiederholen. Benutzen Sie dazu:</p>
				<code annotation="Aufruf eines Workflows mit Neustart Anweisung">
&lt;q:workflowlink id="register" restart="true"&gt;
    Registrieren
&lt;/q:workflowlink&gt;
				</code>
				<p><dmerce/> generiert aus diesem Tag den HTML-Link.</p>
				
				<h3>Sichten mittels JSP-Seiten erzeugen</h3>
				<p>Die JSP Seite ist nun leicht zu erzeugen. 
				Sie besteht im Wesentlichen aus Ihrem HTML Code, lediglich für die Formularbehandlung werden eigene dmerce-Tags bereitgestellt. Diese sind in der Formular-Referenz im Anhang ??? aufgeführt.
				Ein Formular besteht im Wesentlichen aus drei Tag-Arten:</p>
				<ul>
				<li>form</li>
				<li>Tag für die jeweilige Darstellungsart</li>
				<li>Tags für die Fehlerausgabe</li>
				</ul>
				
				<p>Das Form-Tag ist das Einzige, das Sie in Ihre JSP schreiben müssen damit das Formular funktioniert.
				Der Rest kann durch die Autogenerierungsfunktion des Formulartags erfolgen. In dem Fall bestimmt <dmerce/> die Formatierung des Formulars.
				</p>
				<code annotation="automatisch generiertes Formular">&lt;qform:form id="form1" autogenerate="true" /&gt;</code>
				<p>Das Formular kann dabei beliebig viele Elemente enthalten. Diese wurden bereits in der beschriebenen <c>forms.xml</c> definiert. Die Darstellungsform wird bestimmt durch verschiedene Parameter.
					Ein String-Feld wird grundsäzlich durch ein input <c>type="text"-Tag</c> repräsentiert. Übersteigt die erlaubte Textlänge einen bestimmten Wert wird ein <c>textarea-Tag</c> automatisch erzeugt.
					Die zum Formular gehörigen Knöpfe werden ebenfalls automatisch erzeugt. 
				Mit ein paar Einschränkungen bekommen Sie durch das obige Beispiel mit minimalem Aufwand Formulare, die einem einheitlichen Design folgen.</p>
				
				<p>Sie können selbstverständlich das Layout der Formulare selbst bestimmen, da individuelle Layoutwünsche in <dmerce/> realisiert werden können. Das gilt z.B. für 
					mehrspaltige Formulare. Falls Sie so ein eigenes Layout erstellen möchten, betrachten Sie bitte das nächste Beispiel.</p>
				<code annotation="Benutzerseitig gestaltetes Formular">
&lt;qform:form id="form1"&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;Name&lt;/td&gt;
      &lt;td&gt;&lt;qform:text name="name"/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;qform:errormessage name="name"/&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Vorname&lt;/td&gt;
      &lt;td&gt;&lt;qform:text name="vorname"/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;qform:errormessage name="vorname"/&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Email&lt;/td&gt;
      &lt;td&gt;&lt;qform:textarea name="email" rows="5" cols="28"/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;qform:errormessage name="email"/&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;qform:button type="submit" text="Ok"/&gt;
  &lt;qform:button type="submit" text="Cancel"/&gt;
&lt;/qform:form&gt;
				</code>
				<p>Die "autogenerate"-Option fehlt, dafür wurde der Body von <c>qform:form</c> erweitert. Manuell wurde die Formatierung der einzelnen Formularfelder 
					hinzugefügt. Beachten Sie, dass der Markup von Pflichtfeldern über die jeweiligen Anzeige Tags text, textarea, checkbox, usw. geschieht.
					Die Fehlerausgabe der einzelnen Felder wird vom errormessage-Tag übernommen. Sie können auch das
					errormessage Tag für das gesamte Form verwenden, ohne Angabe von "name". Dann schreiben Sie es typischerweise unter das <c>form-Tag:</c></p>
				<code annotation="Beispiel für das zentral verwendete Fehlermeldungs-Tag">
&lt;qform:form id="form1"&gt;
  &lt;qform:errormessage/&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;Name&lt;/td&gt;
      &lt;td&gt;&lt;qform:text name="name"/&gt;&lt;/td&gt;
...</code>
				<p>In diesem Fall werden alle Fehlermeldungen für die einzelnen Formularfelder gesammelt an der mit <c>errormessage</c> bezeichneten Stelle ausgegeben.</p>
				<p>Die Ziele des Formulars (Ok, Cancel) im Workflow müssen den Knopf-Beschriftungen entsprechen.</p>
			</content>
		</section>
		<section>
			<title>Mehrseitige Formulare</title>
			<content>
				<p>Mit <dmerce/> können Workflows erstellt werden, die sich über mehrere Formularseiten erstrecken. Hiermit sind Assistenten möglich, die einen Benutzer 
					z.B. Schritt für Schritt durch einen Anmeldeprozess führen. Damit können Sie Basisdaten, Logindaten, Interessen für Newsletter u.v.m. auf mehrere Seiten verteilen und
					abhängig von der Auswahl des Benutzers auf andere Seiten verweisen. Damit ermöglicht <dmerce/> kontextsensitive Workflows.</p>
				<p>Zum Hinzufügen eines mehrseitigen Formularworkflows definieren Sie lediglich ein Formular, genauso wie bei einseitigen Formularen. Auf den einzelnen Seiten des mehrseitigen Formulars benutzen Sie 
					dann nur gerade die Felder, die Sie anzeigen möchten.
					Bedenken Sie bitte, das Sie mehrseitige Formulare nicht über automatisch generierte Formulare erstellen können. Sie haben jedoch die alternative Möglichkeit das Formular auf mehrere Formulare zu verteilen. 
					Damit steht Ihnen wieder die autogenerate-Funktion des Form-Tags zur Verfügung.</p>
				<p>Betrachten wir folgendes Formular: es stellt Basisdaten zur Eingabe von Name und Adresse zur Verfügung. Überdies hinaus wird die Auswahl eines Logins angeboten, 
					sowie die Eingabe eines Passwortes und der Bestätigung. Dieses Formular soll nun als zweiseitiges Formular angezeigt werden.</p>
				<code annotation="Beispiel eines mehrseitigen Formulars zur Eingabe von persönlichen und login-Daten">
&lt;form id="register"&gt;
  &lt;field name="anrede"&gt;
      &lt;description&gt;Anrede&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
      &lt;options&gt;
        &lt;option key="m"&gt;Herr&lt;/option&gt;
        &lt;option key="w"&gt;Frau&lt;/option&gt;
      &lt;/options&gt;
  &lt;/field&gt;
  &lt;field name="name"&gt;
      &lt;description&gt;Name&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="vorname"&gt;
      &lt;description&gt;Vorname&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="strasse"&gt;
      &lt;description&gt;Straße&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="plzort"&gt;
      &lt;description&gt;PLZ und Ort&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="email"&gt;
      &lt;description&gt;eMail&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="login"&gt;
      &lt;description&gt;Login&lt;/description&gt;
      &lt;type&gt;boolean&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="password"&gt;
      &lt;description&gt;Passwort&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
  &lt;field name="password2"&gt;
      &lt;description&gt;Passwort (Wh.)&lt;/description&gt;
      &lt;type&gt;string&lt;/type&gt;
  &lt;/field&gt;
&lt;/form&gt;
				</code>
				<p>Im obigen Formular sind alle benötigten Felder definiert. Auf die Wahl von Pflichtfeldern 
					wurde hier verzichtet, ebenso auf Einschränkungen. Selbstverständlich steht Ihnen auch bei mehrseitigen Formularen der volle Befehlsumfang zur Verfügung.</p>
				<p>Der Workflow sieht nun etwas anders aus:</p>
				<code annotation="Beispiel für ein zweiseitiges Formular">
&lt;workflow id="register2"&gt;
  &lt;page id="register2_page1" 
       template="mehrseitig1.jsp" formid="form1" editable="true"&gt;
    &lt;formmap table="vkunde" primarykey="kundennr"&gt;
      &lt;fieldmap formfield="name" dbfield="name"/&gt;
      &lt;fieldmap formfield="vorname" dbfield="vorname"/&gt;
      &lt;fieldmap formfield="strasse" dbfield="strasse"/&gt;
      &lt;fieldmap formfield="plzort" dbfield="plzort"/&gt;
      &lt;fieldmap formfield="email" dbfield="email"/&gt;
    &lt;/formmap&gt;
    &lt;transition name="save_to_db" target="register2_page2"&gt;
      &lt;condition type="buttonpressed" value="Ok"/&gt;
    &lt;/transition&gt;
    &lt;transition name="abort" target="list" validation="false"&gt;
      &lt;condition type="buttonpressed" value="Cancel"/&gt;
    &lt;/transition&gt;
  &lt;/page&gt;
        
  &lt;page id="register2_page2" 
       template="mehrseitig2.jsp" formid="form1" editable="true"&gt;
    &lt;formmap table="vkunde" primarykey="kundennr"&gt;
      &lt;fieldmap formfield="login" dbfield="login"/&gt;
      &lt;fieldmap formfield="passwort" dbfield="passwort"/&gt;
    &lt;/formmap&gt;
    &lt;transition name="abort" target="list" 
           validation="false"&gt;
      &lt;condition type="buttonpressed" value="Cancel"/&gt;
    &lt;/transition&gt;
    &lt;transition name="save_to_db" target="list"&gt;
      &lt;condition type="buttonpressed" value="Ok"/&gt;
      &lt;action type="maintain"&gt;
        &lt;formfield pageid="register2_page1" 
              formid="form1" name="name"/&gt;
        &lt;formfield pageid="register2_page1" 
              formid="form1" name="vorname"/&gt;
        &lt;formfield pageid="register2_page1" 
              formid="form1" name="strasse"/&gt;
        &lt;formfield pageid="register2_page1" 
              formid="form1" name="plzort"/&gt;
        &lt;formfield pageid="register2_page1" 
              formid="form1" name="email"/&gt;
        &lt;formfield formid="form1" 
               name="login"/&gt;
        &lt;formfield formid="form1" 
               name="passwort"/&gt;
      &lt;/action&gt;
    &lt;/transition&gt;
  &lt;/page&gt;
        
  &lt;page id="list" template="seite3.jsp"/&gt;
        
&lt;/workflow&gt;</code>
				<p>Beachten Sie hier nun die Verzweigung auf die verschiedenen Seiten des Workflows. 
					Sie können im Workflow eigene Actions definieren die variable Workflowsteuerung zulassen. 
					Auf die detaillierte Besprechung dieser Teile wurde jedoch an dieser Stelle verzichtet.</p>
				<p>Die JSP-Seiten sehen genauso aus wie bei einseitigen Formularen. Auf eine Abbildung der JSP-Seiten 
					wurde daher hier verzichtet. Nur kurz zur Beschreibung: die seite1.jsp präsentiert die Sicht auf 
					den ersten Teil des Formulars in dem Name, Straße und Ort abgefragt wird. Auf der zweiten Seite 
					wird der Benutzer dazu aufgefordert Login und Passwort einzugeben. Als Ziel dieser Seite ist eine 
					"Vielen Dank"-Seite (seite3.jsp) eingetragen.</p>
				<p>Ein lauffähiges Beispiel finden Sie unter <c>applications/multiple</c>.</p>
			</content>
		</section>		
		<section>
			<title>Bricks - Das Bausteine-Konzept</title>
			<content>
				<p>
				Web-Seiten verwenden in der Regel ein einheitliches Layout, in das lediglich
				unterschiedliche Inhalte eingebunden werden sollen. Beispielsweise zeigt sich
				ein gelungener Shop durchgehend in der Corporate Identity des Anbieters. Bei
				der Navigation durch das System wird lediglich ein Teil der Seite ausgetauscht.
				Mal erscheint ein Warenkatalog im Hauptteil des Fensters, mal die Produktdetails,
				wieder ein anderes Mal ein Formular. <br/>
				Grundsätzlich sollte das Layout getrennt von den austauschbaren Inhalten
				gestaltet werden können, damit bei Bedarf ein Redesign der Seite leicht vollzogen
				werden kann. Ein Wechsel des Layouts sollte nicht mit weiteren Änderungen in
				den austauschbaren Teilen der Web-Site verbunden sein.<br/>
				</p>
				<p>
				In <dmerce/> wird dies durch ein sogenanntes Bricks-Konzept realisiert. Bricks sind
				Bausteine, aus denen sich eine Web-Seite zusammensetzt. Der Designer gestaltet mit
				einem beliebigen Werkzeug ein Template, das als Layout-Vorlage für mehrere Seiten
				der Web-Site dient. Er definiert lediglich an welchen Stellen austauschbare Inhalte
				eingefügt werden sollen.
				</p>
			</content>
			<section>
				<title>Ein Template definieren</title>
				<content>
					<p>
					Ein Template ist im Prinzip eine einfache HTML-Seite, die mit einem beliebigen
					Webdesign-Tool erstellt werden kann. Dies gilt auch für Bilder und andere Ressourcen,
					die in das gemeinsame Layout übernommen werden sollen.
					</p>
					<p>
					Nehmen wir an, ein <a href="beispiele/bricks/layoutvorlage.htm" target="_new">Layout</a> enthalte eine variable Überschrift, eine Menüleiste
					und den eigentlichen Inhalt als austauschbares Bestandteil der Seite.
					<img src="bricksdemo_layout.png" name="bricksdemo_layout">Beispiel für ein Layout</img>
					</p>
					<p>
					Die austauschbaren Stellen im HTML-Dokument werden nun mit einem speziellen Tag
					markiert:
					</p>
					<code>
&lt;html&gt;
&lt;head&gt;
&lt;style type="text/css"&gt;
...
&lt;/style&gt;
&lt;title&gt;Beispiel-Layout&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td colspan="2" style="..."&gt;
            &lt;q:usebrick name="ueberschrift"/&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td style="..."&gt;
            &lt;q:usebrick name="menu"/&gt;
        &lt;/td&gt;
        &lt;td style="..."&gt;
            &lt;q:usebrick name="inhalt"/&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</code>
					<p>
					Die mit dem Tag <c>&lt;q:usebrick&gt;</c> markierten Stellen dienen als Platzhalter
					für die entsprechend benannten austauschbaren Elemente. Wie Sie diese
					konkret festlegen erfahren Sie im nächsten Kapitel.
					</p>
					<p>
					In der Layout-Vorlage sollten Sie nun als erste Zeile folgenden Code
					einfügen, damit die vom System benötigten Initialisierungen
					vorgenommen werden.
					</p>
					<code>
&lt;%@ include file="/init.jsp" %&gt;</code>
					<p>
					In der Datei <c>init.jsp</c> befinden sich lediglich ein paar Zeilen
					JSP-Code, der die <dmerce/>-Taglibs einbindet. Sie können sie daher alternativ auch
					von Hand einfügen. Folgender Code muss in diesem Fall anstatt der oben
					genannten Zeile eingefügt werden:
					</p>
					<code annotation="Alternative zur include-Zeile">
&lt;%@ page contentType="text/html" language="java" %&gt;
&lt;%@ taglib uri="/tags/dmerce" prefix="q" %&gt;
&lt;%@ taglib uri="/tags/dmerce-form" prefix="qform" %&gt;
&lt;%@ taglib uri="/tags/dmerce-sql" prefix="qsql" %&gt;</code>
					<p>
					Bitte beachten Sie, dass Sie am Schluss die HTML-Seite in eine JSP-Seite umbenennen müssen,
					damit die eingefügten Tags ausgewertet werden.
					</p>
				</content>
			</section>
			<section>
				<title>Templates verwenden</title>
				<content>
				<p>
					Wenn Sie eine Layout-Vorlage mit konkreten Inhalten füllen wollen
					legen Sie lediglich eine weitere JSP an, in der Sie auf das Template
					verweisen und die einzelnen Platzhalter mit JSP-Dateien
					assoziieren. Die <a href="beispiele/bricks/seite1.jsp" target="_new">Seite (seite1.jsp)</a> hat dann folgenden Aufbau:
				</p>
				<code annotation="seite1.jsp">
&lt;%@ include file="/init.jsp" %&gt;
&lt;q:usetemplate path="layoutvorlage.jsp"&gt;
    &lt;q:setbrick name="ueberschrift"&gt;
        Konkrete Überschrift YYY
    &lt;/q:setbrick&gt;
    &lt;q:setbrick name="inhalt" path="willkommen.jsp"/&gt;
    &lt;q:setbrick name="menu" path="menu.jsp"/&gt;
&lt;/q:usetemplate&gt;</code>
				<br/>
				<code annotation="menu.jsp">
&lt;%@ include file="/init.jsp" %&gt;
&lt;ul&gt;
    &lt;li&gt;Menüpunkt 1&lt;/li&gt;
    &lt;li&gt;Menupunkt 2&lt;/li&gt;
&lt;/ul&gt;</code>
				<br/>
				<code annotation="willkommen.jsp">
&lt;%@ include file="/init.jsp" %&gt;
Herzlich willkommen auf der Demoseite.&lt;br/&gt;
Sie kommen über &lt;a href="seite2.jsp"&gt;diesen Link&lt;/a&gt;
zur nächsten Seite.</code>
				<p>
				Mit dem Tag <c>"q:usetemplate"</c> kann relativ zur aktuellen JSP der Pfad zum
				Layout-Template angegeben werden. Möchten Sie alternativ einen absoluten
				Pfad zum Template angeben, so sollte der Pfad wie gewohnt mit einem "/" beginnen.
				</p>
				<p>
				Um nun innerhalb des gewählten Templates die Platzhalter mit konkreten Inhalten
				zu füllen, wird der Tag <c>"q:setbrick"</c> verwendet. <br/>
				Falls der Tag HTML- oder JSP-Code beinhaltet, wird dieser direkt an Stelle
				des Platzhalters im Template geschrieben. So wird an der Stelle im Template, wo
				der Tag <c>&lt;q:usebrick name="ueberschrift"&gt;</c> definiert worden ist nun
				der Text "Konkrete Überschrift YYY" erscheinen.
				</p>
				<p>
				Alternativ kann auch eine ganze JSP an die Stelle eines Platzhalters eingebunden
				werden. Dies ist vor allem dann angebracht, wenn größere Code-Blöcke ausgetauscht
				werden sollen. Zum Einbinden von JSPs muss lediglich ein Attribut "path" spezifiziert
				werden, der den relativen oder absoluten Pfad zur einzubindenen JSP enthält.
				So wird die <c>seite1.jsp</c> den Brick <c>willkommen.jsp</c> einbinden, während
				die <c>seite2.jsp</c> einen anderen Brick <c>inhalt.jsp</c> einbinden wird.
				</p>
				<code annotation="seite2.jsp">
&lt;%@ include file="/init.jsp" %&gt;
&lt;q:usetemplate path="layoutvorlage.jsp"&gt;
    &lt;q:setbrick name="ueberschrift"&gt;
        Konkrete Überschrift YYY
    &lt;/q:setbrick&gt;
    &lt;q:setbrick name="inhalt" path="inhalt.jsp"/&gt;
    &lt;q:setbrick name="menu" path="menu.jsp"/&gt;
&lt;/q:usetemplate&gt;</code>
				<br/>
				<code annotation="inhalt.jsp">
&lt;%@ include file="/init.jsp" %&gt;
Dies ist ein komplexer Inhalt, den kaum ein
Normalsterblicher fassen kann.</code>
				<p>
				Die eingebundenen Bricks müssen als erste Zeile die <c>init.jsp</c> wie
				schon bei den Template-Definitionen einbinden.
				</p>
				</content>
			</section>
		</section>
		<section>
			<title>Sicherheit: Seiten mit beschränktem Zugriff</title>
			<content>
				<p> Mit <dmerce/> können Sie auf einfache Art und Weise den Zugriff auf bestimmte Teile der 
					Webanwendung beschränken. Dazu müssen Sie lediglich festlegen, welche Pfade in Ihrer Anwendung von 
					welchen Benutzern betreten werden dürfen. Damit Sie nicht jeden einzelnen Benutzer aufzählen 
					müssen, teilt man Benutzer in Gruppen ein, die jeweils die gleichen Rechte für alle Mitglieder der 
					Gruppe vorsehen. Die Mitgliedschaft in einer Gruppe nennt man auch "Rolle". Als Beispiel könnte es 
					einen Mitgliederbereich unter dem Pfad "/members/" auf Ihrer Seite geben, der nur von Benutzern mit 
					der Rolle "member" angesehen werden dürfen.</p>
				<p> Damit man feststellen kann, mit welchem Benutzer man es zu tun hat, muss sich der Benutzer bei 
					gesicherten Anwendungen mit seiner Benutzerkennung und einem Passwort authentifizieren. Dies 
					erfolgt durch ein individuell von Ihnen gestaltetes Web-Formular. Die Gestaltung eines solchen 
					Formulars ist im Unterkapitel "Gestaltung eines Login-Formulars" näher beschrieben.</p>
				<p> Der Benutzername und das zugehörige Passwort, aber auch die zu den Benutzern gehörenden Rollen 
					werden meist in der Datenbank in verschiedenen Tabellen gespeichert. <dmerce/> schreibt Ihnen nicht 
					vor, in welchen Tabellen und Spalten dies geschehehen muss. Sie müssen lediglich in der 
					Konfigurationsdatei <c>security.xml</c> (im <c>etc</c>-Verzeichnis Ihres Projektes) angeben, wo 
					<dmerce/> nach den entsprechenden Werten suchen soll. Werfen Sie einfach einen Blick in das 
					Unterkapitel "Einstellungen in der security.xml".</p>
				<p> </p>
			</content>
			<section>
				<title>Gestaltung eines Login-Formulars</title>
				<content>
					<p> Ein Login-Formular besteht aus einem Text-Feld für die Eingabe der Benutzerkennung und einem 
						Passwort-Feld für die verschleierte Eingabe eines Passwortes. Als <dmerce/>-Benutzer müssen Sie 
						nicht einmal genau wissen, welche Aktion beim Drücken auf den "Login"-Button ausgeführt werden. 
						Sie können einfach die mitgelieferten Security-Tags verwenden, die in der Taglib-Referenz im 
						Unterkapitel "Security-Tags" näher beschrieben sind.</p>
					<p> Hier sehen Sie ein einfaches Beispiel für ein Login-Formular:</p>
					<code annotation="Ein rudimentäres Login-Formular">
...
&lt;qsec:loginform&gt;
	Benutzerkennung: &lt;qsec:usernamefield style="width:100px"/&gt;&lt;br/&gt;
	Passwort: &lt;qsec:passwordfield class="foo_css_class_name"/&gt;&lt;br/&gt;
	&lt;qsec:loginbutton/&gt;
&lt;/qsec:loginform&gt;						
...
					</code>
					<p> Damit Sie volle Gestaltungsfreiheit haben, können Sie bei den Formular-Elementen CSS verwenden, 
						d.h. Sie geben entweder eine CSS-Klasse an oder spezifizieren individuell das Aussehen.</p>
				</content>
			</section>
			<section>
				<title>Einstellungen in der security.xml</title>
				<content>
					<p> Die <c>security.xml</c> dient zur Aufnahme globaler Sicherheitsparameter für eine Anwendung.</p>
					<p> Für die Datenbanktabellen in denen Benutzerkennungen, Passwörter und Rollen gespeichert sind, 
						gelten leidglich die folgenden Regeln die Sie beachten müssen: <ul> <li>Die Spalten für 
						Benutzernamen und das zugehörige Passwort müssen in der gleichen Tabelle enthalten sein.</li> 
						<li>Die Spalten für Benutzernamen und die zugehörige Rolle müssen in der gleichen Tabelle 
						enthalten sein.</li> </ul> In der Regel werden Sie daher eine Tabelle mit den Spalten "userid" 
						und "passwort" und eine weitere Tabelle mit den Spalten "userid" und "role" verwenden 
						wollen.</p>
					<p> In der <c>security.xml</c> müssen Sie dann lediglich die folgenden Angaben machen:</p>
					<code annotation="Einstellungen für die Authentifizierung über Datenbank">
&lt;security&gt;
	&lt;login&gt;
		&lt;login-page&gt;/login/login.jsp&lt;login-page&gt;
		&lt;error-page&gt;/login/error.jsp&lt;error-page&gt;
	&lt;/login&gt;

	&lt;database-sec&gt;
		&lt;authentication-table&gt;user_passwort_tabelle&lt;/authentication-table&gt;
		&lt;authorization-table&gt;user_role_tabelle&lt;/authorization-table&gt;
	&lt;/database-sec&gt;
	...
&lt;/security&gt;
					</code>
					<p> Nun können Sie noch festlegen welche Teile Ihrer Anwendung für welche Rollen zugänglich sein sollen.
					</p>
					<code annotation="Einstellungen für die zu schützenden Bereiche">
&lt;security&gt;
	...
	&lt;security-constraint&gt;
		&lt;web-resource-collection&gt;
			&lt;web-resource-name&gt;Member-Bereich&lt;/web-resource-name&gt;
			&lt;url-pattern&gt;/members/*&lt;/url-pattern&gt;
		&lt;/web-resource-collection&gt;
		&lt;auth-constraint&gt;
			&lt;role-name&gt;member&lt;/role-name&gt;
			&lt;role-name&gt;admin&lt;/role-name&gt;
		&lt;/auth-constraint&gt;
	&lt;/security-constraint&gt;
&lt;/security&gt;
					</code>
					<p> Nach diesem Muster können für beliebige Bereiche Ihrer Anwendung diejenigen Rollen festlegen die
						darauf zugreifen dürfen.</p>
					<p> Versucht ein nicht angemeldeter Benutzer auf einen geschützten Bereich zuzugreifen, wird er 
						automatisch auf die von Ihnen gestaltete Login-Seite umgeleitet. Bei erfolgreicher 
						Authentifizierung wird er auf die ursprünglich angeforderte Seite zurückgeleitet, sonst wird er 
						auf eine Fehlerseite umgeleitet.</p>
				</content>
			</section>
		</section>
	</section>
	<section>
		<title>Taglib-Referenz</title>
		<content>
			<p>Die <dmerce/>-Tag-Bibliothek gibt dem Webdesigner viele Funktionen an die Hand, um möglichst schnell und 
				einfach Webanwendungen erstellen zu können. <dmerce/> unterstützt Sie bei der Definition von Workflows 
				und Formularen, bei der einfachen Ansteuerung von Datenbanken, bei der Ausgabe von Abfrageergebnissen 
				und einiges mehr. <dmerce/> bietet ihnen die Funktionen in drei Bereiche unterteilt: </p>
			<ul>
				<li>q: Allgemeine Funktionen für den Umgang mit Sessions, Parametern, Formatierungen, 
					System-Nachrichten</li>
				<li>qsql: Arbeiten mit SQL-Daten</li>
				<li>qform: Arbeiten mit Formularen</li>
			</ul>
			<p> In der Liste sind Präfixe angegeben (q, qsql, qform). Diese Präfixe müssen Sie auch in ihren 
				JSP-Dateien angeben. </p>
			<code annotation="Beispiel für das prepare-Tag">&lt;qsql:prepare name="sql-query1"/&gt;</code>
			<p> Im Beispiel ist ein Tag zur Vorbereitung einer SQL-Abfrage dargestellt. Falls Sie also Tags verwenden 
				möchten, die sich im Lieferumfang von <dmerce/> befinden, müssen Sie das Präfix des Befehls (des Tags) 
				kennen. Dieses Kapitel zeigt Ihnen alle Tags und erläutert diese anhand ausführlicher Beispiele. Bitte 
				schauen Sie auch in die mitgelieferten Beispielanwendungen, um die Struktur der Seiten zu erlernen. 
				Ausgehend von Workflows werden von den einzelnen Seiten verschiedene JSP-Seiten angesteuert. Diese 
				JSP-Seiten enthalten Befehle zum Zusammenbau der Gesamtseite. Zur Gestaltung der Gesamtseite können Sie 
				das Bausteinkonzept (Bricks) von <dmerce/> verwenden. Die folgenden Kapitel erläutern Ihnen die 
				Funktionsweise der einzelnen <dmerce/>-Befehle.</p>
		</content>
		<section>
			<title>Allgemeine Tags</title>
			<content>Die Allgemeinen Tags in der <dmerce/>-Taglib umfassen alle Funktionen, die nicht in den Bereichen 
				Formulare und Datenbankabfrage und -steuerung gehören. Diese allgemeinen Tags werden tragen den Prefix 
				"q:".</content>
			<section>
				<title>ContextVar-Tag</title>
				<content>
					<p>
						Das ContextVar-Tag gibt den Wert einer Variable aus dem Workflow-Kontext
						oder eines Formularfeldes als String aus.
					</p>
					<p>
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name der Kontextvariable der des Formularfeldes</td>
							</tr>
							<tr>
								<td class="deco">pageid (optional)</td>
								<td class="deco">ID der Seite, auf der sich das auszugebende Formularfeld befindet. 
									(Wenn dieses Attribut weggelassen wird, wird die aktuell laufende Seite verwendet.) 
									</td>
							</tr>
							<tr>
								<td class="deco">formid (optional)</td>
								<td class="deco">ID des Formulars, auf dem sich das auszugebende Formularfeld 
									befindet. (Wenn dieses Attribut weggelassen wird, wird das aktuell laufende 
									Formular verwendet.) </td>
							</tr>
							<tr>
								<td class="deco">index (optional)</td>
								<td class="deco">Index des anzuzeigenden Elements, falls in dem angegebenen 
									Formularfeld mehrere Einzelwerte enthalten sind. (Beispiel: Listenfelder) </td>
							</tr>
						</table>
					</p>
					<h3>Beispiel 1</h3>
					<code annotation="Gibt den Wert der Variable someVar im Workflow-Kontext aus, falls eine solche Variable existiert. Sonst wird nach einem Formularfeld mit diesem Namen gesucht.">&lt;q:contextvar name="someVar"/&gt;</code>
					<h3>Beispiel 2</h3>
					<code annotation="Sucht nach einem Formularfeld message auf der Seite fooPage und gibt den Wert aus.">&lt;q:contextvar page="fooPage" name="message"/&gt;</code>
					</content>
			</section>
			<section>
				<title>Include-Tag</title>
				<content>
					<p>Das include-Tag kann externe Ressource in eigene Seiten einbinden. Damit lassen sich HTML-Seiten 
						auf entfernten Servern so auf eigenen Seiten einbinden, als seien sie selbst geschrieben 
						worden.</p>
					<h3>Beispiel</h3>
					<code annotation="Einlesen der Seite www.1ci.de und darstellen auf der eigenen Seite">&lt;q:include url="http://www.1ci.de"/&gt;</code> 
					<p>Damit wird die Webseite
					http://www.1ci.de eingelesen, alles zwischen dem body-Tag
					behalten und so wie es ist, ausgegeben. </p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">url (required)</td>
								<td class="deco">Name der einzubindenden Ressource in Form eines URL</td>
							</tr>
						</table>
					</p>
					</content>
			</section>
			<section>
				<title>Message-Tag</title>
				<content>
					<p> Message gibt den Parameter qMessage aus der Session aus, falls er gesetzt wurde. Message gibt 
						ein vordefiniertes Layout mittels HTML "p"-Tag und der Stylesheet-Class "msg" aus. Ist die 
						Nachricht in der Session vorhanden, nimmt das Tag an, dass die Nachricht zum einmaligen 
						Gebrauch vorhanden ist und löscht diese im Anschluss. Das interne Dmerce-Objekt qMessage, das 
						vom Message-Tag abgefragt wird, stellt eine Liste von Zeichenketten dar. Die Listenelemente 
						werden bei der Ausgabe per default mit "br"-Tags getrennt.</p>
					<p> Geplant ist eine Erweiterung des Messages-Tags durch zusätzliche Elemente, die die Formatierung 
						von Nachrichten weiter spezifizierbar machen. <ul> <li>header: für die Ausgabe einer 
						Formatierung (Table Tag oder ul-Tag)</li> <li>prefix: für die Ausgabe vor einem Element</li> 
						<li>postfix: Ausgabe nach einem Element</li> <li>footer: Ausgabe nach allen Elementen</li> 
						</ul> </p>
					<h3>Beispiel</h3>
					<code annotation="einfaches Beispiel für das Message-Tag">&lt;q:message/&gt;</code>
					<p> könnte folgende Ausgabe erzeugen:</p>
					<code annotation="Beispiel-Ausgabe des Message-Tags">&lt;p class="msg"&gt;Das Feld Email darf nicht leer sein.&lt;p&gt;</code>
					<p>Bisher sind keine Attribute spezifiziert</p>
				</content>
			</section>
			<section>
				<title>Res-Tag</title>
				<content>
					<p> Das Res-Tag konvertiert den im Attribut "path" angegebenen, zum Anwendungskonext relativen Pfad 
						in einen absoluten Pfad um.</p>
					<h3>Beispiel</h3>
					<p> Ihre Anwendung liegt im Anwendungskontext <c>/beispiel</c>. Aus der Seite 
						<c>/beispiel/modul1/seite1.jsp</c> heraus möchten Sie auf eine andere Seite 
						<c>/beispiel/modul2/submodul1/seite2.jsp</c> verlinken. Dazu müssten Sie in <c>seite1.jsp</c> 
						entweder einen absoluten Link <c>/beispiel/modul2/submodul1/seite2.jsp</c> einfügen oder einen 
						relativen Pfad <c>../modul2/submodul1/seite2.jsp</c> verwenden. Der erste Ansatz bringt 
						Probleme mit sich, wenn Sie die Anwendung umbenennen und die Seiten plötzlich unter einem 
						anderen Kontext liegen. Dann müssten Sie alle absoluten Pfad-Angaben umbenennen. Durch den 
						zweiten Ansatz würde diese Prozedur zwar entfallen, ist jedoch sehr empfindlich gegenüber einer 
						Veränderung der Verzeichnisstruktur. Mit dem <c>&lt;q:res&gt;</c>-Tag können Sie diese Probleme umgehen.</p>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">path (required)</td>
								<td class="deco">Pfad zur gewünschten Ressource ab dem Grundpfad der Applikation</td>
							</tr>
						</table>
					</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für das Res-Tag">&lt;q:res path="/images/logo.png"/&gt;</code>
					<p>Das obige Beispiel bindet adaptiv immer vom Grundpfad aus gesehen <c>"logo.png"</c> im Images 
						Ordner ein, egal ob die Seite sich mehrere Hierarchien darunter befindet oder in der gleichen 
						Ebene liegt.</p>
				</content>
			</section>
			<section>
				<title>SetBrick-Tag</title>
				<content>
					<p> Das Setbrick-Tag legt innerhalb eines Usetemplate-Tags fest, mit welchen konkreten Inhalten die 
						Platzhalter in der verwendeten Design-Vorlage gefüllt werden sollen. Der Inhalt kann dabei 
						entweder durch einen Pfad zu einer Ressource eingebunden oder direkt innerhalb des 
						Setbrick-Tags spezifiziert werden. (Weitere Informationen finden Sie auch im Kapitel "Wichtige 
						Anwendungsfälle / Bricks - Das Bausteine-Konzept".)</p>
					<h3>Beispiel</h3>
					<code annotation="Einbindung von Inhalten einmal durch einen Link, einmal durch direkte Codierung">
&lt;q:usetemplate path="sommerdesign.jsp"&gt;
	&lt;q:setbrick name="center" path="catalog/start.jsp"/&gt;
	&lt;q:setbrick name="info"&gt;
		Haben Sie ein Anliegen? Rufen Sie an unter: 01234-5678.
	&lt;/q:setbrick&gt;
&lt;/q:usetemplate&gt;
					</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des zu setzenden Bausteins</td>
							</tr>
							<tr>
								<td class="deco">path (required)</td>
								<td class="deco">Pfad zum JSP-Template</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Uploadres-Tag</title>
				<content>
					<p> Dieses Tag erzeugt einen HTML-Link, der eine zuvor über das File-Tag hochgeladene Datei 
						referenziert. Das <c>uploadres</c>-Tag können Sie dabei in zwei verschiedenen Kontexten nutzen: 
						Innerhalb eines Execute-Tags (zur SQL-Abfrage) unter Angabe des Spaltennamens (ohne Suffixe), 
						in der der Dateiame für diese Datei gespeichert ist (genau genommen sind es ja zwei Spalten), 
						oder innerhalb eines Form-Tags (Formular) unter Angabe des Formularfeld-Namen, in dem die 
						beiden Dateinamen gespeichert sind.</p>
					<code annotation="Nutzung innerhalb eines Formulars">
&lt;qform:form name="form1"&gt;
	&lt;a href="&lt;q:uploadres name="foto"/&gt;"&gt;
		&lt;q:contextvar name="foto" index="1"/&gt;
	&lt;/a&gt;
&lt;/qform:form&gt;
					</code>
					<p> Bei dem obigen Beispiel ist das Formularfeld mit dem Namen "foto" in der <c>forms.xml</c> als 
						File-Typ definiert worden. Jetzt wird durch das <c>upoloadres</c>-Tag ein Link zu der 
						zugehörigen Datei erzeugt.</p>
					<code annotation="Nutzung innerhalb einer SQL-Abfrage">
&lt;qsql:execute id="query1"&gt;
    &lt;qsql:row&gt;
		&lt;a href="&lt;q:uploadres name="filename_foto"/&gt;"&gt;
			&lt;qsql:field name="filename_foto" file="true"/&gt;
		&lt;/a&gt;
    &lt;/qsql:row&gt;
&lt;/qsql:execute id="query1"&gt;
					</code>
					<p> Bei diesem Beispiel wird im Attribut "name" der erste Teil der beiden Tabellenspalten 
						verwendet, die die beiden Dateinamen für die hochgeladene Datei beinhalten. Bitte schauen Sie 
						für nähere Informationen dazu in das Kapitel "Definition von Formmaps" in der 
						workflows.xml-Referenz.</p>
					<p> Wenn Sie das Attribut <c>emptypath</c> spezifieren, können Sie das Tag dazu bewegen eine 
						alternative Ressource zu referenzieren, falls das angegebene Feld einmal leer sein sollte. Dies 
						ist vor allem dann sinnvoll, wenn Sie mit Hilfe dieses Links ein Bild referenzieren möchten. 
						Auf diese Weise kann bei nicht vorhandenen Bildern ein alternatives Bild angezeigt werden.</p>
					<code annotation="Angabe einer Alternativressource">
&lt;img src="&lt;q:uploadres name="filename_foto" emptypath="/images/notavailable.gif"/&gt;"&gt;/&gt;
</code>
					<p> Mit Hilfe der Tags <c>qsql:fieldempty</c> und <c>qsql:fieldnotempty</c> können Sie leicht 
						zusätzliche Kontrolle über das Layout erhalten. Bitte schauen dazu Sie in die entsprechenden 
						Kapitel.</p>
				</content>
			</section>
			<section>
				<title>Usebrick-Tag</title>
				<content>
					<p> Das Usebrick-Tag wird in Design-Vorlagen dazu verwendet, um Platzhalter für dynamische Inhalte 
						zu erzeugen. Entwickeln Sie ein Design, das beispielsweise in allen Seiten Ihrer Anwendung 
						verwendet werden soll, müssen lediglich bestimmte Teile durch konkrete Inhalte ersetzt werden. 
						Damit Sie das Design später auch ohne größeren Aufwand durch eine andere ersetzen können, 
						sollten Sie eine zentrale Design-Vorlage festlegen, in der lediglich das grafische Aussehen, 
						nicht aber die konkreten Inhalte der Seite festgelegt werden. An Stelle der konkreten Inhalte 
						setzen Sie nun dieses Usebrick-Tag.</p>
					<p> Um die Design-Vorlage zu verwenden werden die Tags Usetemplate und Setbrick verwendet. Bitte 
						schauen Sie daher auch in die Dokumentation dieser beiden Tags. (Weitere Informationen finden 
						Sie auch im Kapitel "Wichtige Anwendungsfälle / Bricks - Das Bausteine-Konzept".)</p>
					<code annotation="Beispiel-Design-Vorlage">
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;&lt;q:usebrick name="title"/&gt;&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;table&gt;
			&lt;tr&gt;
				&lt;td width="100px"&gt;&lt;q:usebrick name="left_menu"/&gt;&lt;/td&gt;
				&lt;td width="*"&gt;&lt;q:usebrick name="main_content"/&gt;&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/table&gt;
	&lt;/body&gt;
&lt;/html&gt;						
					</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Hier legen Sie fest, wie der Platzhalter benannt werden soll. (Unter 
									diesem Namen referenzieren Sie später in dem Setbrick-Tag diesen Platzhalter.)</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Usetemplate-Tag</title>
				<content>
					<p> Das Usetemplate-Tag bindet eine Design-Vorlage ein, die zum Rendern dieser Seite verwendet 
						werden soll. Durch die in diesem Tag enthaltenen Setbrick-Tags legen Sie fest, mit welchen 
						konkreten Inhalten die Bausteine in der Design-Vorlage gefüllt werden sollen. In der 
						Design-Vorlage legen Sie mittels UseBrick-Tags fest, an welche Stelle die Bausteine des 
						Inhaltes eingefügt werden sollen. Schauen Sie bitte auch in die Dokumentation des Setbrick-Tags 
						und des Usebrick-Tags. (Weitere Informationen finden Sie auch im Kapitel "Wichtige 
						Anwendungsfälle / Bricks - Das Bausteine-Konzept".)</p>
					<h3>Beispiel</h3>
					<code annotation="Ein Beispiel für die Einbindung einer Design-Vorlage">
&lt;q:usetemplate path="templates/vorlage.jsp"&gt; 
  &lt;q:setbrick name="header" path="bricks/header.jsp/&gt; 
  &lt;q:setbrick name="footer" path="bricks/footer.jsp/&gt; 
&lt;/q:usetemplate&gt; 
					</code>
					<p> In diesem Beispiel wird eine Design-Vorlage <c>templates/vorlage.jsp</c> eingebunden, in der 
						zwei Platzhalter mit den Namen <c>header</c> und <c>footer</c> vorgesehen sind. Die 
						Setbrick-Tags legen fest, dass an Stelle des Platzhalters <c>header</c> die konkrete Seite 
						<c>bricks/header.jsp</c> und an Stelle des Platzhalters <c>footer</c> die Seite 
						<c>bricks/footer.jsp</c> eingefügt werden soll.</p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">path (required)</td>
								<td class="deco">Kontextrelativer Pfad zur Design-Vorlage, welche das Layout der 
									Anwendung zentral festlegt.</td>
							</tr>
						</table>
					</p>
					</content>
			</section>
			<section>
				<title>Var-Tag</title>
				<content>
					<p> Das Var-Tag gibt den Wert einer Variable aus dem Request- oder Session-Scope aus. Dies ist nützlich, um z.B. Request-Parameter 
						aus dem URL in eine SQL-Abfrage zu integrieren.</p>
					
					<p> Ist in beiden Scopes die Variable mit dem angegebenen Namen vorhanden, hat die Variable aus dem Request-Scope Vorrang. 
						Die Variable wird durch Benutzung dieses Tags nicht gelöscht.</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für das Var-Tag">&lt;q:var name="msg"/&gt;</code>

					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name der Variablen, deren Inhalt ausgegeben werden soll</td>
							</tr>
							<tr>
								<td class="deco">scope (optional)</td>
								<td class="deco">Zulässige Werte: request, scope<br/>Hier können Sie explizit bestimmen, aus welchem Scope nach der Variable gesucht werden soll.</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Workflowlink-Tag</title>
				<content>
					<p> Dieses Tag erzeugt einen HTML-Link, der zum Ansprechen eines Workflows benötigt wird. Sie 
						müssen dazu lediglich die ID des Workflows kennen. Falls gewünscht, können Sie durch das 
						Attribut <c>restart</c> sicherstellen, dass der angegebene Workflow auf jeden Fall neu 
						gestartet wird. Der Inhalt dieses Tags wird als JSP-Code ausgewertet und in das resultierende 
						<c>&lt;a href="..."&gt;</c> eingebunden.</p>
					<code annotation="Erzeugung eines Workflow-Links">
&lt;q:workflowlink id="fooWorkflow" restart="true"&gt;
    &lt;img src="start.jpg"&gt;
&lt;/q:workflowlink&gt;
					</code>
					<p> Durch diesen Code wird ein Link erzeugt, der den Workflow mit der ID "fooWorkflow" anspricht. 
						Der genaue resultierende Code lautet dann:</p>
					<code annotation="Resultierender HTML-Code">
&lt;a href="workflow.do?qWorkflow=fooWorkflow&amp;restart"&gt;
    &lt;img src="start.jpg"&gt;
&lt;/a&gt;
					</code>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">id (required)</td>
								<td class="deco">ID des Ziel-Workflows</td>
							</tr>
							<tr>
								<td class="deco">restart (optional)</td>
								<td class="deco">Zulässige Werte: true/false<br/>Legt fest, ob der Workflow neu 
									gestartet werden soll, falls er bereits läuft.</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
		</section>
		<section>
			<title>SQL-Tags</title>
			<content>
				<dmerce/> unterstützt die Datenabfrage von allen JDBC-fähigen Datenbanken.
				<code annotation="Beispiel für eine SQL-Abfrage">
&lt;qsql:prepare id="query1"&gt; 
  SELECT * FROM dmerce_kunde WHERE dk_kundennr=1 
&lt;/qsql:prepare&gt;
&lt;qsql:execute id="query1"&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td colspan="5"&gt;
        &lt;qsql:rowcount/&gt; Einträge gefunden
      &lt;/td&gt;
    &lt;/tr&gt; 
    &lt;qsql:row&gt; 
      &lt;tr class="tr&lt;qsql:alternate&gt;"&gt; 
        &lt;td&gt;&lt;qsql:field name="dk_name"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;qsql:field name="dk_vorname"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;qsql:field name="dk_email"/&gt;&lt;/td&gt;
        &lt;td&gt;
          &lt;qsql:edit workflow="register" key="dk_kundennr"&gt;
            edit
          &lt;/qsql:edit&gt;
        &lt;/td&gt;
        &lt;td&gt;
          &lt;qsql:delete table="dmerce_kunde" key="dk_kundennr"/&gt;
            löschen
          &lt;/qsql:delete&gt;
        &lt;/td&gt; 
      &lt;/tr&gt; 
    &lt;/qsql:row&gt;  
  &lt;/table&gt;
&lt;/qsql:execute&gt;
				</code>	
				<p>Das obige Beispiel beschreibt eine
				typische Listenausgabe mit Editiermöglichkeit. Es wird eine
				SQL-Abfrage vorbereitet und ausgeführt, die Zeilen des
				Ergebnisses werden in einer Tabelle ausgegeben, und mit Links
				zum Bearbeiten und Löschen versehen. Das <c>Message-Tag</c> fragt eine
				eventuell vorhandene Nachricht ab, die vom <c>delete-Tag</c> gesetzt
				werden kann.</p>
				<p>Tags in der qsql-Bibliothek</p>
				<ul>
					<li>prepare: speichert eine Abfrage unter dem mit <c>id</c> angegebenen Namen ab</li>
					<li>parameter: setzt einen Parameter des PreparedStatements, das mit <c>id</c> im PageContext existiert</li>					
					<li>execute: führt die gespeicherte Abfrage aus</li>
					<li>rowcount: gibt die Anzahl der Datenbankeinträge des Ergebnisses zurück</li>
					<li>row:repeating-Tag zum Durchgehen der Datensätze</li>
					<li>field: gibt den	Wert eines Feldes mit dem Namen "name" aus</li>
					<li>delete: erstellt einen Link zum Löschen eines Datensatzes</li>
					<li>edit:erstellt einen Link zum Editieren eines Datensatzes</li>
					<li>alternate: erzeugt Ausgabe 1 oder 2 in alternierender Folge, abhängig von der Datenbankzeile</li>
					<li>number: nummeriert die Ausgabe einer Tabelle</li>
				</ul>
			</content>
			<section>
				<title>Alternate-Tag</title>
				<content>
					<p>Das <c>Alternate-Tag</c> ist zur Zeit nur in der SQL-Taglib von <dmerce/> vorhanden.</p>
					<p>Es erzeugt abwechselnd die Ausgaben "1" und "2".</p>
					<p>Sie können mit diesem Tag beispielsweise eine automatische zeilenweise wechselnde Formatierung 
						verwenden, indem Sie das <c>Alternate-Tag</c> mit einer CSS-Klasse verbinden.</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für die Verwendung des Alternate Tags zur Formatierung in Stylesheets">...
&lt;qsql:row&gt;
  &lt;tr class="background&lt;qsql:alternate/&gt;"&gt;
&gt;/qsql:row&gt;</code>
					<p>Der obige Code erzeugt dann den folgenden HTML-Code:</p>
					<code annotation="Im Wechsel werden die Styles 'background1' und 'background2' verwendet.">
&lt;tr class="background1"&gt;... 
&lt;tr class="background2"&gt;...
&lt;tr class="background1"&gt;
...</code>
				</content>
			</section>
			<section>
				<title>DateField-Tag</title>
				<content>
					<p> <strong>DEPRECATED!</strong> Bitte verwenden Sie das Field-Tag, um Datumsfelder anzuzeigen.</p>
					<p> Das <c>DateField-Tag</c> kann innerhalb eines <c>Row-Tag</c>s verwendet werden und gibt den 
						Wert eines Datumsfeldes aus der Datenbank aus. Die Tabellenspalte in der Datenbank muss ein 
						Datumstyp sein, der über JDBC java.sql.Date, java.sql.Time oder oracle.sql.TIMESTAMP 
						zurückgibt. </p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für das DateField-Tag">&lt;qsql:row&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;qsql:datefield name="field_name" format="dd.MM.yyyy"/&gt;&lt;/td&gt;
  &lt;/tr&gt; 
&lt;/qsql:row&gt;</code>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name der Datenbankspalte an, aus der der entsprechende	Datumswert ausgelesen werden soll</td>
							</tr>
							<tr>
								<td class="deco">format (optional)</td>
								<td class="deco">Ausgabeformat für den Datumswert. Die Syntax, nach der dieses Attribut festgelegt werden muss,
						ist identisch mit der Syntax der Standard-Java-Klasse <c>java.text.SimpleDateFormat</c></td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Delete-Tag</title>
				<content>
					<p><c>q:delete</c> erzeugt einen Link, der zum Löschen eines Datensatzes verwendet werden kann. Der 
						Inhalt dieses Tags wird als JSP-Code ausgwertet und in den erzeugten Links (also den <c>&lt;a 
						href="..."&gt;</c>-Tag) übernommen.</p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">table (required)</td>
								<td class="deco">Name der Datenbanktabelle, aus der ein Datensatz gelöscht werden soll.</td>
							</tr>
							<tr>
								<td class="deco">key (optional)</td>
								<td class="deco">Name der Primary-Key-Spalte. Falls Sie hier keine Angaben machen, wird 
									angenommen, dass die Primary-Key-Spalte "id" heißt.</td>
							</tr>
							<tr>
								<td class="deco">template (optional)</td>
								<td class="deco">Pfad zur anzuzeigenden Seite nach dem Löschen. Falls Sie hier keine 
									Angaben machen, kehrt die Anwendung nach dem Löschen zur aktuellen Seite 
									zurück.</td>
							</tr>
						</table>
					</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für die Verwendung von delete">&lt;qsql:delete table="addresses" key="add_id" template="list.jsp"&gt;
  delete
&lt;/qsql:delete&gt;</code>
					<p>Das Beispiel gibt einen Link in dieser Form aus:</p>
					<code annotation="Automatisch erzeugter HTML-Code für das Beispiel">
&lt;a href="delete?table=addresses&amp;id=add_id&amp;id=3&amp;qTemplate=list.jsp"&gt;
  delete
&lt;/a&gt;</code>
					<p>Der Body-Content ist optional. Bei Fehlen wird als Beschriftung für den Link "del" gesetzt.</p>
					<p><strong>Hinweis: </strong><c>qsql:delete</c> kann nur innerhalb eines row-Tags verwendet
						werden.</p>
				</content>
			</section>
			<section>
				<title>Edit-Tag</title>
				<content>
					<p> Das <c>Edit-Tag</c> erzeugt einen Link, der einen zur Bearbeitung eines Datensatzes vorgesehen 
						Workflow startet. (Der Workflow muss dafür passend zu diesem Formular eine Aktion vom Typ 
						"maintain" beinhalten.) Der Inhalt dieses Tags wird als JSP-Code ausgwertet und in den 
						erzeugten Links (also den <c>&lt;a href="..."&gt;</c>-Tag) übernommen.</p>
					<p> Der Body-Content ist optional, bei Fehlen wird als Beschriftung für den Link "edit" gesetzt.</p>
					<h3>Beispiel</h3>
					<code>&lt;qsql:edit workflow="register" key="kundennr"/&gt;</code>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">workflow (required)</td>
								<td class="deco">Workflow-ID aus der Workflows-XML</td>
							</tr>
							<tr>
								<td class="deco">key (required)</td>
								<td class="deco">Name der Primary-Key-Spalte</td>
							</tr>
						</table>
					</p>
					<p><strong>Hinweis: </strong>Das Edit-Tag kann nur innerhalb eines Row-Tags verwendet werden.</p>
				</content>
			</section>
			<section>
				<title>Empty-Tag</title>
				<content>
					<p> Dieses Tag wird innerhalb eines Execute-Tags verwendet und wertet seinen Inhalt nur dann aus, 
						wenn die Abfragemenge des Execute-Tags leer war.</p>
					<p> Dieses Tag können Sie verwenden, um besondere Ausgaben zu erzeugen, falls keine Datensätze 
						vorhanden sind.</p>
					<p> Die Negation dieses Tags ist das NotEmpty-Tag.</p>
					<code annotation="Sonderausgabe bei leerer Abfragemenge">
&lt;qsql:execute id="query1"&gt;
	&lt;qsql:empty&gt;Liste leer.&lt;/qsql:empty&gt;
	&lt;qsql:notempty&gt;
		...
	&lt;/qsql:notempty&gt;
&lt;/qsql:execute&gt;						
					</code>
				</content>
			</section>
			<section>
				<title>Execute-Tag</title>
				<content>
					<p> Das Execute-Tag führt die Abfrage aus, die unter dem im Attribut <c>id</c> angegebenen Namen 
						abgespeichert worden ist. Die Vorbereitung einer solchen Abfrage wird durch das Prepare-Tag 
						vorgenommen. Die Ergebnismenge wird im Speicher vorgehalten, damit sie im Body dieses Tags 
						verwendet werden kann. Zum Durchlauf durch die Ergebnismenge verwenden Sie das Row-Tag.</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für das Execute-Tag">
&lt;qsql:execute id="query1"&gt;
	... hier Ausgabe der Ergebnismenge ...
&lt;/qsql:execute&gt;</code>
					<p>Hiermit wird die unter dem Namen <c>query1</c> gespeicherte Abfrage aufgerufen und ausgeführt.</p>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">id (required)</td>
								<td class="deco">Name der duch das Prepare-Tag vorbereiteten SQL-Abfrage</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Field-Tag</title>
				<content>
					<p>Das <c>Field-Tag</c> steht innerhalb eines Row-Tags und liest
						eine Spalte aus der aktuellen Datenbankzeile in der
						Ergebnismenge aus.</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für die Verwendung des field-Tags">&lt;qsql:row&gt; 
  &lt;qsql:field name="vorname"/&gt; 
&lt;/qsql:row&gt;</code>
					<p>Das oben angegebene Beispiel liest die Spalte <c>vorname</c> aus
						der Zeile aus und gibt den Wert dynamisch aus.</p>
					<code annotation="Beispiel für die Anwendung des field-Tags auf ein File-Upload-Feld">&lt;qsql:row&gt; 
  &lt;qsql:field name="foto" file="true"/&gt; 
&lt;/qsql:row&gt;</code>
					<p> Falls es sich bei der angegebenen Spalte um Spalten für die Aufnahme von File-Upload-Namen 
						sind, müssen Sie die in der <c>properties.xml</c> definierten Suffixe für die 
						Fileupload-Spalten weglassen und zusätzlich das Attribut "file" auf true setzen. Dadurch sieht 
						das Tag automatisch in der Spalte für den ursprünglichen Dateinamen nach und gibt ihn aus.</p>
					<p> Das <c>Field-Tag</c> kann auch in Verbindung mit einem Datumsfeld verwendet werden. Die 
						Tabellenspalte in der Datenbank muss ein Datumstyp sein, der über JDBC java.sql.Date, 
						java.sql.Time oder oracle.sql.TIMESTAMP zurückgibt. </p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Identifier für das Feld aus der forms.xml</td>
							</tr>
							<tr>
								<td class="deco">file (optional)</td>
								<td class="deco">Setzen Sie dieses Attribut auf <strong>true</strong>, falls es sich 
									bei der Spalte um ein File-Upload-Feld handelt. Dadurch berechnet das Tag 
									automatisch die korrekten realen Spaltennamen.</td>
							</tr>
							<tr>
								<td class="deco">format (optional)</td>
								<td class="deco">Nur relevant für Datumsfelder: Hier können Sie das Ausgabeformat für 
									das Datum festlegen. Die genaue Syntax entnehmen Sie bitte der 
									Java-API-Dokumentation der Klasse java.text.SimpleDateFormat.</td>
							</tr>
							<tr>
								<td class="deco">precision (optional)</td>
								<td class="deco">Nur relevant für numerische Felder: Legt die genaue Anzahl der 
									anzuzeigenden Nachkommastellen fest.</td>
							</tr>
							<tr>
								<td class="deco">maxprecision (optional)</td>
								<td class="deco">Nur relevant für numerische Felder: Legt die maximale Anzahl der 
									anzuzeigenden Nachkommastellen fest.</td>
							</tr>
							<tr>
								<td class="deco">minprecision (optional)</td>
								<td class="deco">Nur relevant für numerische Felder: Legt die minimale Anzahl der 
									anzuzeigenden Nachkommastellen fest.</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Fieldempty-Tag</title>
				<content>
					<p> Mit diesem Tag können Sie bestimmte Inhalte auf einer Seite ausgeben lassn, falls das 
						zugehörige Datenbankfeld leer ist, d.h. den Wert NULL oder einen leeren String beinhaltet.</p>
					<p>
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name der Spalte, die untersucht werden soll.</td>
							</tr>
							<tr>
								<td class="deco">file (optional)</td>
								<td class="deco">Setzen Sie dieses Attribut auf <strong>true</strong>, falls es sich 
									bei der Spalte um ein File-Upload-Feld handelt.</td>
							</tr>
						</table>
					</p>
					<h3>Beispiel</h3>
					<code>
&lt;qsql:fieldempty name="email"&gt;
	keine Emailadresse angegeben
&lt;/qsql:fieldempty&gt;
					</code>
					<p> In diesem Beispiel wird der Text "keine Emailadresse angegeben" nur dann ausgegeben, falls die 
						Tabellenspalte "email" leer ist. </p>
					<h3>Beispiel</h3>
					<code>
&lt;qsql:fieldempty name="foto" file="true"&gt;
	kein Foto angegeben
&lt;/qsql:fieldempty&gt;
					</code>
					<p> Falls es sich bei dem angegebenen Feld um ein File-Upload-Feld handelt, müssen Sie das Attribut 
						<c>file</c> auf true setzen, damit das Tag die realen Spaltennamen korrekt berechnet. </p>
				</content>
			</section>
			<section>
				<title>Fieldnotempty-Tag</title>
				<content>
					<p> Mit diesem Tag können Sie bestimmte Inhalte auf einer Seite ausgeben lassn, falls das zugehörige 
						Formularfeld nicht leer ist, d.h. nicht NULL und kein leerer String ist.</p>
					<p> Falls es sich bei dem angegebenen Feld um ein File-Upload-Feld handelt, müssen Sie das Attribut 
						"file" auf true setzen, damit das Tag die realen Spaltennamen korrekt berechnet. </p>
					<p>
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name der Spalte, die untersucht werden soll.</td>
							</tr>
							<tr>
								<td class="deco">file (optional)</td>
								<td class="deco">Setzen Sie dieses Attribut auf <strong>true</strong>, falls es sich 
									bei der Spalte um ein File-Upload-Feld handelt.</td>
							</tr>
						</table>
					</p>
					<h3>Beispiel</h3>
					<code>
&lt;qsql:fieldnotempty name="foto" file="true"&gt;
	&lt;img src=.../&gt;
&lt;/qsql:fieldnotempty&gt;
					</code>
					<p> In diesem Beispiel wird das Foto nur dann geladen, falls das Formularfeld "foto" einen Wert 
						beinhaltet. </p>
				</content>
			</section>
			<section>
				<title>Nextrow Tag</title>
				<content>
					<p> Das Nextrow-Tag kann innerhalb eines Row-Tags verwendet werden und erzwingt innerhalb des 
						Abfrageergebnisses einen Zeilenwechsel. Das bedeutet dass innerhalb des Row-Tags direkt der 
						nächste Datensatz zur Ausgabe zur Verfügung steht, nicht erst bei nächsten Schleifendurchlauf 
						durch das Row-Tag. Damit können z.B. mehrspaltige Listenausgaben erzeugt werden. Bitte werfen 
						Sie einen Blick in das Beispiel zum Rownotempty-Tag.</p>
					<p> Das <c>Nextrow-Tag</c> verwendet keine Attribute.</p>
				</content>
			</section>
			<section>
				<title>Notempty-Tag</title>
				<content>
					<p> Dieses Tag wird innerhalb eines Execute-Tags verwendet und wertet seinen Inhalt nur dann aus, 
						wenn die Abfragemenge des Execute-Tags nicht leer war.</p>
					<p> Dieses Tag können Sie verwenden, um eine Ausgabe nur dann zu erzeugen, falls Datensätze 
						vorhanden sind.</p>
					<p> Die Negation dieses Tags ist das Empty-Tag.</p>
					<code annotation="Sonderausgabe bei leerer Abfragemenge">
&lt;qsql:execute id="query1"&gt;
	&lt;qsql:empty&gt;Liste leer.&lt;/qsql:empty&gt;
	&lt;qsql:notempty&gt;
		&lt;table&gt;
			...
		&lt;/table&gt;
	&lt;/qsql:notempty&gt;
&lt;/qsql:execute&gt;						
					</code>
				</content>
			</section>
			<section>
				<title>Number-Tag</title>
				<content>
					<p> Mit Hilfe des Number-Tags können Sie eine Tabellenausgabe automatisch durchnummerieren 
						lassen. Es kann nur innerhalb eines Row-Tags verwendet werden.</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für eine automatisch nummerierte Liste">
&lt;table cellpadding=2 cellspacing=3 border=1&gt; 
&lt;qsql:row&gt;
  &lt;tr class="tdbg&lt;qsql:alternate/&gt;"&gt;
    &lt;td&gt;&lt;qsql:number/&gt;&lt;/td&gt;
    &lt;td&gt;&lt;qsql:field name="kundennr"/&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;qsql:field name="name"/&gt;&lt;/td&gt; 
    &lt;td&gt;&lt;qsql:field name="vorname"/&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
&lt;/qsql:row&gt; 
&lt;/table&gt;</code>
					<p>Das obige Beispiel würde folgenden HTML-Quelltext erzeugen:</p>
					<code annotation="Erzeugter HTML Code. Die Nummerierung beginnt bei 1">
&lt;table cellpadding=2 cellspacing=3 border=1&gt; 
&lt;tr&gt;
  &lt;th&gt;&#x26;nbsp;&lt;/th&gt; 
  &lt;th&gt;Kunden-Nr.&lt;/th&gt; 
  &lt;th&gt;Name&lt;/th&gt; 
  &lt;th&gt;Vorname&lt;/th&gt; 
&lt;/tr&gt;
&lt;tr&gt; 
  &lt;td&gt;1&lt;/td&gt; 
  &lt;td&gt;123&lt;/td&gt;
  &lt;td&gt;Hasenfuß&lt;/td&gt;
  &lt;td&gt;Ottokar&lt;/td&gt;
&lt;/tr&gt; 
&lt;tr&gt;
  &lt;td&gt;2&lt;/td&gt;
  &lt;td&gt;125&lt;/td&gt;
  &lt;td&gt;Mustermann&lt;/td&gt;
  &lt;td&gt;Gabi&lt;/td&gt; 
&lt;/tr&gt;
&lt;/table&gt;</code>
				<p>Die Nummerierung beginnt bei "&lt;td&gt;1&lt;/td&gt;".</p>
				<p>Das <c>Number-Tag</c> erwartet keine Parameter.</p>
				</content>
			</section>
			<section>
				<title>Prepare-Tag</title>
				<content>
					<p> Das Prepare-Tag bereitet eine SQL-Abfrage zum späteren Ausführung innerhalb einer JSP vor. Sie 
						können im Body dieses Tags die SQL-Abfrage explizit formulieren. Dabei können Sie dynamisch 
						Parameter setzen, indem Sie Standard-JSP-Code oder beispielsweise die dmerce-eigenen Var-Tags 
						und ContextVar-Tags verwenden.</p>
					<p>
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">id (required)</td>
								<td class="deco">Name, unter dem die SQL-Abfrage gespeichert werden soll.</td>
							</tr>
						</table>
					</p>
					<h3>Beispiel 1</h3>
					<code annotation="Beispiel für das Prepare-Tag">
&lt;qsql:prepare id="query1"&gt; select * from addresses &lt;/qsql:prepare&gt;
					</code>
					<h3>Beispiel 2</h3>
					<p> Die Abfrage kann auch durch weitere Tags erweitert werden.</p>
					<code annotation="Erweiterung eines sql-Tags durch weitere dmerce-Tags">
SELECT * FROM addresses WHERE category=&lt;q:var name="category"/&gt;
					</code>
				</content>
			</section>
			<!--
			<section>
				<title>parameter Tag</title>
				<content>
					<p>
					Der Parameter Tag kann nur innerhalb des Prepare Tags
					verwendet werden. Es erweitert das prepare Tag um dynamische
					Parameter, die auch erst zur Laufzeit festgelegt werden
					können oder in übersichtlicher Form angegeben werden sollen.
					Die unteren Beispiele sind als Muster gedacht. </p>
					<code>&lt;qsql:prepare id="query1" sql-query-id="query1"&gt;
&lt;parameter varname="id"/&gt; 
&lt;parameter type="name"/&gt; 
&lt;/qsql:prepare&gt; 
					</code>
					<code>
&lt;qsql:prepare id="query1" 
	query="select * from addresses where id=? and hello=?"&gt; 
  &lt;parameter varname="id"&gt;&lt;/parameter&gt; 
  &lt;parameter type="string"&gt;&lt;q:var name="id"/&gt;&lt;/parameter&gt; 
&lt;/qsql:prepare&gt;</code>
<code>
&lt;qsql:prepare id="query1"&gt;
select * from addresses_view 
  where id=&lt;q:var name="id"/&gt; 
    and hello='&lt;q:var name="hello"/&gt;' 
    and valid=1 
&lt;/qsql:prepare&gt;
</code>
				</content>
			</section>
			-->
			<section>
				<title>Row-Tag</title>
				<content>
					<p>Das Row-Tag wird innerhalb des Execute-Tags verwendet und durchläuft alle Datensätze der 
						Ergebnismenge. Bei jedem Durchlauf wird der Body dieses Tags ausgewertet. Auf diese Weise 
						können Sie eine Liste von Datensätzen erzeugen.</p>
					<h3>Beispiel</h3>
					<code annotation="Einfache Erzeugung von Tabellenzeilen">
&lt;table&gt;
  &lt;qsql:row&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;qsql:field name="dk_name"/&gt;&lt;/td&gt;
    &lt;/tr&gt; 
  &lt;/qsql:row&gt;
&lt;/table&gt;
</code>
				</content>
			</section>
			<section>
				<title>Rowcount-Tag</title>
				<content>
					<p> Das Rowcount-Tag wird innerhalb eines Execute-Tags verwendet und gibt die Gesamt-Anzahl der 
						Datensätze in der Ergebnismenge aus.</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für das rowcount-Tag">
&lt;qsql:execute id="query1"&gt;
  &lt;qsql:rowcount/&gt; Einträge gefunden.
&lt;/qsql:execute&gt;
					</code>
				</content>
			</section>
			<section>
				<title>Rowempty-Tag</title>
				<content>
					<p> Das Rowempty-Tag kann innerhalb eines Row-Tags verwendet werden und wertet seinen Body nur dann 
						aus, wenn die aktuelle Zeile in der Ergebnismenge nicht mehr gültig ist, d.h. kein gültiger 
						Datensatz mehr vorhanden ist. Ein Beispiel ist in der Dokumentation zum Rownotempty-Tag 
						beschrieben.</p>
				</content>
			</section>			
			<section>
				<title>Rownotempty-Tag</title>
				<content>
					<p> Das Rownotempty-Tag kann innerhalb eines Row-Tags verwendet werden und wertet seinen Body nur 
						dann aus, wenn die aktuelle Zeile in der Ergebnismenge gültig ist, d.h. ein gültiger Datensatz 
						vorhanden ist.</p>
					<h3>Beispiel</h3>
					<code annotation="Beispielcode zum RowNotEmpty-Tag">
...
&lt;qsql:row&gt;
&lt;tr&gt;
	&lt;td&gt;
		&lt;qsql:field name="vorname"/&gt; &lt;qsql:field name="name"/&gt;
	&lt;/td&gt;
	
	&lt;qsql:nextrow/&gt;

	&lt;td&gt;
	  &lt;qsql:rownotempty&gt;
		&lt;qsql:field name="vorname"/&gt; &lt;qsql:field name="name"/&gt;
	  &lt;/qsql:rownotempty&gt;
	  &lt;qsql:rowempty&gt;Leer&lt;/qsql:rowempty&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;/qsql:row&gt;						
...</code>
					<p>Das Beispiel zeigt eine zweispaltige Ausgabe. Innerhalb eines row-Tags kann mittels Nextrow-Tags 
						der Zeilenwechsel im Abfrageergebnis erzwungen werden. Greift man innerhalb des Row-Tags erneut 
						auf das Datenabfrageergebnis zu, so kann das Ende des Abfrageergebnis erreicht sein und damit 
						ist kein Datensatz mehr verfügbar. Dieses Tag verhindert eine benutzergestaltete Ausgabe, falls 
						kein gültiger Datensatz mehr vorhanden ist. </p>
				</content>
			</section>
		</section>
		<section>
			<title>Formular-Tags</title>
			<content>Formulare werden in <dmerce/> durch das Workflow- und Formular-
				Konzept wohldefiniert. Sie haben bei der Ausgabe die
				Möglichkeit, die Formulare auf verschiedene Weisen darzustellen.
				Dazu steht Ihnen die Tagbibliothek <c>qform</c> zur Verfügung. Der
				Prozess bei der Erstellung von Formularen ist zweigeteilt, in
				diesem Abschnitt wird die Präsentationsseite erläutert. Bitte
				entnehmen sie weitere Informationen den Abschnitt "Arbeiten mit
				Formularen". Die Formular-Taglib umfasst Tags für die Erstellung
				von Formularen und Interaktionselementen.
			</content>
			<section>
				<title>Button-Tag</title>
				<content>
					<p>Das Button-Tag rendert einen Knopf, der in Workflows verwendet werden kann.</p>
					<h3>Beispiel</h3>
					<code>&lt;qform:button text="OK"/&gt;</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">type (optional)</td>
								<td class="deco">Zulässige Werte: submit/reset<br/>Der Wert <strong>submit</strong> 
									führt die mit dem Knopf verbundene Aktion aus. <strong>reset</strong> hingegen 
									löscht lediglich die aktuellen Werte des Formulars.</td>
							</tr>
							<tr>
								<td class="deco">text (required)</td>
								<td class="deco">Beschriftung, die der Knopf tragen soll. Beachten Sie, dass diese in 
									der workflows.xml zur Identifikation der korrekten Aktion verwendet wird.</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Checkbox-Tag</title>
				<content>
					<p>Das <c>Checkbox-Tag</c> rendert eine Checkbox. Das mit der Checkbox verbundene Formularfeld muss 
						vom Typ <c>boolean</c> sein.</p>
					<h3>Beispiele</h3>
					<code>
&lt;qform:checkbox name="agb"/&gt; Ich stimme den AGBs zu.&lt;br/&gt;
&lt;qform:checkbox name="newsletter"/&gt; Ich möchte den Newsletter erhalten.
					</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des mit der Checkbox verbundenen Formularfeldes.</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Clearfield-Tag</title>
				<content>
					<p> Mit diesem Tag können Sie einen Link erzeugen, mit dessn Hilfe Sie ganz gezielt Formularfelder 
						im Workflow-Kontext resetten können. Nach Betätigung des Links werden Sie automatisch wieder 
						auf die vorher angezeigte Seite im Workflow geführt.</p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes</td>
							</tr>
							<tr>
								<td class="deco">formid (optional)</td>
								<td class="deco">ID des Formulars, in dem sich das Feld befindet.</td>
							</tr>							
							<tr>
								<td class="deco">pageid (optional)</td>
								<td class="deco">ID der Page, in der das Feld verwendet wird.</td>
							</tr>							
							<tr>
								<td class="deco">style (optional)</td>
								<td class="deco">optionale CSS-Style-Angaben</td>
							</tr>							
							<tr>
								<td class="deco">class (optional)</td>
								<td class="deco">optionale CSS-Style-Klasse</td>
							</tr>							
						</table>
					</p>
					<h3>Beispiel</h3>
					<p> Dieses Tag ist besonders nützlich in Formularen, die ein Fileupload-Feld beinhalten. Durch 
						dieses Tag kann einen Link erzeugt werden, der es ermöglicht, eine bereits hochgeladene Datei 
						aus dem Datensatz zu entfernen. </p>
					<code>
&lt;qform:file name="foto"/&gt;
&lt;form:clearfield name="foto"&gt; [del] &lt;/qform:clearfield&gt;
					</code>
				</content>
			</section>
			<section>
				<title>Errormessage-Tag</title>
				<content>
					<p> Das Errormessage-Tag rendert die Fehler, die bei der Eingabeprüfung festgestellt worden 
						sind. Dabei können Fehlermeldungen zu einzelnen Formularfeldern oder auch alle für gesamte 
						Formular ausgegeben werden.</p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (optional)</td>
								<td class="deco">Name des Formularfeldes. Wenn Sie dieses Attribut weglassen, werden 
									alle Fehlermeldungen zu diesem Formular ausgegeben.</td>
							</tr>
						</table>
					</p>
					<h3>Beispiel</h3>
					<code annotation="Ausgabe der Fehler zu einem einzelnen Feld">&lt;qform:text name="telefon"/&gt;
&lt;qform:errormessage name="telefon"/&gt;...</code>					
					<code annotation="Ausgabe aller Fehler zu einem Formular">&lt;qform:errormessage/&gt;</code>					
				</content>
			</section>
			<section>
				<title>Fieldempty-Tag</title>
				<content>
					<p> Mit diesem Tag können Sie bestimmte Inhalte auf einer Seite nur dann ausgeben lassen, falls das 
						zugehörige Formularfeld leer ist, d.h. keinen Wert beinhaltet.</p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes</td>
							</tr>
						</table>
					</p>
					<h3>Beispiel</h3>
					<code>
&lt;qform:fieldempty name="foto"&gt;
	kein Foto
&lt;/qform:fieldempty&gt;
					</code>
					<p> In diesem Beispiel wird der Text "kein Foto" nur dann ausgegeben, falls das Formularfeld "foto" 
						keinen Inhalt hat. </p>
				</content>
			</section>
			<section>
				<title>FieldNotEmpty-Tag</title>
				<content>
					<p> Mit diesem Tag können Sie bestimmte Inhalte auf einer Seite nur dann ausgeben lassen, falls das 
						zugehörige Formularfeld nicht leer ist, d.h. einen konkreten Wert besitzt.</p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes</td>
							</tr>
						</table>
					</p>
					<h3>Beispiel</h3>
					<code>
&lt;qform:fieldnotempty name="foto"&gt;
	&lt;img src=.../&gt;
&lt;/qform:fieldnotempty&gt;
					</code>
					<p> In diesem Beispiel wird das Foto nur dann geladen, falls das Formularfeld "foto" einen Wert 
						beinhaltet. </p>
				</content>
			</section>
			<section>
				<title>File-Tag</title>
				<content>
					<p>
						Das <c>File</c>-Tag dient zum Rendern von HTML-File-Upload-Feldern. Die hochgeladene Datei
						wird auf dem Server in einem zuvor festgelegten Verzeichnis gespeichert. Den Pfad können Sie
						beeinflussen, indem Sie in der <c>properties.xml</c> dem Schlüssel <c>fileupload.path</c>
						einen Wert zuweisen.
					</p>
					<p> Standardmäßig (in der Version 3.0 von <dmerce/>) wird die hochgeladene Datei umbenannt, indem 
						ein Zeitstempel vor den Dateinamen angehangen wird. Dadurch werden Konflikte durch doppelte 
						Dateinamen vermieden. </p>
					<code>
&lt;qform:form name="form1"&gt;
	...
	&lt;qform:file name="foto"/&gt;
	...
&lt;/qform:form&gt;						
					</code>
					<p> Durch diesen Code wird das Formularfeld "foto" den Original-Dateinamen und den Dateinamen auf 
						dem Server speichern. Der Zugriff auf diese Informationen erfolgt jedoch transparent, so dass 
						Sie niemals direkt auf die Werte eines <c>File</c>-Feldes zugreifen müssen. </p>
					<p> Beachten Sie bitte auch die Hinweise zu File-Feldern in der Referenz zur <c>workflows.xml</c>
						unter dem Punkt "Definition von Formmaps". Im Beispielprojekt "fileupload" können Sie genau
						nachvollziehen, wie das File-Uploading eingesetzt wird.</p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes (ohne Suffixe aus der properties.xml)</td>
							</tr>
							<tr>
								<td class="deco">style (optional)</td>
								<td class="deco">optionale CSS-Style-Angaben</td>
							</tr>							
							<tr>
								<td class="deco">class (optional)</td>
								<td class="deco">optionale CSS-Style-Klasse</td>
							</tr>							
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Form-Tag</title>
				<content>
					<p> Das Form-Tag dient zum Rendern eines Formulars, das in Verbindung mit einem Workflow verwendet 
						werden kann. Es enthält in der Regel weitere <dmerce/>-eigene Tags zum Rendern einzelner 
						Interaktionselemente wie Eingabefeldern, Checkboxen etc.</p>
					<p> Zu Testzwecken kann das Formular automatisch generiert werden, wenn Sie das Attribut 
						<c>autogenerate</c> auf <c>true</c> setzen. In dem Fall erzeugt <dmerce/> eine zweispaltige 
						Tabelle mit der Beschriftung der Felder in der linken Spalte und einem passenden 
						Interaktionselement in der rechten Spalte.</p>
					<h3>Beispiele</h3>
					<code annotation="Zwei Beispiele für die Verwendung des form-Tags">&lt;qform:form id="form1"&gt; 
						&lt;qform:form id="form2" autogenerate="true"/&gt;</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">id (required)</td>
								<td class="deco">ID des Formulars</td>
							</tr>
							<tr>
								<td class="deco">autogenerate (optional)</td>
								<td class="deco">Wenn dieses Attribut auf <strong>true</strong> gesetzt wird, wird das 
									gesamte Formular automatisch generiert.</td>
							</tr>
							<tr>
								<td class="deco">requiredstring (optional)</td>
								<td class="deco"> String, mit dem Pflichtfelder markiert werden sollen (default: *)</td>
							</tr>
							<tr>
								<td class="deco">markrequired (optional)</td>
								<td class="deco">String, mit dem fehlerhaft ausgefüllte Formularfelder markiert werden sollen</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Hidden-Tag</title>
				<content>
					<p> Das Hidden-Tag gibt ein HTML-Hidden-Feld aus, dessen Wert als Formularfeld wie bei den anderen 
						qform-Tags im Workflow-Kontext gespeichert werden soll. Das Attribut <c>name</c> gibt dabei den 
						Namen des Formularfeldes an. Mit <c>value</c> kann dem Hidden-Feld ein fester Wert zugewiesen 
						werden. Falls Sie dem Hidden-Feld einen Request-Parameter-Wert zuweisen möchten, spezifzieren 
						Sie einfach den Namen des entsprechenden Request-Parameters mit <c>contextvarname="foo"</c>. 
						Auf die gleiche Weise können Sie jeden Wert aus dem Workflow-Context als Hidden-Wert 
						übernehmen.</p>
					<code annotation="Hidden-Feld mit festem Wert">&lt;qform:hidden name="fooField" value="65"/&gt;</code>
					<code annotation="Hidden-Feld mit Wert aus dem Workflow-Context">&lt;qform:hidden name="fooField" contextvarname="kategorie"/&gt;</code>
					<p> Die Attribute <c>value</c> und <c>contextvarname</c> sind optional. Wenn Sie sie bei der 
						Verwendung dieses Tags weglassen, wird beim Rendern der Seite automatisch der aktuelle Wert des 
						Formularfeldes mit dem Namen <c>name</c> als <c>value</c> des Hidden-Feldes übernommen.<br/> 
						Das Attribut <c>value</c> hat vor dem Attribut <c>contextvarname</c> Vorrang. Gleichermaßen hat 
						das Attribut <c>contextvarname</c> Vorrang vor dem aktuellen Wert des Formularfeldes aus dem 
						Workflow-Context. <br/> Eine Anwendungsmöglichkeit hierfür ergibt sich, wenn der Wert eines 
						Formularfeldes z.B. in JavaScript-Code zur Verfügung stehen soll. Es ist natürlich auch 
						denkbar, dass per JavaScript-Code der Wert dieses Feldes verändert wird. </p>
					<p> Bitte beachten Sie, dass Hidden-Felder genauso wie die übrigen Formularfelder als 
						<c>field</c>-Elemente in der <c>forms.xml</c> spezifiziert werden müssen. </p>
					<p>					
						<table cellspacing="2">
							<tr><th class="deco">Attribut</th><th class="deco">Beschreibung</th></tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes</td>
							</tr>
							<tr>
								<td class="deco">value (optional)</td>
								<td class="deco">Explizit zu setzender Wert für das Hidden-Feld</td>
							</tr>							
							<tr>
								<td class="deco">contextvarname (optional)</td>
								<td class="deco">Name der Variable aus dem Workflow-Context, dessen Wert dem 
									Hidden-Feld zugewiesen werden soll.</td>
							</tr>							
						</table>
					</p>
					
				</content>
			</section>
			<section>
				<title>List-Tag</title>
				<content>
					<p>Das List-Tag rendert eine Liste, deren Erscheinungsbild von den Einstellungen zu dem zugehörigen 
						Formularfeld in der forms.xml stark abhängt. In HTML gibt es grundsätzlich zwei verschiedene 
						Listen: Listen mit Einfach- und Mehrfachauswahl. Normalerweise werden diese Listen durch 
						ComboBoxen bzw. Listenfelder dargestellt. Mit <dmerce/> können Sie diese Listen auch durch 
						RadioBox-Listen oder CheckboxListen darstellen lassen.</p>
					<p> Wie Sie Listenfelder mit Werten füllen können, erfahren Sie in der forms.xml-Referenz.</p>
					<h3>Beispiel</h3>
					<p>Mitglieder der Gruppe </p>
					<code>&lt;qform:list name="members"/&gt;</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes</td>
							</tr>
							<tr>
								<td class="deco">type (optional)</td>
								<td class="deco">Typ der Listendarstellung. Zur Verfügung stehen <strong>list</strong> 
									zur Darstellung einer RadioButtonlist (Einfachauswahl) bzw. einer Checkboxliste 
									(Mehrfachauswahl) und <strong>combo</strong> zur Darstellung einer Dropdown-Box 
									(Einfachauswahl) bzw. Listbox (Mehrfachauswahl). Weiterhin können Sie den Typ 
									<strong>radio</strong> verwenden, um eine Liste von Ja/Nein-Radio-Buttons zu 
									erhalten.</td>
							</tr>
							<tr>
								<td class="deco">size (optional)</td>
								<td class="deco">Anzahl der sichtbaren Elemente in der Liste</td>
							</tr>
							<tr>
								<td class="deco">style (optional)</td>
								<td class="deco">optionale CSS-Style-Angaben</td>
							</tr>							
							<tr>
								<td class="deco">class (optional)</td>
								<td class="deco">optionale CSS-Style-Klasse</td>
							</tr>							
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Radio-Tag</title>
				<content>
					<p>Das Radio-Tag rendert eine Radio-Schaltfläche mit einer Ja/Nein-Entscheidungmöglichkeit.</p>
					<h3>Beispiel</h3>
					<p>Das Beispiel zeigt ein Beispiel aus einem medizinischen Formular.</p>
					<code annotation="Beispiel für ein Radio Tag">
&lt;qform:radio name="kopfschmerzen"/&gt; Kopfschmerzen in den letzten zwei Wochen?
&lt;qform:radio name="ausland"/&gt; Auslandsaufenthalt während des letzten halben Jahres?
					</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes</td>
							</tr>
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Text-Tag</title>
				<content>
					<p>Das Text-Tag rendert ein Standard-HTML-Eingabefeld.</p>
					<h3>Beispiel</h3>
					<code annotation="Beispiel für das Text-Tag">&lt;qform:text name="strasse"/&gt;</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes</td>
							</tr>
							<tr>
								<td class="deco">size (optional)</td>
								<td class="deco">Breite des Eingabefeldes</td>
							</tr>
							<tr>
								<td class="deco">maxlength (optional)</td>
								<td class="deco">Maximale Anzahl an Zeichen in diesem Eingabefeld</td>
							</tr>
							<tr>
								<td class="deco">style (optional)</td>
								<td class="deco">optionale CSS-Style-Angaben</td>
							</tr>							
							<tr>
								<td class="deco">class (optional)</td>
								<td class="deco">optionale CSS-Style-Klasse</td>
							</tr>							
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Textarea-Tag</title>
				<content>
					<p> Das <c>Textarea-Tag</c> rendert ein Text-Eingabefeld für längere Texteingaben. (z.B. für 
						Kommentare etc.)</p>
					<p>Mit den Attributen "rows" und "cols" wird die Größe des Feldes definiert.</p>
					<h3>Beispiel</h3>
					<code>
&lt;qform:textarea name="comment" rows="5" cols="28"/&gt;
					</code>
					<p>
						<table cellspacing="2">
							<tr>
								<th class="deco">Attribut</th>
								<th class="deco">Beschreibung</th>
							</tr>
							<tr>
								<td class="deco">name (required)</td>
								<td class="deco">Name des Formularfeldes</td>
							</tr>
							<tr>
								<td class="deco">row (optional)</td>
								<td class="deco">Anzahl der Zeilen des Eingabefeldes</td>
							</tr>
							<tr>
								<td class="deco">cols (optional)</td>
								<td class="deco">Anzahl der Spalten des Eingabefeldes</td>
							</tr>
							<tr>
								<td class="deco">style (optional)</td>
								<td class="deco">optionale CSS-Style-Angaben</td>
							</tr>							
							<tr>
								<td class="deco">class (optional)</td>
								<td class="deco">optionale CSS-Style-Klasse</td>
							</tr>							
						</table>
					</p>
				</content>
			</section>
			<section>
				<title>Beispiel für ein typisches Formular</title>
				<content>
					<code annotation="Beispiel für ein Formular">
&lt;qform:form id="formular"&gt; 
&lt;qform:errormessage/&gt;
&lt;table&gt; 
  &lt;tr&gt; 
    &lt;td&gt;Name&lt;/td&gt; 
    &lt;td&gt; &lt;qform:text name="name"/&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt;
    &lt;td&gt;Adresse&lt;/td&gt;
    &lt;td&gt;&lt;qform:text name="address"/&gt; &lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
	&lt;td&gt;Newsletter&lt;/td&gt; 
	&lt;td&gt;
	  &lt;qform:checkbox name="newsletter"/&gt; 
	&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;qform:button text="OK"/&gt; 
&lt;qform:button text="Übernehmen"/&gt; 
&lt;qform:button text="Abbrechen"/&gt; 
&lt;/qform:form&gt; 
					</code>
				</content>
			</section>
		</section>
	</section>
	
	
	
	<section>
		<title>forms.xml Referenz</title>
		<content>
			<h2>Zweck und Motivation der forms.xml</h2>
			<p>Die <c>forms.xml</c> ist die zentrale Konfigurationsdatei für Formulardefinitionen. Formulare werden in <dmerce/>-Anwendungen
			abstrakt definiert, d.h. es wird lediglich die Struktur eines Formulars festgelegt, ohne das spätere Aussehen im Browser
			festzulegen. Es werden außerdem keine Funktionen für Formulare festgelegt, da dies für die gesamte Anwendung in der <c>workflows.xml</c> geschieht.
			</p>
			<p>Der grundsätzliche Aufbau der <c>forms.xml</c> folgt der <a href="forms.xsd">hier downloadbaren XML-Schema-Definition</a>
			und sieht in der Regel so aus:
			</p>
			<code annotation="Grundsätzlicher Aufbau der forms.xml">
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;forms xmlns="http://www.1ci.de"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.1ci.de forms.xsd"&gt;

    &lt;form id=".."&gt;
        ...
    &lt;/form&gt;

    &lt;form id=".."&gt;
        ...
    &lt;/form&gt;
    
    ...
&lt;/forms&gt;
			</code>
			<p>Der Root-Tag ist "forms" und enthält mehrere "form"-Tags. Diese dienen zur konkreten Definition der
			Formulare. In den nächsten Kapiteln wird das Vorgehen noch näher beschrieben.
			</p>
		</content>
		<section>
			<title>Formulardefinition</title>
			<content>
				<h2>&lt;form&gt;</h2>
				<p>Definiert ein globales Formular innerhalb der Anwendung.<br/>
				Soweit nicht anders angegeben, sind alle Attribute und Tags REQUIRED.
				</p>
				<code annotation="Hinzunahme der field-Tags">
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;forms ... &gt;

    &lt;form id="ABC"&gt;
        &lt;name&gt;Formular ABC&lt;/name&gt;
        &lt;description&gt;Testformular&lt;/description&gt;
        &lt;formversion&gt;0.1&lt;/formversion&gt;

        &lt;field name="FeldA" ...&gt;
            ...
        &lt;/field&gt;

        &lt;field name="FeldB" ...&gt;
            ...
        &lt;/field&gt;

        ...
    &lt;/form&gt;

&lt;/forms&gt;</code>
				<p>Das Formular wird im XML-Format beschrieben. Die erste Zeile zeigt dies an.</p>
				<p>Das minimale Formular besteht aus einem forms-Element, und einem eingebettetten form-Element mit einer id.
					Definieren Sie darüber hinaus den Namen, die Beschreibung und mindestens ein Feld. Die Feldbeschreibung besteht mindestens aus dem Namen und dem Typ.</p>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@id</h3>
				<p>ID, die das Formular eindeutig innerhalb der gesamten forms.xml identifiziert.
				Über diese ID wird an verschiedenen Stellen in der Anwendung auf das Formular verwiesen.
				</p>
				<h3>&lt;name&gt;</h3>
				<p>Klartext-Name für das Formular.</p>
				<h3>&lt;description&gt;</h3>
				<p>Freitext-Beschreibung des Formulars</p>
				<h3>&lt;formversion&gt;</h3>
				<p>Versionsnummer für das Formular. (Nur zu internen Zwecken)</p>
				<h3>&lt;field&gt;</h3>
				<p>Feld-Definition (siehe entsprechendes Kapitel)</p>
			</content>
		</section>
		
		<section>
			<title>Feld-Definition</title>
			<content>
				<h2>&lt;field&gt;</h2>
				<p>Definiert ein Feld innerhalb eines Formulars.<br/>
				Soweit nicht anders angegeben, sind alle Attribute und Tags REQUIRED.
				</p>
				<code annotation="Aufbau einer Feld-Definition">
&lt;field name="hobby"&gt;
    &lt;description&gt;Hobbys (bis zu 3 auswählen)&lt;/description&gt;
    &lt;type&gt;string&lt;/type&gt;
    &lt;options&gt;
        ...
    &lt;/options&gt;
    &lt;constraints&gt;
        ...
    &lt;/constraints&gt;
&lt;/field&gt;
				</code>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@name</h3>
				<p>Name, der das Formularfeld eindeutig innerhalb des umgebenden Formulars identifiziert.
				Über diesen Namen wird an verschiedenen Stellen in der Anwendung auf das Formularfeld verwiesen.
				</p>
				<h3>@required</h3>
				<p>optional<br/>Zulässige Werte: true/false</p>
				<p>Gibt an, ob das Formularfeld REQUIRED ist. Bei Weglassen wird false angenommen.
				</p>
				<h3>&lt;description&gt;</h3>
				<p>Freitext-Beschreibung des Formularfeldes</p>
				<h3>&lt;type&gt;</h3>
				<p>Zulässige Werte: "string", "number", "boolean", "date", "file"</p>
				<p>Gibt an, von welchem Typ die Feldwerte sein dürfen. Das Einschränken mit "number", "date" oder "boolean"
				hat zur Folge, dass ungültige Werte beim Klick auf SUBMIT automatisch abgefangen werden.
				</p>
				<p>
					Der Typ "file" dient zum Rendern eines File-Upload-Feldes.
				</p>
				<h3>&lt;displayformat&gt;</h3>
				<p> Format-String, der in Verbindung mit dem Feldtyp "date" zur Formatierung des Datums verwendet werden kann.
					Dieser String wird direkt an den SimpleDateFormat von Java übergeben. Entnehmen Sie bitte der Dokumentation
					der Java-Api-Dokumentation zur Klasse java.text.SimpleDateFormat, welche Formate verwendet werden können.
				</p>
				<h3>&lt;displaytype&gt;</h3>
				<p>Bevorzugtes Interaktionselement <b>bei automatischer Generierung</b> des Formulars.
				</p>
				<h3>&lt;options&gt;</h3>
				<p>optional</p>
				<p>Definition von Auswahlmöglichkeiten bei Listen, Combo-Boxen, Checkboxen und Radiobuttons. (siehe entsprechendes Kapitel)</p>
				<h3>&lt;constraints&gt;</h3>
				<p>optional</p>
				<p>Definition von weiteren Einschränkungen bezüglich des Feldwertes (siehe entsprechendes Kapitel)</p>
			</content>
		</section>
		
		<section>
			<title>Definition von Optionen</title>
			<content>
				<h2>&lt;options&gt;</h2>
				<p>Definiert Auswahlmöglichkeiten für ein Formularfeld durch die in ihm enthaltenen &lt;option&gt;-Elementen.
				Dies ist bei Listen, Combo-Boxen, Checkbox-Gruppen und Radio-Buttons sinnvoll.
				</p>
				<p>Der &lt;option&gt;-Tag definiert eine Wahlmöglichkeit innerhalb eines &lt;options&gt;-Tags.<br/>
				Soweit nicht anders angegeben, sind alle Attribute und Tags REQUIRED.
				</p>
				<code annotation="Beispiel für ein Options Tag">
&lt;options&gt;
    &lt;option key="surfen"&gt;Surfen&lt;/option&gt;
    &lt;option key="reiten"&gt;Reiten&lt;/option&gt;
    &lt;option key="fussball"&gt;Fußball&lt;/option&gt;
    &lt;option key="tennis"&gt;Tennis&lt;/option&gt;
&lt;/options&gt;
				</code>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@sql</h3>
				<p>SQL-Query, durch den die Options ausgelesen werden können.</p>
				<p><hint><b>Hinweis:</b> Wenn SQL zum Auslesen von Optionen verwendet wird, können keine Optionen
				manuell per &lt;option&gt;-Tags definiert werden.</hint></p>
				<code annotation="Beispiel für eine SQL-Abfrage im Option-Teil">
&lt;options sql="SELECT * FROM tabelle1" sqlkey="id" sqlvalue="name"/&gt;</code>
				<p>Achten Sie noch darauf, falls Sie nicht mit dem Selector * arbeiten, dass sowohl die Spalte sqlkey als auch die Spalte sqlvalue name in der Abfrage vorkommen, für das obige Beispiel also mindestens
					SELECT id, name FROM tabelle1...</p>
				<h3>@sqlkey</h3>
				<p>Spalte aus der Query (@sql), die den internen Wert für das Formularfeld enthält.
				Dieser Wert wird ggf. in die Datenbank geschrieben.</p>
				<h3>@sqlvalue</h3>
				<p>Spalte aus der Query (@sql), die den anzuzeigenden Wert enthält.
				Dieser Wert wird dem Benutzer präsentiert.</p>
				<h3>&lt;option&gt;</h3>
				<p>optional</p>
				<p>Enthält den anzuzeigenden Wert für die Auswahlmöglichkeit.
				<p><hint><b>Hinweis:</b> Wenn Optionen manuell definiert werden, kann kein SQL zum Auslesen
				von Optionen per @sql verwendet werden.</hint></p>
				</p>
				<h3>&lt;option&gt;/@key</h3>
				<p>Wert, der durch den der angezeigte Wert repräsentiert wird. Dieser Wert wird intern in dem betroffenen Feld gehalten
				und wird dementsprechend ggf. auch in die Datenbank geschrieben. Er muss vom Typ her mit dem Feldtypen vereinbar sein.
				</p>
			</content>
		</section>
		
		<section>
			<title>Definition von Constraints</title>
			<content>
				<h2>&lt;constraints&gt;</h2>
				<p>Definiert Constraints für ein Formularfeld durch die in ihm enthaltenen &lt;constraint&gt;-Tags.
				Diese werden UND- verknüpft, d.h. für das betroffene Formularfeld gelten dann alle enthaltenen Constraints gleichzeitig.
				</p>
				<p>Der &lt;constraint&gt;-Tag definiert eine Einschränkung innerhalb eines &lt;constraints&gt;-Tags.<br/>
				Soweit nicht anders angegeben, sind alle Attribute und Tags REQUIRED.
				</p>
				<p>
				Die Definition von Constraints hat zur Folge, dass Verletzungen der Regeln beim Drücken auf SUBMIT abgefangen werden.
				</p>
				<code annotation="Constaints-Beispiel">
&lt;constraints&gt;
    &lt;constraint type="minselected"&gt;0&lt;/constraint&gt;
    &lt;constraint type="maxselected"&gt;2&lt;/constraint&gt;
&lt;/constraints&gt;
				</code>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>&lt;constraint&gt;/@type</h3>
				<p>Typ der Einschränkung. Zur Zeit werden folgende Typen unterstützt:</p>
				<table cellspacing="2">
					<tr><th class="deco">Typ</th><th class="deco">Beschreibung</th></tr>
					<tr>
						<td class="deco">minlength</td>
						<td class="deco">minimale Anzahl an Zeichen</td>
					</tr>
					<tr>
						<td class="deco">maxlength</td>
						<td class="deco">maximale Anzahl an Zeichen</td>
					</tr>
					<tr>
						<td class="deco">mininclusive</td>
						<td class="deco">kleinster noch erlaubter Wert (nur relevant für Felder vom Typ "number")</td>
					</tr>
					<tr>
						<td class="deco">maxinclusive</td>
						<td class="deco">größter noch erlaubter Wert (nur relevant für Felder vom Typ "number")</td>
					</tr>
					<tr>
						<td class="deco">scale</td>
						<td class="deco">Maximale Anzahl erlaubter Nachkommastellen (nur relevant für Felder vom Typ "number")</td>
					</tr>
					<tr>
						<td class="deco">format</td>
						<td class="deco">Formatvorgabe durch Regular-Expression *</td>
					</tr>
					<tr>
						<td class="deco">email</td>
						<td class="deco">prüft auf korrektes Format für eine Email-Adresse</td>
					</tr>
					<tr>
						<td class="deco">minselected</td>
						<td class="deco">Anzahl mindestens ausgewählter Optionen (nur relevant für Felder mit Options)</td>
					</tr>
					<tr>
						<td class="deco">maxselected</td>
						<td class="deco">Anzahl höchstens ausgewählter Optionen (nur relevant für Felder mit Options)</td>
					</tr>
				</table>
				<p>* Die Format Regel wird mithilfe von sogenannten <c>Regular Expressions</c> ausgedrückt. Bitte bemühen Sie 
						hierzu die einschlägige Literatur. Das Format für eine gültige eMail kann beschrieben werden durch folgende Regel: mindestens ein Zeichen, gefolgt von einem "@"-Symbol, erneut mindestens ein Zeichen, danach ein Punkt, abschließend mindestens ein Zeichen.
						Beachten Sie auch bitte, das in diesem Beispiel
						nur das Format der eMail-Adresse geprüft wird, nicht jedoch das tatsächliche Vorhandensein dieser eMailadresse auf einem Mailserver.
						Dazu bedarf es aufwändige Prüfroutinen, die nicht implementiert sind, und die nicht bei allen Mailservern funktionieren.</p>
				
				<h3>&lt;constraint&gt;/@description</h3>
				<p>optional</p>
				<p>Text, der in der Benutzeroberfläche angezeigt werden soll,
				um die Einschränkung für das Feld näher zu beschreiben.</p>
				<h3>&lt;constraint&gt;</h3>
				<p>Beinhaltet den Wert für die Einschränkung, der in Abhängigkeit von dem Constraint-Typen
				(@type) unterschiedliche Formate besitzt.
				</p>
				<table cellspacing="2">
					<tr><th class="deco">Typ</th><th class="deco">Zulässiger Taginhalt</th></tr>
					<tr>
						<td class="deco">minlength</td>
						<td class="deco">Integer</td>
					</tr>
					<tr>
						<td class="deco">maxlength</td>
						<td class="deco">Integer</td>
					</tr>
					<tr>
						<td class="deco">mininclusive</td>
						<td class="deco">Float (getrennt durch Dezimalpunkt ".")</td>
					</tr>
					<tr>
						<td class="deco">maxinclusive</td>
						<td class="deco">Float (getrennt durch Dezimalpunkt ".")</td>
					</tr>
					<tr>
						<td class="deco">scale</td>
						<td class="deco">Integer</td>
					</tr>
					<tr>
						<td class="deco">format</td>
						<td class="deco">
							String, der die Regular-Expression enthält.<br/>
							Weitere Informationen hierzu finden Sie in der Java-API-Dokumentation für die
							Klasse java.util.regex.Pattern.
						</td>
					</tr>
					<tr>
						<td class="deco">email</td>
						<td class="deco">leer</td>
					</tr>
					<tr>
						<td class="deco">minselected</td>
						<td class="deco">Integer</td>
					</tr>
					<tr>
						<td class="deco">maxselected</td>
						<td class="deco">Integer</td>
					</tr>
				</table>
			</content>
		</section>
		
	</section>


	<section>

		<title>workflows.xml Referenz</title>
		<content>
			<h2>Zweck und Motivation der workflows.xml</h2>
			<p>Die <c>workflows.xml</c> ist die zentrale Konfigurationsdatei, in der der Kontrollfluss der Anwendung festgelegt wird.
			Eine Abfolge von Formularen wird als <b><c>Workflow</c></b> bezeichnet und stellt einen in sich abgeschlossenen Use-Case dar.
			</p>
			<p>Der grundsätzliche Aufbau der workflows.xml folgt der <a href="workflows.xsd">hier downloadbaren XML-Schema-Definition</a>
			und sieht in der Regel so aus:
			</p>
			<code annotation="Grundsätzlicher Aufbau der workflow.xml">
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;workflows xmlns="http://www.1ci.de"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.1ci.de workflows.xsd"&gt;

    &lt;workflow id=".."&gt;
        ...
    &lt;/workflow&gt;

    &lt;workflow id=".."&gt;
        ...
    &lt;/workflow&gt;
    
    ...
&lt;/workflows&gt;
			</code>
			<p>Der Root-Tag ist &lt;workflows&gt; und enthält mehrere &lt;workflow&gt;-Tags.
			Jeder &lt;workflow&gt;-Tag definiert eine Abfolge von Formularen und kann auch Verzweigungen und Hintergrund-Aktionen enthalten.
			</p>
		</content>
		
		<section>
			<title>Definition von Workflows</title>
			<content>
				<h2>&lt;workflow&gt;</h2>
				<p>
				Definiert einen Workflow als Abfolge von Formularen und Seiten.
				<br/>Soweit nicht anders angegeben, sind alle Attribute REQUIRED.
				</p>
				<code>
&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;workflows ...&gt;

    &lt;workflow id="XYZ"&gt;
    
        &lt;page ...&gt;
            ...
        &lt;/page&gt;
        
        &lt;page ...&gt;
            ...
        &lt;/page&gt;
        
        ...
    &lt;/workflow&gt;

&lt;/workflows&gt;
				</code>
				<p>Ein Workflow besteht aus mehreren Seiten, die über &lt;page&gt;-Tags festgelegt werden.
				</p>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@id</h3>
				<p>ID, die den Workflow eindeutig innerhalb des <c>workflows</c> identifiziert.
				Über diese ID wird an verschiedenen Stellen in der Anwendung auf den Workflow verwiesen.
				</p>
			</content>
		</section>
		
		<section>
			<title>Definition von Pages</title>
			<content>
				<h2>&lt;page&gt;</h2>
				<p>Definiert eine Seite innerhalb eines Workflows. Eine Seite entspricht einer Eingabemaske
				in einem Formularfluss. Die Abfolge von Formularen wird dadurch definiert, dass ausgehend von
				einer Seite Übergänge per &lt;transition&gt;-Tag zu anderen Seiten definiert werden.
				</p>
				<code annotation="page-Definitionen mit Transitionen">
&lt;page id="PageA" template="page_a.jsp" formid="login" editable="false"&gt;

    &lt;formmap ...&gt;
        ...
    &lt;/formmap&gt;
    
    &lt;transition name="TransitionA" target="PageB ..."&gt;
        ...
    &lt;/transition&gt;
    
    &lt;transition name="TransitionB" target="PageC" ...&gt;
        ...
    &lt;/transition&gt;
    
    ...
&lt;/page&gt;
&lt;page id="PageB" template="page_b.jsp"/&gt;
&lt;page id="PageC" template="page_c.jsp"/&gt;
				</code>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@id</h3>
				<p>ID, die die Page eindeutig innerhalb des Workflows identifiziert.
				Über diese ID wird an verschiedenen Stellen im Workflow auf diese Page verwiesen.
				</p>
				<h3>@template</h3>
				<p>JSP-Seite, die mit dieser Seitendefinition verbunden ist. Diese JSP wird angezeigt,
				sobald diese Page innerhalb eines Formularflusses betreten wird.
				</p>
				<h3>@formid</h3>
				<p>optional</p>
				<p>ID des Formulars, das auf dieser Seite verwendet werden soll. Ein entsprechendes Formular mit
				dieser ID muss in der <c>forms.xml</c> definiert worden sein.
				</p>
				<h3>@editable</h3>
				<p>benötigt, falls @formid gesetzt
				<br/>zulässige Werte: true/false</p>
				<p>Legt fest, ob diese Formularseite sowohl zum Eintragen neuer Datensätze als auch zum Bearbeiten
				vorhandener Datensätze verwendet werden soll. Ist editable="true", so wird die Workflow-Engine automatisch
				Vorkehrungen treffen, damit bei Übergabe eines Requestparameters "id=[Primary-Key-Wert]" der entsprechende
				Datensatz in das Formular geladen wird.
				</p>
				<h3>&lt;formmap&gt;</h3>
				<p>optional</p>
				<p>Enthält das Mapping zwischen den auf dieser Page verwendeten Formularfeldern und der Datenbank.
				</p>
				<h3>&lt;transition&gt;</h3>
				<p>optional</p>
				<p>Ein Übergang zu einer anderen Page, ausgehend von der aktuellen Page.<br/>
				(siehe entsprechende Kapitel)
				</p>
			</content>
		</section>
		
		<section>
			<title>Definition von Formmaps</title>
			<content>
				<h2>&lt;formmap&gt;</h2>
				<p>Definiert ein Mapping zwischen den auf der Page verwendeten Formularfeldern und den
				zugehörigen Spalten in der Datenbank. Auf diese Weise kann ein Formular auf verschiedenen
				Pages mit verschiedenen Datenbankfeldern verknüpft werden.
				</p>
				<p> Bei einem Formularfeld, das zum Upload von Dateien vorgesehen ist, werden zwei Tabellenspalten in 
					der Datenbank benötigt. Eine Spalte nimmt den ursprüglichen Dateinamen auf, die andere nimmt den 
					Dateinamen auf, unter dem die Datei auf dem Server gespeichert ist. In der Formmap geben Sie für 
					File-Upload-Felder dennoch nur einen Wert für <c>dbfield</c> an. In der <c>properties.xml</c> 
					müssen Sie Suffixe angeben, die an den <c>dbfield</c>-Wert angehängt werden, um die beiden 
					benötigten Tabellenspalten voneinander zu unterscheiden.</p>
				<p> <strong>Ein Beispiel: </strong> Sie möchten die beiden Dateinamen in den Spalten "foto_original" 
					und "foto_server" speichern. In der Formmap geben Sie für das Feld <c>dbfield</c> lediglich den 
					Wert "foto" an. In der <c>properties.xml</c> weisen Sie dem Schlüssel 
					<c>fileupload.columnsuffix.originalfile</c> den Wert "_original" und dem Schlüssel 
					<c>fileupload.columnsuffix.serverfile</c> den Wert "_server" zu. Dadurch werden die Dateinamen für 
					das Fileupload automatisch in den richtigen Spalten gespeichert und aus ihnen geladen. </p>
				<code annotation="Aufbau des formmap-Tags">
&lt;formmap table="tablename" primarykey="primkeyname"&gt;
    &lt;fieldmap formfield="fieldA" dbfield="columnA"/&gt;
    &lt;fieldmap formfield="fieldB" dbfield="columnB"/&gt;
&lt;/formmap&gt;
				</code>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@table</h3>
				<p>Name der Tabelle in der Datenbank</p>
				<h3>@primarykey</h3>
				<p>Name der Primary-Key-Spalte in der ausgewählten Tabelle</p>
				<h3>&lt;fieldmap&gt;</h3>
				<p>Verknüpfung zwischen einem Formularfeld und einem Datenbankfeld</p>
				<h3>&lt;fieldmap&gt;/@formfield</h3>
				<p>Name des Formularfeldes, das mit einer Datenbankspalte verknüpft werden soll.
				Es wird angenommen, dass sich das hier spezifizierte Formularfeld in dem im übergeordneten
				&lt;page&gt;-Tag gewählten Formular befindet.
				</p>
				<h3>&lt;fieldmap&gt;/@dbfield</h3>
				<p>Name der Spalte, mit der das Formularfeld verknüpft werden soll.
				</p>
			</content>
		</section>
		
		<section>
			<title>Definition von Transitionen</title>
			<content>
				<h2>&lt;transition&gt;</h2>
				<p>
					Definiert einen Übergang von einer Page zu einer anderen.
					Eine Transition kann mit Bedingungen und Aktionen versehen werden, um komplexe
					Abläufe abzubilden. Die in einem &lt;page&gt;-Tag definierten Transitionen werden
					nacheinander darauf geprüft, ob die in ihnen enthaltenen Bedingungen erfüllt sind.
					Sobald eine Bedingung erfüllt ist, wird diese Transition betreten, die darin
					enthaltene Aktion ausgeführt und zur Ziel-Seite weitergeleitet. Nachfolgende
					Transitionen werden dann nicht mehr abgearbeitet.
				</p>
				<code annotation="Aufbau einer Transition">
&lt;transition name="TransitionA" target="PageB" validation="false"&gt;

    &lt;condition ...&gt;
        ...
    &lt;/condition&gt;
    
    &lt;action ...&gt;
        ...
    &lt;/action&gt;
    
&lt;/transition&gt;
				</code>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@name</h3>
				<p>Name, der die Transition innerhalb des Workflows eindeutig identifiziert.
				</p>
				<h3>@target</h3>
				<p>ID der Page, die nach Betreten der Transition aufgerufen werden soll.
				</p>
				<h3>@validation</h3>
				<p>optional<br/>zulässige Werte: true/false</p>
				<p>Legt fest, ob nach dem Drücken auf SUBMIT eine Eingabeprüfung anhand des Feldtyps
				und ggf. definierter CONSTRAINTS erfolgen soll. Default-Wert ist true.
				</p>
				<p><hint><b>Hinweis:</b> Die Validierung wird durchgeführt, <b>bevor</b> eine evtl. enthaltene
				Bedingung abgeprüft wird.</hint></p>
				<h3>&lt;condition&gt;</h3>
				<p>optional</p>
				<p>Definiert die Bedingung, die erfüllt sein muss, damit diese Transition betreten wird.
				Wird keine Bedingung angegeben, wird diese Transition immer betreten. (siehe entsprechendes Kapitel)
				</p>
				<h3>&lt;action&gt;</h3>
				<p>optional</p>
				<p>Definiert die Aktion, die bei Betreten der Transition ausgeführt werden soll.
				Wird keine Aktion angegeben, wird bei Betreten der Transition nichts ausgeführt und
				leitet lediglich zur Target-Seite weiter. (siehe entsprechendes Kapitel)
				</p>
			</content>
		</section>
		
		<section>
			<title>Definition von Bedingungen</title>
			<content>
				<h2>&lt;condition&gt;</h2>
				<p>Definiert eine Bedingung für eine Transition. Eine Bedingung wird durch
				eine Prüfoperation festgelegt, die nur <c>true</c> oder <c>false</c> als Rückgabewert
				besitzen kann.
				</p>
				<p>Grundsätzlich kann jede erdenkliche Bedingung durch eine Java-Klasse ausgedrückt werden.
				Um eine eigene Condition-Klasse zu schreiben, müssen Sie lediglich die Klasse com.wanci.dmerce.webapp.WebappCondition
				ableiten und die Methoden überschreiben (siehe entsprechendes Kapitel).
				</p>
				<p>Es existieren jedoch auch einige vordefinierte Bedingungstypen, die ohne das Schreiben von Java-Code
				eingesetzt werden können.
				</p>
				<p>Da das Aussehen des &lt;condition&gt;-Tags stark vom eingesetzten Typen abhängt,
				werden sie in den entsprechenden Unterkapiteln näher beschrieben.
				</p>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@type</h3>
				<p>Zur Zeit werden folgende vordefinierten Condition-Typen unterstützt:
				</p>
				<table cellspacing="2">
					<tr><th class="deco">Typ</th><th class="deco">Beschreibung</th></tr>
					<tr>
						<td class="deco">buttonpressed</td>
						<td class="deco">
							Prüft, ob ein bestimmter Knopf auf dem Formular gedrückt worden ist.
						</td>
					</tr>
					<tr>
						<td class="deco">equals</td>
						<td class="deco">
							Prüft, ob eine Kontext-Variable einem bestimmten Wert entspricht.
						</td>
					</tr>
				</table>
				<p><hint><b>Hinweis:</b> @type und @javaclass schließen sich gegenseitig aus.
				Wenn ein vordefinierter Typ für eine Bedingung gewählt wird, darf keine	Java-Klasse angegeben werden.</hint>
				</p>
				<h3>@javaclass</h3>
				<p>Vollqualifizierter Name für die Java-Klasse, die als benutzerdefinierte Bedingung
				in dieser Transition verwendet werden soll.
				</p>
				<p><hint><b>Hinweis:</b> @type und @javaclass schließen sich gegenseitig aus.
				Wenn eine Java-Klasse für eine Bedingung angegeben wird, darf kein vordefinierter Typ angegeben werden.</hint>
				</p>
			</content>
			
			<section>
				<title>Typ: buttonpressed</title>
				<content>
					<p>
					Die <c>buttonpressed-Condition</c> wird verwendet, um in Abhängigkeit von bestimmten Knopfdrücken
					im Formular Aktionen auszuführen bzw. auf bestimmte Seiten umzuleiten.
					</p>
					<code annotation="Zwei Transitionen, die auf Knopfdrücke reagieren">
&lt;transition name="abort" target="home" validation="false"&gt;
	&lt;condition type="buttonpressed" value="Cancel"/&gt;
&lt;/transition&gt;
&lt;transition name="store" target="ende"&gt;
	&lt;condition type="buttonpressed" value="Ok"/&gt;
&lt;/transition&gt;
					</code>
					<p>Die erste Transition wird dann betreten, falls der Knopf mit der Beschriftung "Cancel"
					gedrückt worden ist. Falls dies der Fall ist, wird die zweite Transition ignoriert. Falls jedoch
					der Knopf mit der Beschriftung "Ok" gedrückt worden ist, wird zur Page mit der ID "ende" weitergeleitet.
					</p>
					<h2>Tag- und Attribut-Beschreibung</h2>
					<h3>@value</h3>
					<p>Die Beschriftung des Knopfes, auf dessen Betätigung hin diese Transition betreten werden soll.
					</p>
				</content>
			</section>
			
			<section>
				<title>Typ: equals</title>
				<content>
					<p>
					Die <c>equals-Condition</c> wird verwendet, um in Abhängigkeit von bestimmten Kontextvariablen-Werten
					Aktionen auszuführen bzw. auf bestimmte Seiten umzuleiten. Erwartet wird genau ein &lt;parameter&gt;-Tag
					mit dem Namen "expected" und ein &lt;formfield&gt;-Tag, der das zu prüfende Formularfeld angibt.
					</p>
					<code annotation="Equals-Condition, die ein PLZ-Feld prüft">
&lt;transition name="TransitionA" target="seite2"&gt;
    &lt;condition type="equals"&gt;
        &lt;parameter name="expected" value="48149"/&gt;
        &lt;formfield pageid="registerpage" formid="form1" name="plz"/&gt;
    &lt;/condition&gt;
&lt;/transition&gt;
					</code>
					<h2>Tag- und Attribut-Beschreibung</h2>
					<h3>&lt;parameter&gt;/@name</h3>
					<p>fixer Wert: "expected" (Beim <c>Condition-Typ</c> equals müssen Sie diesen Parameter angeben.)</p>
					<h3>&lt;parameter&gt;/@value</h3>
					<p>erwarteter Wert, gegen den verglichen wird.
					</p>
					<h3>&lt;formfield&gt;/@pageid</h3>
					<p>ID der Seite, in der das Formularfeld verwendet wurde.</p>
					<h3>&lt;formfield&gt;/@formid</h3>
					<p>ID des Formulars, in dem das Formularfeld verwendet wurde.</p>
					<h3>&lt;formfield&gt;/@name</h3>
					<p>Name des Formularfeldes</p>
				</content>
			</section>
			
			<section>
				<title>Java-Klasse</title>
				<content>
					<p>
					Es kann eine benutzerdefinierte Klasse zur Formulierung der Bedingung eingesetzt werden.
					Diese muss lediglich von der Klasse com.wanci.dmerce.webapp.WebappCondition abgeleitet sein
					und muss die geerbten Methoden überschreiben, um benutzerdefinierte Logik einzubinden
					(zur Entwicklung eigener Condition-Klassen siehe entsprechendes Kapitel "Benutzerdefinierte Erweiterungen").
					</p>
					<code annotation="Verwendung einer benutzerdefinierten Condition-Klasse">
&lt;transition name="TransitionA" target="PageA"&gt;
    &lt;condition
        javaclass="com.company.condition.MyCondition"/&gt;
&lt;/transition&gt;
					</code>
				</content>
			</section>
			
		</section>

		<section>
			<title>Definition von Aktionen</title>
			<content>
				<h2>&lt;action&gt;</h2>
				<p>Definiert eine Aktion, die bei Betreten der Transition ausgeführt werden soll.
				</p>
				<p>Grundsätzlich kann jede erdenkliche Aktion durch eine Java-Klasse ausgedrückt werden.
				Um eine eigene Action-Klasse zu schreiben, müssen Sie lediglich die Klasse com.wanci.dmerce.webapp.WebappAction
				ableiten und die Methoden überschreiben (siehe entsprechendes Kapitel).
				</p>
				<p>Es existieren jedoch auch einige vordefinierte Aktionstypen, die ohne das Schreiben von Java-Code
				eingesetzt werden können.
				</p>
				<p>Da das Aussehen des &lt;action&gt;-Tags stark vom eingesetzten Typen abhängt,
				werden sie in den entsprechenden Unterkapiteln näher beschrieben.
				</p>
				<h2>Tag- und Attribut-Beschreibung</h2>
				<h3>@type</h3>
				<p>Zur Zeit werden folgende vordefinierten Condition-Typen unterstützt:
				</p>
				<table cellspacing="2">
					<tr><th class="deco">Typ</th><th class="deco">Beschreibung</th></tr>
					<tr>
						<td class="deco">maintain</td>
						<td class="deco">
							Fügt einen neuen Datensatz in die Datenbank ein bzw. ändert einen vorhandenen Datensatz.
							Bei der Datenbank Oracle muss eine Sequenz auf der existieren, die nach folgendem Muster aufgebaut ist: tabellenname_SEQ, wobai tabellenname den Namen der Tabelle darstellt.
							Bei einer MySQL-Datenbank muss ein Autoinkrement-Feld existieren.
						</td>
					</tr>
					<tr>
						<td class="deco">set</td>
						<td class="deco">
							Setzt explizit Kontext-Variablen im Workflow-Kontext. Diese können dann im 
							weiteren Verlauf des Workflows wie jede Kontext-Variable ausgelesen werden.
						</td>
					</tr>
				</table>
				<p><hint><b>Hinweis:</b> @type und @javaclass schließen sich gegenseitig aus.
				Wenn ein vordefinierter Typ für eine Aktion gewählt wird, darf keine Java-Klasse angegeben werden.</hint>
				</p>
				<h3>@javaclass</h3>
				<p>Vollqualifizierter Name für die Java-Klasse, die als benutzerdefinierte Aktion
				in dieser Transition verwendet werden soll.
				</p>
				<p><hint><b>Hinweis:</b> @type und @javaclass schließen sich gegenseitig aus.
				Wenn eine Java-Klasse für eine Aktion angegeben wird, darf kein vordefinierter Typ angegeben werden.</hint>
				</p>
			</content>
			
			<section>
				<title>Action-Typ: maintain</title>
				<content>
					<p>Die <c>maintain-Action</c> gleicht die Formulardaten mit der Datenbank ab. Dazu wird je nach Bedarf
					ein INSERT oder ein UPDATE auf der Datenbank ausgeführt. Mit den in dieser Aktion enthaltenen
					&lt;formfield&gt;-Tags wird festgelegt, welche Formularfelder in die Datenbank geschrieben werden sollen.
					</p>
					<p>Ein Formular in einer Page, das nur als @editable="false" deklariert wurde, legt über diese
					Aktion immer nur einen neuen Datensatz in der Datenbank an. Falls @editable="true" ist, so wird
					bei Bedarf (d.h. im Bearbeiten-Modus) ein vorhandener Datensatz verändert.
					</p>
					<code annotation="Aufbau der maintain-Action">
&lt;action type="maintain"&gt;
    &lt;formfield pageid="PageA" formid="Form1" name="FieldA"/&gt;
    &lt;formfield pageid="PageB" formid="Form1" name="FieldB"/&gt;
    &lt;formfield formid="Form2" name="FieldC"/&gt;
    &lt;formfield formid="Form2" name="FieldD"/&gt;
&lt;/action&gt;
					</code>
					<h2>Tag- und Attribut-Beschreibung</h2>
					<h3>&lt;formfield&gt;/@pageid</h3>
					<p>optional</p>
					<p>Eine Page-ID muss angegeben werden, falls ein Formularfeld referenziert werden soll, das auf
					einer anderen Page innerhalb des Workflows verwendet wurde (Wichtig für mehrseitige Formulare).
					</p>
					<h3>&lt;formfield&gt;/@formid</h3>
					<p>ID des Formulars, in dem das zu referenzierende Formularfeld enthalten ist.
					</p>
					<h3>&lt;formfield&gt;/@name</h3>
					<p>Name des Formularfeldes, das in die Datenbank geschrieben werden soll.
					</p>
				</content>
			</section>
			
			<section>
				<title>Action-Typ: set</title>
				<content>
					<p>
						Die <c>set-Action</c> setzt im Workflow-Kontext Variablen explizit auf einen in der
						dieser Action-Definition festgelegten Wert. Dies kann z.B. nützlich sein, um in Abhängigkeit
						von Benutzereingaben bestimmte interne Variablen auf Werte zu setzen, die im weiteren
						Verlauf des Workflows in Ausgaben oder anderen Conditions und Actions verwendet werden.
					</p>
					<code annotation="Aufbau der set-Action">
&lt;action type="set"&gt;
    &lt;parameter name="modus" value="write"/&gt;
    &lt;parameter name="display-text" value="Im Edit-Modus..."/&gt;
&lt;/action&gt;
					</code>
					<h2>Tag- und Attribut-Beschreibung</h2>
					<h3>&lt;parameter&gt;/@name</h3>
					<p>
						Name der zu setzenden Kontext-Variable.
					</p>
					<h3>&lt;formfield&gt;/@value</h3>
					<p>
						String-Wert, auf den die Kontext-Variable gesetzt werden soll.
					</p>
				</content>
			</section>

			<section>
				<title>Action-Typ: callproc</title>
				<content>
					<p> Die <c>callproc</c>-Action ruft eine zuvor in der Datenbank angelegte Stored Procedure mit 
						Werten aus Formularfeldern auf. Die Parameter der Stored Procedure werden in der gleichen 
						Reihenfolge wie die <c>&lt;formfield&gt;</c>-Tags mit Werten aus Formularfeldern gefüllt.</p>
					<p> Wenn Sie in der Formfield-Liste ein Formularfeld angeben, das vom Typ <c>file</c> ist, werden 
						an die Stored Procedure gleich zwei Werte übergeben. Der erste Wert entspricht dem 
						Origial-Dateinamen (ohne Pfad) auf dem Upload-Client. Der zweite Wert ist der Dateiname (ohne 
						Pfad) auf dem Server. Beachten Sie daher, dass Sie für die Verwendung von Formularfeldern für 
						den File-Upload zwei aufeinanderfolgende Parameter in der Stored Procedure vorsehen müssen.</p>
					<p> <strong>Hinweis: </strong>Die <c>callproc</c>-Action erwartet, dass die Stored Procedure nur Input-Parameter und keine 
						Output-Parameter besitzt.</p>
					<code annotation="Aufbau der callproc-Action">
&lt;action type="callproc"&gt;
    &lt;parameter name="name" value="fooProc"/&gt;
    &lt;formfield pageid="PageA" formid="Form1" name="FieldA"/&gt;
    &lt;formfield pageid="PageB" formid="Form1" name="FieldB"/&gt;
    &lt;formfield formid="Form2" name="FieldC"/&gt;
    &lt;formfield formid="Form2" name="FieldD"/&gt;
&lt;/action&gt;
					</code>
					<h2>Tag- und Attribut-Beschreibung</h2>
					<h3>&lt;parameter&gt;/@name</h3>
					<p>Dieses Attribut muss bei diesem Action-Typ immer den Wert "name" beinhalten.</p>
					<h3>&lt;parameter&gt;/@value</h3>
					<p>Name der Stored Procedure in der Datenbank.</p>
					<h3>&lt;formfield&gt;/@pageid</h3>
					<p>optional</p>
					<p>Eine Page-ID muss angegeben werden, falls ein Formularfeld referenziert werden soll, das auf
					einer anderen Page innerhalb des Workflows verwendet wurde (Wichtig für mehrseitige Formulare).
					</p>
					<h3>&lt;formfield&gt;/@formid</h3>
					<p>ID des Formulars, in dem das zu referenzierende Formularfeld enthalten ist.
					</p>
					<h3>&lt;formfield&gt;/@name</h3>
					<p>Name des Formularfeldes, das in die Datenbank geschrieben werden soll.
					</p>
				</content>
			</section>
			
			<section>
				<title>Java-Klasse</title>
				<content>
					<p>
					Es kann eine benutzerdefinierte Klasse zur Beschreibung der Aktion eingesetzt werden.
					Diese muss lediglich von der Klasse <c>com.wanci.dmerce.webapp.WebappAction</c> abgeleitet sein
					und muss die geerbten Methoden überschreiben, um benutzerdefinierte Logik einzubinden
					(zur Entwicklung eigener Action-Klassen siehe entsprechendes Kapitel).
					</p>
					<code annotation="Verwendung einer benutzerdefinierten Action-Klasse">
&lt;transition name="TransitionA" target="PageA"&gt;
    &lt;action
        javaclass="com.company.action.MyAction"/&gt;
&lt;/transition&gt;
					</code>
				</content>
			</section>
			
		</section>
		

	</section>
	
<!--
	** Der Party-Melder ist zur Zeit noch nicht inder Standard-Distribution enthalten.
	** Daher wird dieser Teil zunächst ausgeklammert.
	
	<section>
		<title>Die Beispielanwendung Party-Melder</title>
		<content>
			Der Partymelder ist eine Beispielanwendung, die sich im Lieferumfang von <dmerce/> befindet. Es zeigt die grundsätzlichen Konzepte hinter <dmerce/>3 und deren Anwendung am praktischen Beispiel.
			In diesem Abschnitt des Handbuchs wird diese Anwendung vorgestellt und der Aufbau erläutert.
		</content>
		<section>
			<title>Der Grundaufbau der in HTML: Templatesystem</title>
			<content>
			   Jede Datei in der Anwendung PartyMelder ist ähnlich aufgebaut. Zunächst wird die Datei "init.jsp" eingebunden, die in jeder Datei von <dmerce/> in der ersten Zeile stehen muss. 
			   Diese Datei enthält generelle <dmerce/>-typische Initialisierungen der einzelnen Tag-Bibliotheken.
			   Als nächstes folgt die Struktur der Webseite. Hier bedienen wir uns direkt eines in <dmerce/> eingebauten Baustein-Systems.
			   Im Beispiel bauen wir jede Seite aus drei Elementen zusammen. Seite 1 aus dem Beispiel ist unten dargestellt.
			   <code annotation="seite1.jsp">
&lt;%@ include file="init.jsp" %&gt;
&lt;q:usetemplate path="designvorlage.jsp"&gt;
	&lt;q:setbrick name="header"&gt;
	  &lt;img src="&lt;q:res path="/images/dmerce/_logo.gif"/&gt;" border="0"&gt; III alpha2
	  &lt;hr&gt;
	  &lt;h1&gt;Seite 1&lt;/h1&gt;
	&lt;/q:setbrick&gt;
	&lt;q:setbrick name="content" path="bricks/person_form.jsp"/&gt;
	&lt;q:setbrick name="footer" path="bricks/footer.jsp"/&gt;
&lt;/q:usetemplate&gt;			   	  
  		   	   </code>
  		   	   Seite1.jsp bindet zunächst die erwähnte init.jsp ein, die die Verwendung von Tag-Bibliotheken erlaubt. Weitere Tag-Bibliotheken können in der init.jsp eingebunden werden. Als Beispiel sei die <a href="http://wwws.sun.com/software/communitysource/jstl/download.html">JSTL</a> angeführt, mit der 
  		   	   viele Funktionen in JSP ermöglicht werden, ohne in Java programmieren zu müssen. Hier sind Vergleiche möglich (if then else) oder auch Rechenoperationen.
  		   	   Die Vorlage, die von der Seite 1 verwendet wird, heisst "designvorlage.jsp" und wird in der nächsten Zeile...
  		   	   
  		   	   Bricks...
			   <ul>
			     <li>Header: ist ein statischer Code zur Anzeige des Designs</li>
			     <li>Content</li>
			     <li>Footer</li>
			   </ul>
			</content>
		</section>
	</section>
-->

	<section>
		<title>Benutzerdefinierte Erweiterungen</title>
		<content>
			<dmerce/> kann durch eigene Module erweitert werden, so dass der Funktionsumfang wächst. Es können eigene Aktionen, Bedingungen, und Tags hinzugefügt werden. Das Schreiben dieser Erweiterungen wird in diesem Kapitel dokumentiert.
		</content>
		<section>
			<title>Eigene Conditions entwickeln</title>
			<content>
				<p>
				[Dieses Kapitel befindet sich in Entwicklung]
				</p>
			</content>
		</section>
		<section>
			<title>Eigene Actions entwickeln</title>
			<content>
				<p>
				[Dieses Kapitel befindet sich in Entwicklung]
				</p>
			</content>
		</section>
		<section>
			<title>Eigene JSP-Tags entwickeln</title>
			<content>
				<p>
				<dmerce/> selbst ist auf der JSP-Ebene eine Sammlung von benutzerdefinierten JSP-Tags, die ganz
				gewöhnlich in eine JSP-Anwendung eingebunden werden können.
				</p>
				Das Entwickeln von eigenen JSP-Tags ist in der Fachliteratur ausführlich beschrieben. Wir verweisen
				an dieser Stelle aus diesem Grunde lediglich auf die schon vorhandene Literatur.
				Im Internet sind zahlreiche Lehrgänge (Tutorials) zu Taglibs bzw. Java Server Pages beschrieben,
				die Sie kostenlos nutzen können.
			</content>
		</section>
	</section>
	
	<section>
		<title>Anhang</title>
		<content>
			<p> In diesem Teil der Dokumentation finden Sie zusätzliche Informationen, die bei der Arbeit mit <dmerce/> 
				hilfreich sein könnten.</p>
		</content>
		<section>
			<title>Besonderheiten in Verbindung mit Oracle</title>
			<content>
				<p> Hier finden Sie Informationen zu den Besonderheiten, die bei der Verwendung einer Oracle-Datenbank 
					berücksichtigt werden müssen.</p>
			</content>
			<section>
				<title>Numerische Typen</title>
				<content>
					<p> Wenn Sie numerische Felder in Ihren Tabellen verwenden, sollten Sie beachten, dass schon 
						geringfügige Unterschiede in der Typdefinition der Felder Auswirkungen auf die Anzeige von 
						Zahlen haben kann.</p>
					<p> Wenn Sie ein Feld vom Typ <c>NUMBER</c> anlegen und dabei die Angabe der Feldlänge bzw. der 
						Nachkommastellen weglassen, wird das Feld innerhalb von <dmerce/> als Dezimalzahl mit beliebig 
						vielen Nachkommastellen gewertet.</p>
					<p> Falls Sie also ausdrücklich nur ganze Zahlen verwenden möchten, müssen Sie entweder den Typ 
						<c>INTEGER</c> oder den <c>NUMBER</c>-Typ mit einer Längenangabe wie z.B. <c>NUMBER(20)</c> 
						einschränken.</p>
					<p> Um explizit Dezimalzahlen mit einer bestimmten Genauigkeit zu verwenden, können Sie eine 
						Typdefinition wie z.B. <c>NUMBER(20,5)</c> verwenden. Mit dem Typ <c>FLOAT</c> steht Ihnen ein 
						Fließkomma-Typ zur verfügung, bei dem Sie die Anzahl der Nachkommastellen nicht explizit 
						festlegen müssen.</p>
					<p> Bitte beachten Sie, dass die Festlegung des Typs in der Datenbank völlig unabhängig von der 
						späteren Formatierung durch die <dmerce/>-Tags sind. So können Sie in der Datenbank eine 
						Fließkommazahl gespeichert haben, die Sie auf Ihrer Webseite dennoch mit oder ohne 
						Nachkommaanteil darstellen können, indem Sie das <c>&lt;qsql:field&gt;</c>-Tag mit den 
						Attributen <c>precision</c>, <c>maxprecision</c> und/oder <c>minprecision</c> einsetzen.</p>
				</content>
			</section>
		</section>
	</section>
	
</document>