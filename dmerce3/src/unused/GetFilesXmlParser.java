/*
 * Created on Apr 9, 2003
 */

import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXParseException;

/**
 * @author mm
 * @version $Id: GetFilesXmlParser.java,v 1.1 2004/03/29 13:39:32 rb Exp $
 */

public class GetFilesXmlParser {

	private boolean DEBUG = false;

	static Document document = null;

	static NamedNodeMap attrs;

	static GetFilesXmlParserInfo s;

	public void usage(String args[]) {
		GetFilesXmlParser Parser = new GetFilesXmlParser();
		if (args.length != 1) {
			System.err.println("Usage: java GetFilesXmlParser filename");
			System.exit(1);
		}
		long startTime = System.currentTimeMillis();
		//System.out.println("Argument: " + args[0]);
		Parser.parse(args[0]);

		long runTime = System.currentTimeMillis() - startTime;
		System.out.println("Run time was " + runTime + "ms");

		//if (s.getHost() != null)
		//	System.out.println(s.getHost());
	}

	/**
	 * 
	 * @param node	beinhaltet das uebergebene xml-Dokument
	 */

	public void setObjectParameter(Node node) {

		int type = node.getNodeType();
		switch (type) {

			// print the document element 
			case Node.DOCUMENT_NODE :
				{
					setObjectParameter(((Document) node).getDocumentElement());
					break;
				}

				// print element with attributes 
			case Node.ELEMENT_NODE :
				{
					// setting objects from xml document
					attrs = node.getAttributes();

					s = new GetFilesXmlParserInfo();

					for (int i = 0; i < attrs.getLength(); i++) {
						Node attr = attrs.item(i);

						if (node.getLocalName().equals("server")) {
							ServerName(attr);
						}

						if (node.getLocalName().equals("url")) {
							UrlName(attr);
						}

						if (node.getLocalName().equals("file")) {
							FileName(attr);
						}

						if (node.getLocalName().equals("host")) {
							HostName(attr);
						}

						if (node.getLocalName().equals("port")) {
							PortNumber(attr);
						}

						if (node.getLocalName().equals("protocol")) {
							ProtocolName(attr);
						}

						if (node.getLocalName().equals("path")) {
							PathName(attr);
						}

						if (node.getLocalName().equals("user")) {
							UserName(attr);
						}

						if (node.getLocalName().equals("password")) {
							PasswordName(attr);
						}
					}
					String temp = "";
					if (s.getProtocol() != null) {
						//System.out.println(s.getProtocol());
						temp = temp + s.getProtocol() + "://";
					}
					if (s.getHost() != null) {
						//System.out.println(s.getHost());
						temp = temp + s.getHost();
					}
					if (s.getPath() != null) {
						//System.out.println(s.getPath());
						temp = temp + "/" + s.getPath();
					}
					if (s.getFilename() != null) {
						//System.out.println(s.getFilename());
						temp = temp + "/" + s.getFilename() + "\n";
					}
					System.out.print(temp);
				}

			case Node.TEXT_NODE :
				{
					if (node.getNodeValue() != "")
						s.setChars(node.getNodeValue());
				}
				if (s.getChars() != null) {
					System.out.print(s.getChars());
				}

				// recursive delegation of all child nodes
				NodeList children = node.getChildNodes();
				if (children != null) {
					int len = children.getLength();
					for (int i = 0; i < len; i++)
						setObjectParameter(children.item(i));
				}
				break;
		}
	}

	/**
	 * 
	 * @param filename	xml-Datei die uebergeben wird.
	 */

	public void parse(String filename) {

		// instantiate a new DocumentBuilderFactory
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(true);
		factory.setNamespaceAware(true);

		try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			document = builder.parse(new File(filename));
			if (document != null) {
				setObjectParameter(document);
			}

		}
		catch (SAXParseException spe) {
			// Error generated by the parser					
			System.out.println(
				"\n** Parsing error"
					+ ", line "
					+ spe.getLineNumber()
					+ ", uri "
					+ spe.getSystemId());
			System.out.println(" " + spe.getMessage());

			// Use the contained exception, if any
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();

		}
		catch (Exception e) {
			if (DEBUG)
				e.printStackTrace();
		}
	}

	public void ServerName(Node attr) {
		s.setServerName(attr.getNodeValue());
	}

	public void UrlName(Node attr) {
		s.setUrl(attr.getNodeValue());
	}

	public void FileName(Node attr) {
		s.setFilename(attr.getNodeValue());
	}

	public void HostName(Node attr) {
		s.setHost(attr.getNodeValue());
	}

	public void PortNumber(Node attr) {
		s.setPort(attr.getNodeValue());
	}

	public void ProtocolName(Node attr) {
		s.setProtocol(attr.getNodeValue());
	}

	public void PathName(Node attr) {
		s.setPath(attr.getNodeValue());
	}

	public void UserName(Node attr) {
		s.setUsername(attr.getNodeValue());
	}

	public void PasswordName(Node attr) {
		s.setPassword(attr.getNodeValue());
	}
}